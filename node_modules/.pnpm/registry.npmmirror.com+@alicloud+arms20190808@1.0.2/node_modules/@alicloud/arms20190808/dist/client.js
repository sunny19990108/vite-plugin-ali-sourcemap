"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const endpoint_util_1 = __importDefault(require("@alicloud/endpoint-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class CallChainInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            additionalInfo: 'AdditionalInfo',
            appName: 'AppName',
            appType: 'AppType',
            children: 'Children',
            haveSpan: 'HaveSpan',
            logMap: 'LogMap',
            logTime: 'LogTime',
            parentSpanId: 'ParentSpanId',
            pid: 'Pid',
            regionId: 'RegionId',
            resultCode: 'ResultCode',
            rpc: 'Rpc',
            rpcId: 'RpcId',
            rpcType: 'RpcType',
            serverIp: 'ServerIp',
            span: 'Span',
            spanId: 'SpanId',
            tagMap: 'TagMap',
            traceId: 'TraceId',
        };
    }
    static types() {
        return {
            additionalInfo: 'string',
            appName: 'string',
            appType: 'string',
            children: { 'type': 'array', 'itemType': CallChainInfo },
            haveSpan: 'boolean',
            logMap: { 'type': 'map', 'keyType': 'string', 'valueType': '{[key: string]: any}' },
            logTime: 'number',
            parentSpanId: 'string',
            pid: 'string',
            regionId: 'string',
            resultCode: 'string',
            rpc: 'string',
            rpcId: 'string',
            rpcType: 'number',
            serverIp: 'string',
            span: 'number',
            spanId: 'string',
            tagMap: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            traceId: 'string',
        };
    }
}
exports.CallChainInfo = CallChainInfo;
class AddAliClusterIdsToPrometheusGlobalViewRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterIds: 'ClusterIds',
            globalViewClusterId: 'GlobalViewClusterId',
            groupName: 'GroupName',
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            clusterIds: 'string',
            globalViewClusterId: 'string',
            groupName: 'string',
            regionId: 'string',
        };
    }
}
exports.AddAliClusterIdsToPrometheusGlobalViewRequest = AddAliClusterIdsToPrometheusGlobalViewRequest;
class AddAliClusterIdsToPrometheusGlobalViewResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: AddAliClusterIdsToPrometheusGlobalViewResponseBodyData,
            requestId: 'string',
        };
    }
}
exports.AddAliClusterIdsToPrometheusGlobalViewResponseBody = AddAliClusterIdsToPrometheusGlobalViewResponseBody;
class AddAliClusterIdsToPrometheusGlobalViewResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AddAliClusterIdsToPrometheusGlobalViewResponseBody,
        };
    }
}
exports.AddAliClusterIdsToPrometheusGlobalViewResponse = AddAliClusterIdsToPrometheusGlobalViewResponse;
class AddGrafanaRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
            integration: 'Integration',
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            clusterId: 'string',
            integration: 'string',
            regionId: 'string',
        };
    }
}
exports.AddGrafanaRequest = AddGrafanaRequest;
class AddGrafanaResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.AddGrafanaResponseBody = AddGrafanaResponseBody;
class AddGrafanaResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AddGrafanaResponseBody,
        };
    }
}
exports.AddGrafanaResponse = AddGrafanaResponse;
class AddIntegrationRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
            integration: 'Integration',
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            clusterId: 'string',
            integration: 'string',
            regionId: 'string',
        };
    }
}
exports.AddIntegrationRequest = AddIntegrationRequest;
class AddIntegrationResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.AddIntegrationResponseBody = AddIntegrationResponseBody;
class AddIntegrationResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AddIntegrationResponseBody,
        };
    }
}
exports.AddIntegrationResponse = AddIntegrationResponse;
class AddPrometheusGlobalViewRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusters: 'Clusters',
            groupName: 'GroupName',
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            clusters: 'string',
            groupName: 'string',
            regionId: 'string',
        };
    }
}
exports.AddPrometheusGlobalViewRequest = AddPrometheusGlobalViewRequest;
class AddPrometheusGlobalViewResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: AddPrometheusGlobalViewResponseBodyData,
            requestId: 'string',
        };
    }
}
exports.AddPrometheusGlobalViewResponseBody = AddPrometheusGlobalViewResponseBody;
class AddPrometheusGlobalViewResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AddPrometheusGlobalViewResponseBody,
        };
    }
}
exports.AddPrometheusGlobalViewResponse = AddPrometheusGlobalViewResponse;
class AddPrometheusGlobalViewByAliClusterIdsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterIds: 'ClusterIds',
            groupName: 'GroupName',
            productCode: 'ProductCode',
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            clusterIds: 'string',
            groupName: 'string',
            productCode: 'string',
            regionId: 'string',
        };
    }
}
exports.AddPrometheusGlobalViewByAliClusterIdsRequest = AddPrometheusGlobalViewByAliClusterIdsRequest;
class AddPrometheusGlobalViewByAliClusterIdsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: AddPrometheusGlobalViewByAliClusterIdsResponseBodyData,
            requestId: 'string',
        };
    }
}
exports.AddPrometheusGlobalViewByAliClusterIdsResponseBody = AddPrometheusGlobalViewByAliClusterIdsResponseBody;
class AddPrometheusGlobalViewByAliClusterIdsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AddPrometheusGlobalViewByAliClusterIdsResponseBody,
        };
    }
}
exports.AddPrometheusGlobalViewByAliClusterIdsResponse = AddPrometheusGlobalViewByAliClusterIdsResponse;
class AddPrometheusInstanceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'Name',
            regionId: 'RegionId',
            type: 'Type',
        };
    }
    static types() {
        return {
            name: 'string',
            regionId: 'string',
            type: 'string',
        };
    }
}
exports.AddPrometheusInstanceRequest = AddPrometheusInstanceRequest;
class AddPrometheusInstanceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.AddPrometheusInstanceResponseBody = AddPrometheusInstanceResponseBody;
class AddPrometheusInstanceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AddPrometheusInstanceResponseBody,
        };
    }
}
exports.AddPrometheusInstanceResponse = AddPrometheusInstanceResponse;
class AddRecordingRuleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
            regionId: 'RegionId',
            ruleYaml: 'RuleYaml',
        };
    }
    static types() {
        return {
            clusterId: 'string',
            regionId: 'string',
            ruleYaml: 'string',
        };
    }
}
exports.AddRecordingRuleRequest = AddRecordingRuleRequest;
class AddRecordingRuleResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.AddRecordingRuleResponseBody = AddRecordingRuleResponseBody;
class AddRecordingRuleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AddRecordingRuleResponseBody,
        };
    }
}
exports.AddRecordingRuleResponse = AddRecordingRuleResponse;
class AppendInstancesToPrometheusGlobalViewRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusters: 'Clusters',
            globalViewClusterId: 'GlobalViewClusterId',
            groupName: 'GroupName',
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            clusters: 'string',
            globalViewClusterId: 'string',
            groupName: 'string',
            regionId: 'string',
        };
    }
}
exports.AppendInstancesToPrometheusGlobalViewRequest = AppendInstancesToPrometheusGlobalViewRequest;
class AppendInstancesToPrometheusGlobalViewResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: AppendInstancesToPrometheusGlobalViewResponseBodyData,
            requestId: 'string',
        };
    }
}
exports.AppendInstancesToPrometheusGlobalViewResponseBody = AppendInstancesToPrometheusGlobalViewResponseBody;
class AppendInstancesToPrometheusGlobalViewResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AppendInstancesToPrometheusGlobalViewResponseBody,
        };
    }
}
exports.AppendInstancesToPrometheusGlobalViewResponse = AppendInstancesToPrometheusGlobalViewResponse;
class ApplyScenarioRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            config: 'Config',
            name: 'Name',
            regionId: 'RegionId',
            scenario: 'Scenario',
            sign: 'Sign',
            snDump: 'SnDump',
            snForce: 'SnForce',
            snStat: 'SnStat',
            snTransfer: 'SnTransfer',
            updateOption: 'UpdateOption',
        };
    }
    static types() {
        return {
            appId: 'string',
            config: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            name: 'string',
            regionId: 'string',
            scenario: 'string',
            sign: 'string',
            snDump: 'boolean',
            snForce: 'boolean',
            snStat: 'boolean',
            snTransfer: 'boolean',
            updateOption: 'boolean',
        };
    }
}
exports.ApplyScenarioRequest = ApplyScenarioRequest;
class ApplyScenarioShrinkRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            configShrink: 'Config',
            name: 'Name',
            regionId: 'RegionId',
            scenario: 'Scenario',
            sign: 'Sign',
            snDump: 'SnDump',
            snForce: 'SnForce',
            snStat: 'SnStat',
            snTransfer: 'SnTransfer',
            updateOption: 'UpdateOption',
        };
    }
    static types() {
        return {
            appId: 'string',
            configShrink: 'string',
            name: 'string',
            regionId: 'string',
            scenario: 'string',
            sign: 'string',
            snDump: 'boolean',
            snForce: 'boolean',
            snStat: 'boolean',
            snTransfer: 'boolean',
            updateOption: 'boolean',
        };
    }
}
exports.ApplyScenarioShrinkRequest = ApplyScenarioShrinkRequest;
class ApplyScenarioResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            result: 'Result',
        };
    }
    static types() {
        return {
            requestId: 'string',
            result: 'string',
        };
    }
}
exports.ApplyScenarioResponseBody = ApplyScenarioResponseBody;
class ApplyScenarioResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ApplyScenarioResponseBody,
        };
    }
}
exports.ApplyScenarioResponse = ApplyScenarioResponse;
class CheckServiceStatusRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            regionId: 'RegionId',
            svcCode: 'SvcCode',
        };
    }
    static types() {
        return {
            regionId: 'string',
            svcCode: 'string',
        };
    }
}
exports.CheckServiceStatusRequest = CheckServiceStatusRequest;
class CheckServiceStatusResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.CheckServiceStatusResponseBody = CheckServiceStatusResponseBody;
class CheckServiceStatusResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CheckServiceStatusResponseBody,
        };
    }
}
exports.CheckServiceStatusResponse = CheckServiceStatusResponse;
class ConfigAppRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appIds: 'AppIds',
            enable: 'Enable',
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            appIds: 'string',
            enable: 'string',
            regionId: 'string',
        };
    }
}
exports.ConfigAppRequest = ConfigAppRequest;
class ConfigAppResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.ConfigAppResponseBody = ConfigAppResponseBody;
class ConfigAppResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ConfigAppResponseBody,
        };
    }
}
exports.ConfigAppResponse = ConfigAppResponse;
class CreateAlertContactRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            contactName: 'ContactName',
            dingRobotWebhookUrl: 'DingRobotWebhookUrl',
            email: 'Email',
            phoneNum: 'PhoneNum',
            regionId: 'RegionId',
            systemNoc: 'SystemNoc',
        };
    }
    static types() {
        return {
            contactName: 'string',
            dingRobotWebhookUrl: 'string',
            email: 'string',
            phoneNum: 'string',
            regionId: 'string',
            systemNoc: 'boolean',
        };
    }
}
exports.CreateAlertContactRequest = CreateAlertContactRequest;
class CreateAlertContactResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            contactId: 'ContactId',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            contactId: 'string',
            requestId: 'string',
        };
    }
}
exports.CreateAlertContactResponseBody = CreateAlertContactResponseBody;
class CreateAlertContactResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateAlertContactResponseBody,
        };
    }
}
exports.CreateAlertContactResponse = CreateAlertContactResponse;
class CreateAlertContactGroupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            contactGroupName: 'ContactGroupName',
            contactIds: 'ContactIds',
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            contactGroupName: 'string',
            contactIds: 'string',
            regionId: 'string',
        };
    }
}
exports.CreateAlertContactGroupRequest = CreateAlertContactGroupRequest;
class CreateAlertContactGroupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            contactGroupId: 'ContactGroupId',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            contactGroupId: 'string',
            requestId: 'string',
        };
    }
}
exports.CreateAlertContactGroupResponseBody = CreateAlertContactGroupResponseBody;
class CreateAlertContactGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateAlertContactGroupResponseBody,
        };
    }
}
exports.CreateAlertContactGroupResponse = CreateAlertContactGroupResponse;
class CreateDispatchRuleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dispatchRule: 'DispatchRule',
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            dispatchRule: 'string',
            regionId: 'string',
        };
    }
}
exports.CreateDispatchRuleRequest = CreateDispatchRuleRequest;
class CreateDispatchRuleResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dispatchRuleId: 'DispatchRuleId',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            dispatchRuleId: 'number',
            requestId: 'string',
        };
    }
}
exports.CreateDispatchRuleResponseBody = CreateDispatchRuleResponseBody;
class CreateDispatchRuleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateDispatchRuleResponseBody,
        };
    }
}
exports.CreateDispatchRuleResponse = CreateDispatchRuleResponse;
class CreateIntegrationRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            autoRecover: 'AutoRecover',
            description: 'Description',
            integrationName: 'IntegrationName',
            integrationProductType: 'IntegrationProductType',
            recoverTime: 'RecoverTime',
        };
    }
    static types() {
        return {
            autoRecover: 'boolean',
            description: 'string',
            integrationName: 'string',
            integrationProductType: 'string',
            recoverTime: 'number',
        };
    }
}
exports.CreateIntegrationRequest = CreateIntegrationRequest;
class CreateIntegrationResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            integration: 'Integration',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            integration: CreateIntegrationResponseBodyIntegration,
            requestId: 'string',
        };
    }
}
exports.CreateIntegrationResponseBody = CreateIntegrationResponseBody;
class CreateIntegrationResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateIntegrationResponseBody,
        };
    }
}
exports.CreateIntegrationResponse = CreateIntegrationResponse;
class CreateOrUpdateAlertRuleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alertCheckType: 'AlertCheckType',
            alertGroup: 'AlertGroup',
            alertId: 'AlertId',
            alertName: 'AlertName',
            alertRuleContent: 'AlertRuleContent',
            alertStatus: 'AlertStatus',
            alertType: 'AlertType',
            annotations: 'Annotations',
            autoAddNewApplication: 'AutoAddNewApplication',
            clusterId: 'ClusterId',
            duration: 'Duration',
            filters: 'Filters',
            labels: 'Labels',
            level: 'Level',
            message: 'Message',
            metricsKey: 'MetricsKey',
            metricsType: 'MetricsType',
            notifyStrategy: 'NotifyStrategy',
            pids: 'Pids',
            promQL: 'PromQL',
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            alertCheckType: 'string',
            alertGroup: 'number',
            alertId: 'number',
            alertName: 'string',
            alertRuleContent: 'string',
            alertStatus: 'string',
            alertType: 'string',
            annotations: 'string',
            autoAddNewApplication: 'boolean',
            clusterId: 'string',
            duration: 'number',
            filters: 'string',
            labels: 'string',
            level: 'string',
            message: 'string',
            metricsKey: 'string',
            metricsType: 'string',
            notifyStrategy: 'string',
            pids: 'string',
            promQL: 'string',
            regionId: 'string',
        };
    }
}
exports.CreateOrUpdateAlertRuleRequest = CreateOrUpdateAlertRuleRequest;
class CreateOrUpdateAlertRuleResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alertRule: 'AlertRule',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            alertRule: CreateOrUpdateAlertRuleResponseBodyAlertRule,
            requestId: 'string',
        };
    }
}
exports.CreateOrUpdateAlertRuleResponseBody = CreateOrUpdateAlertRuleResponseBody;
class CreateOrUpdateAlertRuleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateOrUpdateAlertRuleResponseBody,
        };
    }
}
exports.CreateOrUpdateAlertRuleResponse = CreateOrUpdateAlertRuleResponse;
class CreateOrUpdateContactRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            contactId: 'ContactId',
            contactName: 'ContactName',
            email: 'Email',
            phone: 'Phone',
            reissueSendNotice: 'ReissueSendNotice',
        };
    }
    static types() {
        return {
            contactId: 'number',
            contactName: 'string',
            email: 'string',
            phone: 'string',
            reissueSendNotice: 'number',
        };
    }
}
exports.CreateOrUpdateContactRequest = CreateOrUpdateContactRequest;
class CreateOrUpdateContactResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alertContact: 'AlertContact',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            alertContact: CreateOrUpdateContactResponseBodyAlertContact,
            requestId: 'string',
        };
    }
}
exports.CreateOrUpdateContactResponseBody = CreateOrUpdateContactResponseBody;
class CreateOrUpdateContactResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateOrUpdateContactResponseBody,
        };
    }
}
exports.CreateOrUpdateContactResponse = CreateOrUpdateContactResponse;
class CreateOrUpdateContactGroupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            contactGroupId: 'ContactGroupId',
            contactGroupName: 'ContactGroupName',
            contactIds: 'ContactIds',
        };
    }
    static types() {
        return {
            contactGroupId: 'number',
            contactGroupName: 'string',
            contactIds: 'string',
        };
    }
}
exports.CreateOrUpdateContactGroupRequest = CreateOrUpdateContactGroupRequest;
class CreateOrUpdateContactGroupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alertContactGroup: 'AlertContactGroup',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            alertContactGroup: CreateOrUpdateContactGroupResponseBodyAlertContactGroup,
            requestId: 'string',
        };
    }
}
exports.CreateOrUpdateContactGroupResponseBody = CreateOrUpdateContactGroupResponseBody;
class CreateOrUpdateContactGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateOrUpdateContactGroupResponseBody,
        };
    }
}
exports.CreateOrUpdateContactGroupResponse = CreateOrUpdateContactGroupResponse;
class CreateOrUpdateEventBridgeIntegrationRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessKey: 'AccessKey',
            accessSecret: 'AccessSecret',
            description: 'Description',
            endpoint: 'Endpoint',
            eventBusName: 'EventBusName',
            eventBusRegionId: 'EventBusRegionId',
            id: 'Id',
            name: 'Name',
            source: 'Source',
        };
    }
    static types() {
        return {
            accessKey: 'string',
            accessSecret: 'string',
            description: 'string',
            endpoint: 'string',
            eventBusName: 'string',
            eventBusRegionId: 'string',
            id: 'number',
            name: 'string',
            source: 'string',
        };
    }
}
exports.CreateOrUpdateEventBridgeIntegrationRequest = CreateOrUpdateEventBridgeIntegrationRequest;
class CreateOrUpdateEventBridgeIntegrationResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            eventBridgeIntegration: 'EventBridgeIntegration',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            eventBridgeIntegration: CreateOrUpdateEventBridgeIntegrationResponseBodyEventBridgeIntegration,
            requestId: 'string',
        };
    }
}
exports.CreateOrUpdateEventBridgeIntegrationResponseBody = CreateOrUpdateEventBridgeIntegrationResponseBody;
class CreateOrUpdateEventBridgeIntegrationResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateOrUpdateEventBridgeIntegrationResponseBody,
        };
    }
}
exports.CreateOrUpdateEventBridgeIntegrationResponse = CreateOrUpdateEventBridgeIntegrationResponse;
class CreateOrUpdateIMRobotRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cardTemplate: 'CardTemplate',
            dailyNoc: 'DailyNoc',
            dailyNocTime: 'DailyNocTime',
            dingSignKey: 'DingSignKey',
            enableOutgoing: 'EnableOutgoing',
            robotAddress: 'RobotAddress',
            robotId: 'RobotId',
            robotName: 'RobotName',
            token: 'Token',
            type: 'Type',
        };
    }
    static types() {
        return {
            cardTemplate: 'string',
            dailyNoc: 'boolean',
            dailyNocTime: 'string',
            dingSignKey: 'string',
            enableOutgoing: 'boolean',
            robotAddress: 'string',
            robotId: 'number',
            robotName: 'string',
            token: 'string',
            type: 'string',
        };
    }
}
exports.CreateOrUpdateIMRobotRequest = CreateOrUpdateIMRobotRequest;
class CreateOrUpdateIMRobotResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alertRobot: 'AlertRobot',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            alertRobot: CreateOrUpdateIMRobotResponseBodyAlertRobot,
            requestId: 'string',
        };
    }
}
exports.CreateOrUpdateIMRobotResponseBody = CreateOrUpdateIMRobotResponseBody;
class CreateOrUpdateIMRobotResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateOrUpdateIMRobotResponseBody,
        };
    }
}
exports.CreateOrUpdateIMRobotResponse = CreateOrUpdateIMRobotResponse;
class CreateOrUpdateNotificationPolicyRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            escalationPolicyId: 'EscalationPolicyId',
            groupRule: 'GroupRule',
            id: 'Id',
            integrationId: 'IntegrationId',
            matchingRules: 'MatchingRules',
            name: 'Name',
            notifyRule: 'NotifyRule',
            notifyTemplate: 'NotifyTemplate',
            regionId: 'RegionId',
            repeat: 'Repeat',
            repeatInterval: 'RepeatInterval',
            sendRecoverMessage: 'SendRecoverMessage',
        };
    }
    static types() {
        return {
            escalationPolicyId: 'number',
            groupRule: 'string',
            id: 'number',
            integrationId: 'number',
            matchingRules: 'string',
            name: 'string',
            notifyRule: 'string',
            notifyTemplate: 'string',
            regionId: 'string',
            repeat: 'boolean',
            repeatInterval: 'number',
            sendRecoverMessage: 'boolean',
        };
    }
}
exports.CreateOrUpdateNotificationPolicyRequest = CreateOrUpdateNotificationPolicyRequest;
class CreateOrUpdateNotificationPolicyResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            notificationPolicy: 'NotificationPolicy',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            notificationPolicy: CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicy,
            requestId: 'string',
        };
    }
}
exports.CreateOrUpdateNotificationPolicyResponseBody = CreateOrUpdateNotificationPolicyResponseBody;
class CreateOrUpdateNotificationPolicyResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateOrUpdateNotificationPolicyResponseBody,
        };
    }
}
exports.CreateOrUpdateNotificationPolicyResponse = CreateOrUpdateNotificationPolicyResponse;
class CreateOrUpdateSilencePolicyRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'Id',
            matchingRules: 'MatchingRules',
            name: 'Name',
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            id: 'number',
            matchingRules: 'string',
            name: 'string',
            regionId: 'string',
        };
    }
}
exports.CreateOrUpdateSilencePolicyRequest = CreateOrUpdateSilencePolicyRequest;
class CreateOrUpdateSilencePolicyResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            silencePolicy: 'SilencePolicy',
        };
    }
    static types() {
        return {
            requestId: 'string',
            silencePolicy: CreateOrUpdateSilencePolicyResponseBodySilencePolicy,
        };
    }
}
exports.CreateOrUpdateSilencePolicyResponseBody = CreateOrUpdateSilencePolicyResponseBody;
class CreateOrUpdateSilencePolicyResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateOrUpdateSilencePolicyResponseBody,
        };
    }
}
exports.CreateOrUpdateSilencePolicyResponse = CreateOrUpdateSilencePolicyResponse;
class CreateOrUpdateWebhookContactRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizHeaders: 'BizHeaders',
            bizParams: 'BizParams',
            body: 'Body',
            method: 'Method',
            recoverBody: 'RecoverBody',
            url: 'Url',
            webhookId: 'WebhookId',
            webhookName: 'WebhookName',
        };
    }
    static types() {
        return {
            bizHeaders: 'string',
            bizParams: 'string',
            body: 'string',
            method: 'string',
            recoverBody: 'string',
            url: 'string',
            webhookId: 'number',
            webhookName: 'string',
        };
    }
}
exports.CreateOrUpdateWebhookContactRequest = CreateOrUpdateWebhookContactRequest;
class CreateOrUpdateWebhookContactResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            webhookContact: 'WebhookContact',
        };
    }
    static types() {
        return {
            requestId: 'string',
            webhookContact: CreateOrUpdateWebhookContactResponseBodyWebhookContact,
        };
    }
}
exports.CreateOrUpdateWebhookContactResponseBody = CreateOrUpdateWebhookContactResponseBody;
class CreateOrUpdateWebhookContactResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateOrUpdateWebhookContactResponseBody,
        };
    }
}
exports.CreateOrUpdateWebhookContactResponse = CreateOrUpdateWebhookContactResponse;
class CreatePrometheusAlertRuleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alertName: 'AlertName',
            annotations: 'Annotations',
            clusterId: 'ClusterId',
            dispatchRuleId: 'DispatchRuleId',
            duration: 'Duration',
            expression: 'Expression',
            labels: 'Labels',
            message: 'Message',
            notifyType: 'NotifyType',
            regionId: 'RegionId',
            type: 'Type',
        };
    }
    static types() {
        return {
            alertName: 'string',
            annotations: 'string',
            clusterId: 'string',
            dispatchRuleId: 'number',
            duration: 'string',
            expression: 'string',
            labels: 'string',
            message: 'string',
            notifyType: 'string',
            regionId: 'string',
            type: 'string',
        };
    }
}
exports.CreatePrometheusAlertRuleRequest = CreatePrometheusAlertRuleRequest;
class CreatePrometheusAlertRuleResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            prometheusAlertRule: 'PrometheusAlertRule',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            prometheusAlertRule: CreatePrometheusAlertRuleResponseBodyPrometheusAlertRule,
            requestId: 'string',
        };
    }
}
exports.CreatePrometheusAlertRuleResponseBody = CreatePrometheusAlertRuleResponseBody;
class CreatePrometheusAlertRuleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreatePrometheusAlertRuleResponseBody,
        };
    }
}
exports.CreatePrometheusAlertRuleResponse = CreatePrometheusAlertRuleResponse;
class CreateRetcodeAppRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            regionId: 'RegionId',
            retcodeAppName: 'RetcodeAppName',
            retcodeAppType: 'RetcodeAppType',
        };
    }
    static types() {
        return {
            regionId: 'string',
            retcodeAppName: 'string',
            retcodeAppType: 'string',
        };
    }
}
exports.CreateRetcodeAppRequest = CreateRetcodeAppRequest;
class CreateRetcodeAppResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            retcodeAppDataBean: 'RetcodeAppDataBean',
        };
    }
    static types() {
        return {
            requestId: 'string',
            retcodeAppDataBean: CreateRetcodeAppResponseBodyRetcodeAppDataBean,
        };
    }
}
exports.CreateRetcodeAppResponseBody = CreateRetcodeAppResponseBody;
class CreateRetcodeAppResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateRetcodeAppResponseBody,
        };
    }
}
exports.CreateRetcodeAppResponse = CreateRetcodeAppResponse;
class CreateSyntheticTaskRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonParam: 'CommonParam',
            download: 'Download',
            extendInterval: 'ExtendInterval',
            intervalTime: 'IntervalTime',
            intervalType: 'IntervalType',
            ipType: 'IpType',
            monitorList: 'MonitorList',
            navigation: 'Navigation',
            net: 'Net',
            protocol: 'Protocol',
            regionId: 'RegionId',
            taskName: 'TaskName',
            taskType: 'TaskType',
            updateTask: 'UpdateTask',
            url: 'Url',
        };
    }
    static types() {
        return {
            commonParam: CreateSyntheticTaskRequestCommonParam,
            download: CreateSyntheticTaskRequestDownload,
            extendInterval: CreateSyntheticTaskRequestExtendInterval,
            intervalTime: 'string',
            intervalType: 'string',
            ipType: 'number',
            monitorList: { 'type': 'array', 'itemType': CreateSyntheticTaskRequestMonitorList },
            navigation: CreateSyntheticTaskRequestNavigation,
            net: CreateSyntheticTaskRequestNet,
            protocol: CreateSyntheticTaskRequestProtocol,
            regionId: 'string',
            taskName: 'string',
            taskType: 'number',
            updateTask: 'boolean',
            url: 'string',
        };
    }
}
exports.CreateSyntheticTaskRequest = CreateSyntheticTaskRequest;
class CreateSyntheticTaskShrinkRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonParamShrink: 'CommonParam',
            downloadShrink: 'Download',
            extendIntervalShrink: 'ExtendInterval',
            intervalTime: 'IntervalTime',
            intervalType: 'IntervalType',
            ipType: 'IpType',
            monitorListShrink: 'MonitorList',
            navigationShrink: 'Navigation',
            netShrink: 'Net',
            protocolShrink: 'Protocol',
            regionId: 'RegionId',
            taskName: 'TaskName',
            taskType: 'TaskType',
            updateTask: 'UpdateTask',
            url: 'Url',
        };
    }
    static types() {
        return {
            commonParamShrink: 'string',
            downloadShrink: 'string',
            extendIntervalShrink: 'string',
            intervalTime: 'string',
            intervalType: 'string',
            ipType: 'number',
            monitorListShrink: 'string',
            navigationShrink: 'string',
            netShrink: 'string',
            protocolShrink: 'string',
            regionId: 'string',
            taskName: 'string',
            taskType: 'number',
            updateTask: 'boolean',
            url: 'string',
        };
    }
}
exports.CreateSyntheticTaskShrinkRequest = CreateSyntheticTaskShrinkRequest;
class CreateSyntheticTaskResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            msg: 'Msg',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: CreateSyntheticTaskResponseBodyData,
            msg: 'string',
            requestId: 'string',
        };
    }
}
exports.CreateSyntheticTaskResponseBody = CreateSyntheticTaskResponseBody;
class CreateSyntheticTaskResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateSyntheticTaskResponseBody,
        };
    }
}
exports.CreateSyntheticTaskResponse = CreateSyntheticTaskResponse;
class CreateWebhookRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            body: 'Body',
            contactName: 'ContactName',
            httpHeaders: 'HttpHeaders',
            httpParams: 'HttpParams',
            method: 'Method',
            recoverBody: 'RecoverBody',
            regionId: 'RegionId',
            url: 'Url',
        };
    }
    static types() {
        return {
            body: 'string',
            contactName: 'string',
            httpHeaders: 'string',
            httpParams: 'string',
            method: 'string',
            recoverBody: 'string',
            regionId: 'string',
            url: 'string',
        };
    }
}
exports.CreateWebhookRequest = CreateWebhookRequest;
class CreateWebhookResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            contactId: 'ContactId',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            contactId: 'string',
            requestId: 'string',
        };
    }
}
exports.CreateWebhookResponseBody = CreateWebhookResponseBody;
class CreateWebhookResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateWebhookResponseBody,
        };
    }
}
exports.CreateWebhookResponse = CreateWebhookResponse;
class DelAuthTokenRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            clusterId: 'string',
            regionId: 'string',
        };
    }
}
exports.DelAuthTokenRequest = DelAuthTokenRequest;
class DelAuthTokenResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.DelAuthTokenResponseBody = DelAuthTokenResponseBody;
class DelAuthTokenResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DelAuthTokenResponseBody,
        };
    }
}
exports.DelAuthTokenResponse = DelAuthTokenResponse;
class DeleteAlertContactRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            contactId: 'ContactId',
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            contactId: 'number',
            regionId: 'string',
        };
    }
}
exports.DeleteAlertContactRequest = DeleteAlertContactRequest;
class DeleteAlertContactResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            isSuccess: 'IsSuccess',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            isSuccess: 'boolean',
            requestId: 'string',
        };
    }
}
exports.DeleteAlertContactResponseBody = DeleteAlertContactResponseBody;
class DeleteAlertContactResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteAlertContactResponseBody,
        };
    }
}
exports.DeleteAlertContactResponse = DeleteAlertContactResponse;
class DeleteAlertContactGroupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            contactGroupId: 'ContactGroupId',
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            contactGroupId: 'number',
            regionId: 'string',
        };
    }
}
exports.DeleteAlertContactGroupRequest = DeleteAlertContactGroupRequest;
class DeleteAlertContactGroupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            isSuccess: 'IsSuccess',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            isSuccess: 'boolean',
            requestId: 'string',
        };
    }
}
exports.DeleteAlertContactGroupResponseBody = DeleteAlertContactGroupResponseBody;
class DeleteAlertContactGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteAlertContactGroupResponseBody,
        };
    }
}
exports.DeleteAlertContactGroupResponse = DeleteAlertContactGroupResponse;
class DeleteAlertRuleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alertId: 'AlertId',
        };
    }
    static types() {
        return {
            alertId: 'number',
        };
    }
}
exports.DeleteAlertRuleRequest = DeleteAlertRuleRequest;
class DeleteAlertRuleResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            isSuccess: 'IsSuccess',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            isSuccess: 'boolean',
            requestId: 'string',
        };
    }
}
exports.DeleteAlertRuleResponseBody = DeleteAlertRuleResponseBody;
class DeleteAlertRuleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteAlertRuleResponseBody,
        };
    }
}
exports.DeleteAlertRuleResponse = DeleteAlertRuleResponse;
class DeleteAlertRulesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alertIds: 'AlertIds',
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            alertIds: 'string',
            regionId: 'string',
        };
    }
}
exports.DeleteAlertRulesRequest = DeleteAlertRulesRequest;
class DeleteAlertRulesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            isSuccess: 'IsSuccess',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            isSuccess: 'boolean',
            requestId: 'string',
        };
    }
}
exports.DeleteAlertRulesResponseBody = DeleteAlertRulesResponseBody;
class DeleteAlertRulesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteAlertRulesResponseBody,
        };
    }
}
exports.DeleteAlertRulesResponse = DeleteAlertRulesResponse;
class DeleteCmsExporterRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            clusterId: 'string',
            regionId: 'string',
        };
    }
}
exports.DeleteCmsExporterRequest = DeleteCmsExporterRequest;
class DeleteCmsExporterResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.DeleteCmsExporterResponseBody = DeleteCmsExporterResponseBody;
class DeleteCmsExporterResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteCmsExporterResponseBody,
        };
    }
}
exports.DeleteCmsExporterResponse = DeleteCmsExporterResponse;
class DeleteContactRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            contactId: 'ContactId',
        };
    }
    static types() {
        return {
            contactId: 'number',
        };
    }
}
exports.DeleteContactRequest = DeleteContactRequest;
class DeleteContactResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            isSuccess: 'IsSuccess',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            isSuccess: 'boolean',
            requestId: 'string',
        };
    }
}
exports.DeleteContactResponseBody = DeleteContactResponseBody;
class DeleteContactResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteContactResponseBody,
        };
    }
}
exports.DeleteContactResponse = DeleteContactResponse;
class DeleteContactGroupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            contactGroupId: 'ContactGroupId',
        };
    }
    static types() {
        return {
            contactGroupId: 'number',
        };
    }
}
exports.DeleteContactGroupRequest = DeleteContactGroupRequest;
class DeleteContactGroupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            isSuccess: 'IsSuccess',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            isSuccess: 'boolean',
            requestId: 'string',
        };
    }
}
exports.DeleteContactGroupResponseBody = DeleteContactGroupResponseBody;
class DeleteContactGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteContactGroupResponseBody,
        };
    }
}
exports.DeleteContactGroupResponse = DeleteContactGroupResponse;
class DeleteDispatchRuleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'Id',
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            id: 'string',
            regionId: 'string',
        };
    }
}
exports.DeleteDispatchRuleRequest = DeleteDispatchRuleRequest;
class DeleteDispatchRuleResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.DeleteDispatchRuleResponseBody = DeleteDispatchRuleResponseBody;
class DeleteDispatchRuleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteDispatchRuleResponseBody,
        };
    }
}
exports.DeleteDispatchRuleResponse = DeleteDispatchRuleResponse;
class DeleteEventBridgeIntegrationRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'Id',
        };
    }
    static types() {
        return {
            id: 'number',
        };
    }
}
exports.DeleteEventBridgeIntegrationRequest = DeleteEventBridgeIntegrationRequest;
class DeleteEventBridgeIntegrationResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            isSuccess: 'IsSuccess',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            isSuccess: 'boolean',
            requestId: 'string',
        };
    }
}
exports.DeleteEventBridgeIntegrationResponseBody = DeleteEventBridgeIntegrationResponseBody;
class DeleteEventBridgeIntegrationResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteEventBridgeIntegrationResponseBody,
        };
    }
}
exports.DeleteEventBridgeIntegrationResponse = DeleteEventBridgeIntegrationResponse;
class DeleteGrafanaResourceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
            clusterName: 'ClusterName',
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            clusterId: 'string',
            clusterName: 'string',
            regionId: 'string',
        };
    }
}
exports.DeleteGrafanaResourceRequest = DeleteGrafanaResourceRequest;
class DeleteGrafanaResourceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.DeleteGrafanaResourceResponseBody = DeleteGrafanaResourceResponseBody;
class DeleteGrafanaResourceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteGrafanaResourceResponseBody,
        };
    }
}
exports.DeleteGrafanaResourceResponse = DeleteGrafanaResourceResponse;
class DeleteIMRobotRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            robotId: 'RobotId',
        };
    }
    static types() {
        return {
            robotId: 'number',
        };
    }
}
exports.DeleteIMRobotRequest = DeleteIMRobotRequest;
class DeleteIMRobotResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            isSuccess: 'IsSuccess',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            isSuccess: 'boolean',
            requestId: 'string',
        };
    }
}
exports.DeleteIMRobotResponseBody = DeleteIMRobotResponseBody;
class DeleteIMRobotResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteIMRobotResponseBody,
        };
    }
}
exports.DeleteIMRobotResponse = DeleteIMRobotResponse;
class DeleteIntegrationRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
            integration: 'Integration',
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            clusterId: 'string',
            integration: 'string',
            regionId: 'string',
        };
    }
}
exports.DeleteIntegrationRequest = DeleteIntegrationRequest;
class DeleteIntegrationResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.DeleteIntegrationResponseBody = DeleteIntegrationResponseBody;
class DeleteIntegrationResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteIntegrationResponseBody,
        };
    }
}
exports.DeleteIntegrationResponse = DeleteIntegrationResponse;
class DeleteIntegrationsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            integrationId: 'IntegrationId',
        };
    }
    static types() {
        return {
            integrationId: 'number',
        };
    }
}
exports.DeleteIntegrationsRequest = DeleteIntegrationsRequest;
class DeleteIntegrationsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            isSuccess: 'IsSuccess',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            isSuccess: 'boolean',
            requestId: 'string',
        };
    }
}
exports.DeleteIntegrationsResponseBody = DeleteIntegrationsResponseBody;
class DeleteIntegrationsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteIntegrationsResponseBody,
        };
    }
}
exports.DeleteIntegrationsResponse = DeleteIntegrationsResponse;
class DeleteNotificationPolicyRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'Id',
        };
    }
    static types() {
        return {
            id: 'number',
        };
    }
}
exports.DeleteNotificationPolicyRequest = DeleteNotificationPolicyRequest;
class DeleteNotificationPolicyResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            isSuccess: 'IsSuccess',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            isSuccess: 'boolean',
            requestId: 'string',
        };
    }
}
exports.DeleteNotificationPolicyResponseBody = DeleteNotificationPolicyResponseBody;
class DeleteNotificationPolicyResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteNotificationPolicyResponseBody,
        };
    }
}
exports.DeleteNotificationPolicyResponse = DeleteNotificationPolicyResponse;
class DeletePrometheusAlertRuleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alertId: 'AlertId',
        };
    }
    static types() {
        return {
            alertId: 'number',
        };
    }
}
exports.DeletePrometheusAlertRuleRequest = DeletePrometheusAlertRuleRequest;
class DeletePrometheusAlertRuleResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.DeletePrometheusAlertRuleResponseBody = DeletePrometheusAlertRuleResponseBody;
class DeletePrometheusAlertRuleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeletePrometheusAlertRuleResponseBody,
        };
    }
}
exports.DeletePrometheusAlertRuleResponse = DeletePrometheusAlertRuleResponse;
class DeletePrometheusGlobalViewRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            globalViewClusterId: 'GlobalViewClusterId',
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            globalViewClusterId: 'string',
            regionId: 'string',
        };
    }
}
exports.DeletePrometheusGlobalViewRequest = DeletePrometheusGlobalViewRequest;
class DeletePrometheusGlobalViewResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.DeletePrometheusGlobalViewResponseBody = DeletePrometheusGlobalViewResponseBody;
class DeletePrometheusGlobalViewResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeletePrometheusGlobalViewResponseBody,
        };
    }
}
exports.DeletePrometheusGlobalViewResponse = DeletePrometheusGlobalViewResponse;
class DeleteRetcodeAppRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            appId: 'string',
            regionId: 'string',
        };
    }
}
exports.DeleteRetcodeAppRequest = DeleteRetcodeAppRequest;
class DeleteRetcodeAppResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.DeleteRetcodeAppResponseBody = DeleteRetcodeAppResponseBody;
class DeleteRetcodeAppResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteRetcodeAppResponseBody,
        };
    }
}
exports.DeleteRetcodeAppResponse = DeleteRetcodeAppResponse;
class DeleteScenarioRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            regionId: 'RegionId',
            scenarioId: 'ScenarioId',
        };
    }
    static types() {
        return {
            regionId: 'string',
            scenarioId: 'number',
        };
    }
}
exports.DeleteScenarioRequest = DeleteScenarioRequest;
class DeleteScenarioResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            result: 'Result',
        };
    }
    static types() {
        return {
            requestId: 'string',
            result: 'boolean',
        };
    }
}
exports.DeleteScenarioResponseBody = DeleteScenarioResponseBody;
class DeleteScenarioResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteScenarioResponseBody,
        };
    }
}
exports.DeleteScenarioResponse = DeleteScenarioResponse;
class DeleteSilencePolicyRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'Id',
        };
    }
    static types() {
        return {
            id: 'number',
        };
    }
}
exports.DeleteSilencePolicyRequest = DeleteSilencePolicyRequest;
class DeleteSilencePolicyResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            isSuccess: 'IsSuccess',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            isSuccess: 'boolean',
            requestId: 'string',
        };
    }
}
exports.DeleteSilencePolicyResponseBody = DeleteSilencePolicyResponseBody;
class DeleteSilencePolicyResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteSilencePolicyResponseBody,
        };
    }
}
exports.DeleteSilencePolicyResponse = DeleteSilencePolicyResponse;
class DeleteSourceMapRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            fidList: 'FidList',
            pid: 'Pid',
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            fidList: { 'type': 'array', 'itemType': 'string' },
            pid: 'string',
            regionId: 'string',
        };
    }
}
exports.DeleteSourceMapRequest = DeleteSourceMapRequest;
class DeleteSourceMapShrinkRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            fidListShrink: 'FidList',
            pid: 'Pid',
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            fidListShrink: 'string',
            pid: 'string',
            regionId: 'string',
        };
    }
}
exports.DeleteSourceMapShrinkRequest = DeleteSourceMapShrinkRequest;
class DeleteSourceMapResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.DeleteSourceMapResponseBody = DeleteSourceMapResponseBody;
class DeleteSourceMapResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteSourceMapResponseBody,
        };
    }
}
exports.DeleteSourceMapResponse = DeleteSourceMapResponse;
class DeleteSyntheticTaskRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            regionId: 'RegionId',
            taskIds: 'TaskIds',
        };
    }
    static types() {
        return {
            regionId: 'string',
            taskIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.DeleteSyntheticTaskRequest = DeleteSyntheticTaskRequest;
class DeleteSyntheticTaskResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            result: 'Result',
        };
    }
    static types() {
        return {
            requestId: 'string',
            result: 'string',
        };
    }
}
exports.DeleteSyntheticTaskResponseBody = DeleteSyntheticTaskResponseBody;
class DeleteSyntheticTaskResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteSyntheticTaskResponseBody,
        };
    }
}
exports.DeleteSyntheticTaskResponse = DeleteSyntheticTaskResponse;
class DeleteTraceAppRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            pid: 'Pid',
            regionId: 'RegionId',
            type: 'Type',
        };
    }
    static types() {
        return {
            appId: 'string',
            pid: 'string',
            regionId: 'string',
            type: 'string',
        };
    }
}
exports.DeleteTraceAppRequest = DeleteTraceAppRequest;
class DeleteTraceAppResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.DeleteTraceAppResponseBody = DeleteTraceAppResponseBody;
class DeleteTraceAppResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteTraceAppResponseBody,
        };
    }
}
exports.DeleteTraceAppResponse = DeleteTraceAppResponse;
class DeleteWebhookContactRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            webhookId: 'WebhookId',
        };
    }
    static types() {
        return {
            webhookId: 'number',
        };
    }
}
exports.DeleteWebhookContactRequest = DeleteWebhookContactRequest;
class DeleteWebhookContactResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            isSuccess: 'IsSuccess',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            isSuccess: 'boolean',
            requestId: 'string',
        };
    }
}
exports.DeleteWebhookContactResponseBody = DeleteWebhookContactResponseBody;
class DeleteWebhookContactResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteWebhookContactResponseBody,
        };
    }
}
exports.DeleteWebhookContactResponse = DeleteWebhookContactResponse;
class DescribeContactGroupsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            contactGroupName: 'ContactGroupName',
            isDetail: 'IsDetail',
            page: 'Page',
            size: 'Size',
        };
    }
    static types() {
        return {
            contactGroupName: 'string',
            isDetail: 'boolean',
            page: 'number',
            size: 'number',
        };
    }
}
exports.DescribeContactGroupsRequest = DescribeContactGroupsRequest;
class DescribeContactGroupsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageBean: 'PageBean',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            pageBean: DescribeContactGroupsResponseBodyPageBean,
            requestId: 'string',
        };
    }
}
exports.DescribeContactGroupsResponseBody = DescribeContactGroupsResponseBody;
class DescribeContactGroupsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DescribeContactGroupsResponseBody,
        };
    }
}
exports.DescribeContactGroupsResponse = DescribeContactGroupsResponse;
class DescribeContactsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            contactName: 'ContactName',
            email: 'Email',
            page: 'Page',
            phone: 'Phone',
            size: 'Size',
        };
    }
    static types() {
        return {
            contactName: 'string',
            email: 'string',
            page: 'number',
            phone: 'string',
            size: 'number',
        };
    }
}
exports.DescribeContactsRequest = DescribeContactsRequest;
class DescribeContactsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageBean: 'PageBean',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            pageBean: DescribeContactsResponseBodyPageBean,
            requestId: 'string',
        };
    }
}
exports.DescribeContactsResponseBody = DescribeContactsResponseBody;
class DescribeContactsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DescribeContactsResponseBody,
        };
    }
}
exports.DescribeContactsResponse = DescribeContactsResponse;
class DescribeDispatchRuleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'Id',
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            id: 'string',
            regionId: 'string',
        };
    }
}
exports.DescribeDispatchRuleRequest = DescribeDispatchRuleRequest;
class DescribeDispatchRuleResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dispatchRule: 'DispatchRule',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            dispatchRule: DescribeDispatchRuleResponseBodyDispatchRule,
            requestId: 'string',
        };
    }
}
exports.DescribeDispatchRuleResponseBody = DescribeDispatchRuleResponseBody;
class DescribeDispatchRuleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DescribeDispatchRuleResponseBody,
        };
    }
}
exports.DescribeDispatchRuleResponse = DescribeDispatchRuleResponse;
class DescribeIMRobotsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            page: 'Page',
            robotName: 'RobotName',
            size: 'Size',
        };
    }
    static types() {
        return {
            page: 'number',
            robotName: 'string',
            size: 'number',
        };
    }
}
exports.DescribeIMRobotsRequest = DescribeIMRobotsRequest;
class DescribeIMRobotsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageBean: 'PageBean',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            pageBean: DescribeIMRobotsResponseBodyPageBean,
            requestId: 'string',
        };
    }
}
exports.DescribeIMRobotsResponseBody = DescribeIMRobotsResponseBody;
class DescribeIMRobotsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DescribeIMRobotsResponseBody,
        };
    }
}
exports.DescribeIMRobotsResponse = DescribeIMRobotsResponse;
class DescribePrometheusAlertRuleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alertId: 'AlertId',
        };
    }
    static types() {
        return {
            alertId: 'number',
        };
    }
}
exports.DescribePrometheusAlertRuleRequest = DescribePrometheusAlertRuleRequest;
class DescribePrometheusAlertRuleResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            prometheusAlertRule: 'PrometheusAlertRule',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            prometheusAlertRule: DescribePrometheusAlertRuleResponseBodyPrometheusAlertRule,
            requestId: 'string',
        };
    }
}
exports.DescribePrometheusAlertRuleResponseBody = DescribePrometheusAlertRuleResponseBody;
class DescribePrometheusAlertRuleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DescribePrometheusAlertRuleResponseBody,
        };
    }
}
exports.DescribePrometheusAlertRuleResponse = DescribePrometheusAlertRuleResponse;
class DescribeTraceLicenseKeyRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            regionId: 'string',
        };
    }
}
exports.DescribeTraceLicenseKeyRequest = DescribeTraceLicenseKeyRequest;
class DescribeTraceLicenseKeyResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            licenseKey: 'LicenseKey',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            licenseKey: 'string',
            requestId: 'string',
        };
    }
}
exports.DescribeTraceLicenseKeyResponseBody = DescribeTraceLicenseKeyResponseBody;
class DescribeTraceLicenseKeyResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DescribeTraceLicenseKeyResponseBody,
        };
    }
}
exports.DescribeTraceLicenseKeyResponse = DescribeTraceLicenseKeyResponse;
class DescribeWebhookContactsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            page: 'Page',
            size: 'Size',
            webhookName: 'WebhookName',
        };
    }
    static types() {
        return {
            page: 'number',
            size: 'number',
            webhookName: 'string',
        };
    }
}
exports.DescribeWebhookContactsRequest = DescribeWebhookContactsRequest;
class DescribeWebhookContactsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageBean: 'PageBean',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            pageBean: DescribeWebhookContactsResponseBodyPageBean,
            requestId: 'string',
        };
    }
}
exports.DescribeWebhookContactsResponseBody = DescribeWebhookContactsResponseBody;
class DescribeWebhookContactsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DescribeWebhookContactsResponseBody,
        };
    }
}
exports.DescribeWebhookContactsResponse = DescribeWebhookContactsResponse;
class GetAgentDownloadUrlRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            regionId: 'string',
        };
    }
}
exports.GetAgentDownloadUrlRequest = GetAgentDownloadUrlRequest;
class GetAgentDownloadUrlResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            armsAgentDownloadUrl: 'ArmsAgentDownloadUrl',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            armsAgentDownloadUrl: 'string',
            requestId: 'string',
        };
    }
}
exports.GetAgentDownloadUrlResponseBody = GetAgentDownloadUrlResponseBody;
class GetAgentDownloadUrlResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetAgentDownloadUrlResponseBody,
        };
    }
}
exports.GetAgentDownloadUrlResponse = GetAgentDownloadUrlResponse;
class GetAlertRulesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alertIds: 'AlertIds',
            alertNames: 'AlertNames',
            alertStatus: 'AlertStatus',
            alertType: 'AlertType',
            clusterId: 'ClusterId',
            page: 'Page',
            productCode: 'ProductCode',
            regionId: 'RegionId',
            size: 'Size',
        };
    }
    static types() {
        return {
            alertIds: 'string',
            alertNames: 'string',
            alertStatus: 'string',
            alertType: 'string',
            clusterId: 'string',
            page: 'number',
            productCode: 'string',
            regionId: 'string',
            size: 'number',
        };
    }
}
exports.GetAlertRulesRequest = GetAlertRulesRequest;
class GetAlertRulesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageBean: 'PageBean',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            pageBean: GetAlertRulesResponseBodyPageBean,
            requestId: 'string',
        };
    }
}
exports.GetAlertRulesResponseBody = GetAlertRulesResponseBody;
class GetAlertRulesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetAlertRulesResponseBody,
        };
    }
}
exports.GetAlertRulesResponse = GetAlertRulesResponse;
class GetAppApiByPageRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentPage: 'CurrentPage',
            endTime: 'EndTime',
            intervalMills: 'IntervalMills',
            PId: 'PId',
            pageSize: 'PageSize',
            regionId: 'RegionId',
            startTime: 'StartTime',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            endTime: 'number',
            intervalMills: 'number',
            PId: 'string',
            pageSize: 'number',
            regionId: 'string',
            startTime: 'number',
        };
    }
}
exports.GetAppApiByPageRequest = GetAppApiByPageRequest;
class GetAppApiByPageResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'number',
            data: GetAppApiByPageResponseBodyData,
            message: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.GetAppApiByPageResponseBody = GetAppApiByPageResponseBody;
class GetAppApiByPageResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetAppApiByPageResponseBody,
        };
    }
}
exports.GetAppApiByPageResponse = GetAppApiByPageResponse;
class GetAuthTokenRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            clusterId: 'string',
            regionId: 'string',
        };
    }
}
exports.GetAuthTokenRequest = GetAuthTokenRequest;
class GetAuthTokenResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.GetAuthTokenResponseBody = GetAuthTokenResponseBody;
class GetAuthTokenResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetAuthTokenResponseBody,
        };
    }
}
exports.GetAuthTokenResponse = GetAuthTokenResponse;
class GetClusterAllUrlRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            clusterId: 'string',
            regionId: 'string',
        };
    }
}
exports.GetClusterAllUrlRequest = GetClusterAllUrlRequest;
class GetClusterAllUrlResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.GetClusterAllUrlResponseBody = GetClusterAllUrlResponseBody;
class GetClusterAllUrlResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetClusterAllUrlResponseBody,
        };
    }
}
exports.GetClusterAllUrlResponse = GetClusterAllUrlResponse;
class GetExploreUrlRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
            expression: 'Expression',
            regionId: 'RegionId',
            type: 'Type',
        };
    }
    static types() {
        return {
            clusterId: 'string',
            expression: 'string',
            regionId: 'string',
            type: 'string',
        };
    }
}
exports.GetExploreUrlRequest = GetExploreUrlRequest;
class GetExploreUrlResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.GetExploreUrlResponseBody = GetExploreUrlResponseBody;
class GetExploreUrlResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetExploreUrlResponseBody,
        };
    }
}
exports.GetExploreUrlResponse = GetExploreUrlResponse;
class GetIntegrationStateRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
            integration: 'Integration',
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            clusterId: 'string',
            integration: 'string',
            regionId: 'string',
        };
    }
}
exports.GetIntegrationStateRequest = GetIntegrationStateRequest;
class GetIntegrationStateResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            state: 'State',
        };
    }
    static types() {
        return {
            requestId: 'string',
            state: 'boolean',
        };
    }
}
exports.GetIntegrationStateResponseBody = GetIntegrationStateResponseBody;
class GetIntegrationStateResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetIntegrationStateResponseBody,
        };
    }
}
exports.GetIntegrationStateResponse = GetIntegrationStateResponse;
class GetManagedPrometheusStatusRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
            clusterType: 'ClusterType',
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            clusterId: 'string',
            clusterType: 'string',
            regionId: 'string',
        };
    }
}
exports.GetManagedPrometheusStatusRequest = GetManagedPrometheusStatusRequest;
class GetManagedPrometheusStatusResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'number',
            data: 'string',
            message: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.GetManagedPrometheusStatusResponseBody = GetManagedPrometheusStatusResponseBody;
class GetManagedPrometheusStatusResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetManagedPrometheusStatusResponseBody,
        };
    }
}
exports.GetManagedPrometheusStatusResponse = GetManagedPrometheusStatusResponse;
class GetMultipleTraceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            regionId: 'RegionId',
            traceIDs: 'TraceIDs',
        };
    }
    static types() {
        return {
            regionId: 'string',
            traceIDs: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.GetMultipleTraceRequest = GetMultipleTraceRequest;
class GetMultipleTraceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            multiCallChainInfos: 'MultiCallChainInfos',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            multiCallChainInfos: { 'type': 'array', 'itemType': GetMultipleTraceResponseBodyMultiCallChainInfos },
            requestId: 'string',
        };
    }
}
exports.GetMultipleTraceResponseBody = GetMultipleTraceResponseBody;
class GetMultipleTraceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetMultipleTraceResponseBody,
        };
    }
}
exports.GetMultipleTraceResponse = GetMultipleTraceResponse;
class GetOnCallSchedulesDetailRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            endTime: 'EndTime',
            id: 'Id',
            startTime: 'StartTime',
        };
    }
    static types() {
        return {
            endTime: 'string',
            id: 'number',
            startTime: 'string',
        };
    }
}
exports.GetOnCallSchedulesDetailRequest = GetOnCallSchedulesDetailRequest;
class GetOnCallSchedulesDetailResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: GetOnCallSchedulesDetailResponseBodyData,
            requestId: 'string',
        };
    }
}
exports.GetOnCallSchedulesDetailResponseBody = GetOnCallSchedulesDetailResponseBody;
class GetOnCallSchedulesDetailResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetOnCallSchedulesDetailResponseBody,
        };
    }
}
exports.GetOnCallSchedulesDetailResponse = GetOnCallSchedulesDetailResponse;
class GetPrometheusApiTokenRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            regionId: 'string',
        };
    }
}
exports.GetPrometheusApiTokenRequest = GetPrometheusApiTokenRequest;
class GetPrometheusApiTokenResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            token: 'Token',
        };
    }
    static types() {
        return {
            requestId: 'string',
            token: 'string',
        };
    }
}
exports.GetPrometheusApiTokenResponseBody = GetPrometheusApiTokenResponseBody;
class GetPrometheusApiTokenResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetPrometheusApiTokenResponseBody,
        };
    }
}
exports.GetPrometheusApiTokenResponse = GetPrometheusApiTokenResponse;
class GetPrometheusGlobalViewRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            globalViewClusterId: 'GlobalViewClusterId',
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            globalViewClusterId: 'string',
            regionId: 'string',
        };
    }
}
exports.GetPrometheusGlobalViewRequest = GetPrometheusGlobalViewRequest;
class GetPrometheusGlobalViewResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.GetPrometheusGlobalViewResponseBody = GetPrometheusGlobalViewResponseBody;
class GetPrometheusGlobalViewResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetPrometheusGlobalViewResponseBody,
        };
    }
}
exports.GetPrometheusGlobalViewResponse = GetPrometheusGlobalViewResponse;
class GetRecordingRuleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            clusterId: 'string',
            regionId: 'string',
        };
    }
}
exports.GetRecordingRuleRequest = GetRecordingRuleRequest;
class GetRecordingRuleResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.GetRecordingRuleResponseBody = GetRecordingRuleResponseBody;
class GetRecordingRuleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetRecordingRuleResponseBody,
        };
    }
}
exports.GetRecordingRuleResponse = GetRecordingRuleResponse;
class GetRetcodeShareUrlRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pid: 'Pid',
        };
    }
    static types() {
        return {
            pid: 'string',
        };
    }
}
exports.GetRetcodeShareUrlRequest = GetRetcodeShareUrlRequest;
class GetRetcodeShareUrlResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            url: 'Url',
        };
    }
    static types() {
        return {
            requestId: 'string',
            url: 'string',
        };
    }
}
exports.GetRetcodeShareUrlResponseBody = GetRetcodeShareUrlResponseBody;
class GetRetcodeShareUrlResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetRetcodeShareUrlResponseBody,
        };
    }
}
exports.GetRetcodeShareUrlResponse = GetRetcodeShareUrlResponse;
class GetSourceMapInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            ascendingSequence: 'AscendingSequence',
            edition: 'Edition',
            ID: 'ID',
            keyword: 'Keyword',
            orderField: 'OrderField',
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            ascendingSequence: 'boolean',
            edition: 'string',
            ID: 'string',
            keyword: 'string',
            orderField: 'string',
            regionId: 'string',
        };
    }
}
exports.GetSourceMapInfoRequest = GetSourceMapInfoRequest;
class GetSourceMapInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            sourceMapList: 'SourceMapList',
        };
    }
    static types() {
        return {
            requestId: 'string',
            sourceMapList: { 'type': 'array', 'itemType': GetSourceMapInfoResponseBodySourceMapList },
        };
    }
}
exports.GetSourceMapInfoResponseBody = GetSourceMapInfoResponseBody;
class GetSourceMapInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetSourceMapInfoResponseBody,
        };
    }
}
exports.GetSourceMapInfoResponse = GetSourceMapInfoResponse;
class GetStackRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            endTime: 'EndTime',
            pid: 'Pid',
            regionId: 'RegionId',
            rpcID: 'RpcID',
            startTime: 'StartTime',
            traceID: 'TraceID',
        };
    }
    static types() {
        return {
            endTime: 'number',
            pid: 'string',
            regionId: 'string',
            rpcID: 'string',
            startTime: 'number',
            traceID: 'string',
        };
    }
}
exports.GetStackRequest = GetStackRequest;
class GetStackResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            stackInfo: 'StackInfo',
        };
    }
    static types() {
        return {
            requestId: 'string',
            stackInfo: { 'type': 'array', 'itemType': GetStackResponseBodyStackInfo },
        };
    }
}
exports.GetStackResponseBody = GetStackResponseBody;
class GetStackResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetStackResponseBody,
        };
    }
}
exports.GetStackResponse = GetStackResponse;
class GetSyntheticTaskDetailRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            regionId: 'RegionId',
            taskId: 'TaskId',
        };
    }
    static types() {
        return {
            regionId: 'string',
            taskId: 'string',
        };
    }
}
exports.GetSyntheticTaskDetailRequest = GetSyntheticTaskDetailRequest;
class GetSyntheticTaskDetailResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            taskDetail: 'TaskDetail',
        };
    }
    static types() {
        return {
            requestId: 'string',
            taskDetail: GetSyntheticTaskDetailResponseBodyTaskDetail,
        };
    }
}
exports.GetSyntheticTaskDetailResponseBody = GetSyntheticTaskDetailResponseBody;
class GetSyntheticTaskDetailResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetSyntheticTaskDetailResponseBody,
        };
    }
}
exports.GetSyntheticTaskDetailResponse = GetSyntheticTaskDetailResponse;
class GetSyntheticTaskListRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            direction: 'Direction',
            order: 'Order',
            pageNum: 'PageNum',
            pageSize: 'PageSize',
            regionId: 'RegionId',
            taskName: 'TaskName',
            taskStatus: 'TaskStatus',
            taskType: 'TaskType',
            url: 'Url',
        };
    }
    static types() {
        return {
            direction: 'string',
            order: 'string',
            pageNum: 'number',
            pageSize: 'number',
            regionId: 'string',
            taskName: 'string',
            taskStatus: 'string',
            taskType: 'string',
            url: 'string',
        };
    }
}
exports.GetSyntheticTaskListRequest = GetSyntheticTaskListRequest;
class GetSyntheticTaskListResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageInfo: 'PageInfo',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            pageInfo: GetSyntheticTaskListResponseBodyPageInfo,
            requestId: 'string',
        };
    }
}
exports.GetSyntheticTaskListResponseBody = GetSyntheticTaskListResponseBody;
class GetSyntheticTaskListResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetSyntheticTaskListResponseBody,
        };
    }
}
exports.GetSyntheticTaskListResponse = GetSyntheticTaskListResponse;
class GetSyntheticTaskMonitorsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            regionId: 'string',
        };
    }
}
exports.GetSyntheticTaskMonitorsRequest = GetSyntheticTaskMonitorsRequest;
class GetSyntheticTaskMonitorsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            msg: 'Msg',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: { 'type': 'array', 'itemType': GetSyntheticTaskMonitorsResponseBodyData },
            msg: 'string',
            requestId: 'string',
        };
    }
}
exports.GetSyntheticTaskMonitorsResponseBody = GetSyntheticTaskMonitorsResponseBody;
class GetSyntheticTaskMonitorsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetSyntheticTaskMonitorsResponseBody,
        };
    }
}
exports.GetSyntheticTaskMonitorsResponse = GetSyntheticTaskMonitorsResponse;
class GetTraceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            endTime: 'EndTime',
            regionId: 'RegionId',
            startTime: 'StartTime',
            traceID: 'TraceID',
        };
    }
    static types() {
        return {
            endTime: 'number',
            regionId: 'string',
            startTime: 'number',
            traceID: 'string',
        };
    }
}
exports.GetTraceRequest = GetTraceRequest;
class GetTraceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            spans: 'Spans',
        };
    }
    static types() {
        return {
            requestId: 'string',
            spans: { 'type': 'array', 'itemType': GetTraceResponseBodySpans },
        };
    }
}
exports.GetTraceResponseBody = GetTraceResponseBody;
class GetTraceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetTraceResponseBody,
        };
    }
}
exports.GetTraceResponse = GetTraceResponse;
class GetTraceAppRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pid: 'Pid',
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            pid: 'string',
            regionId: 'string',
        };
    }
}
exports.GetTraceAppRequest = GetTraceAppRequest;
class GetTraceAppResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            traceApp: 'TraceApp',
        };
    }
    static types() {
        return {
            requestId: 'string',
            traceApp: GetTraceAppResponseBodyTraceApp,
        };
    }
}
exports.GetTraceAppResponseBody = GetTraceAppResponseBody;
class GetTraceAppResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetTraceAppResponseBody,
        };
    }
}
exports.GetTraceAppResponse = GetTraceAppResponse;
class ImportAppAlertRulesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            contactGroupIds: 'ContactGroupIds',
            isAutoStart: 'IsAutoStart',
            pids: 'Pids',
            regionId: 'RegionId',
            templageAlertConfig: 'TemplageAlertConfig',
            templateAlertId: 'TemplateAlertId',
        };
    }
    static types() {
        return {
            contactGroupIds: 'string',
            isAutoStart: 'boolean',
            pids: 'string',
            regionId: 'string',
            templageAlertConfig: 'string',
            templateAlertId: 'string',
        };
    }
}
exports.ImportAppAlertRulesRequest = ImportAppAlertRulesRequest;
class ImportAppAlertRulesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.ImportAppAlertRulesResponseBody = ImportAppAlertRulesResponseBody;
class ImportAppAlertRulesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ImportAppAlertRulesResponseBody,
        };
    }
}
exports.ImportAppAlertRulesResponse = ImportAppAlertRulesResponse;
class InstallCmsExporterRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
            cmsArgs: 'CmsArgs',
            directArgs: 'DirectArgs',
            enableTag: 'EnableTag',
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            clusterId: 'string',
            cmsArgs: 'string',
            directArgs: 'string',
            enableTag: 'boolean',
            regionId: 'string',
        };
    }
}
exports.InstallCmsExporterRequest = InstallCmsExporterRequest;
class InstallCmsExporterResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.InstallCmsExporterResponseBody = InstallCmsExporterResponseBody;
class InstallCmsExporterResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: InstallCmsExporterResponseBody,
        };
    }
}
exports.InstallCmsExporterResponse = InstallCmsExporterResponse;
class InstallManagedPrometheusRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
            clusterType: 'ClusterType',
            kubeConfig: 'KubeConfig',
            regionId: 'RegionId',
            securityGroupId: 'SecurityGroupId',
            vSwitchId: 'VSwitchId',
            vpcId: 'VpcId',
        };
    }
    static types() {
        return {
            clusterId: 'string',
            clusterType: 'string',
            kubeConfig: 'string',
            regionId: 'string',
            securityGroupId: 'string',
            vSwitchId: 'string',
            vpcId: 'string',
        };
    }
}
exports.InstallManagedPrometheusRequest = InstallManagedPrometheusRequest;
class InstallManagedPrometheusResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'number',
            data: 'string',
            message: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.InstallManagedPrometheusResponseBody = InstallManagedPrometheusResponseBody;
class InstallManagedPrometheusResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: InstallManagedPrometheusResponseBody,
        };
    }
}
exports.InstallManagedPrometheusResponse = InstallManagedPrometheusResponse;
class ListActivatedAlertsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentPage: 'CurrentPage',
            filter: 'Filter',
            pageSize: 'PageSize',
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            filter: 'string',
            pageSize: 'number',
            regionId: 'string',
        };
    }
}
exports.ListActivatedAlertsRequest = ListActivatedAlertsRequest;
class ListActivatedAlertsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            page: 'Page',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            page: ListActivatedAlertsResponseBodyPage,
            requestId: 'string',
        };
    }
}
exports.ListActivatedAlertsResponseBody = ListActivatedAlertsResponseBody;
class ListActivatedAlertsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListActivatedAlertsResponseBody,
        };
    }
}
exports.ListActivatedAlertsResponse = ListActivatedAlertsResponse;
class ListAlertEventsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alertName: 'AlertName',
            endTime: 'EndTime',
            matchingConditions: 'MatchingConditions',
            page: 'Page',
            size: 'Size',
            startTime: 'StartTime',
            status: 'Status',
        };
    }
    static types() {
        return {
            alertName: 'string',
            endTime: 'string',
            matchingConditions: 'string',
            page: 'number',
            size: 'number',
            startTime: 'string',
            status: 'string',
        };
    }
}
exports.ListAlertEventsRequest = ListAlertEventsRequest;
class ListAlertEventsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageBean: 'PageBean',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            pageBean: ListAlertEventsResponseBodyPageBean,
            requestId: 'string',
        };
    }
}
exports.ListAlertEventsResponseBody = ListAlertEventsResponseBody;
class ListAlertEventsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListAlertEventsResponseBody,
        };
    }
}
exports.ListAlertEventsResponse = ListAlertEventsResponse;
class ListAlertsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alertName: 'AlertName',
            dispatchRuleId: 'DispatchRuleId',
            endTime: 'EndTime',
            integrationType: 'IntegrationType',
            page: 'Page',
            severity: 'Severity',
            showActivities: 'ShowActivities',
            showEvents: 'ShowEvents',
            size: 'Size',
            startTime: 'StartTime',
            state: 'State',
        };
    }
    static types() {
        return {
            alertName: 'string',
            dispatchRuleId: 'number',
            endTime: 'string',
            integrationType: 'string',
            page: 'number',
            severity: 'string',
            showActivities: 'boolean',
            showEvents: 'boolean',
            size: 'number',
            startTime: 'string',
            state: 'number',
        };
    }
}
exports.ListAlertsRequest = ListAlertsRequest;
class ListAlertsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageBean: 'PageBean',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            pageBean: ListAlertsResponseBodyPageBean,
            requestId: 'string',
        };
    }
}
exports.ListAlertsResponseBody = ListAlertsResponseBody;
class ListAlertsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListAlertsResponseBody,
        };
    }
}
exports.ListAlertsResponse = ListAlertsResponse;
class ListClusterFromGrafanaRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            regionId: 'string',
        };
    }
}
exports.ListClusterFromGrafanaRequest = ListClusterFromGrafanaRequest;
class ListClusterFromGrafanaResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            promClusterList: 'PromClusterList',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            promClusterList: { 'type': 'array', 'itemType': ListClusterFromGrafanaResponseBodyPromClusterList },
            requestId: 'string',
        };
    }
}
exports.ListClusterFromGrafanaResponseBody = ListClusterFromGrafanaResponseBody;
class ListClusterFromGrafanaResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListClusterFromGrafanaResponseBody,
        };
    }
}
exports.ListClusterFromGrafanaResponse = ListClusterFromGrafanaResponse;
class ListCmsInstancesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
            regionId: 'RegionId',
            typeFilter: 'TypeFilter',
        };
    }
    static types() {
        return {
            clusterId: 'string',
            regionId: 'string',
            typeFilter: 'string',
        };
    }
}
exports.ListCmsInstancesRequest = ListCmsInstancesRequest;
class ListCmsInstancesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: ListCmsInstancesResponseBodyData,
            requestId: 'string',
        };
    }
}
exports.ListCmsInstancesResponseBody = ListCmsInstancesResponseBody;
class ListCmsInstancesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListCmsInstancesResponseBody,
        };
    }
}
exports.ListCmsInstancesResponse = ListCmsInstancesResponse;
class ListDashboardsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
            clusterType: 'ClusterType',
            dashboardName: 'DashboardName',
            language: 'Language',
            product: 'Product',
            recreateSwitch: 'RecreateSwitch',
            regionId: 'RegionId',
            title: 'Title',
        };
    }
    static types() {
        return {
            clusterId: 'string',
            clusterType: 'string',
            dashboardName: 'string',
            language: 'string',
            product: 'string',
            recreateSwitch: 'boolean',
            regionId: 'string',
            title: 'string',
        };
    }
}
exports.ListDashboardsRequest = ListDashboardsRequest;
class ListDashboardsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dashboardVos: 'DashboardVos',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            dashboardVos: { 'type': 'array', 'itemType': ListDashboardsResponseBodyDashboardVos },
            requestId: 'string',
        };
    }
}
exports.ListDashboardsResponseBody = ListDashboardsResponseBody;
class ListDashboardsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListDashboardsResponseBody,
        };
    }
}
exports.ListDashboardsResponse = ListDashboardsResponse;
class ListDashboardsByNameRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
            clusterType: 'ClusterType',
            dashBoardName: 'DashBoardName',
            dashBoardVersion: 'DashBoardVersion',
            dataSourceType: 'DataSourceType',
            groupName: 'GroupName',
            onlyQuery: 'OnlyQuery',
            productCode: 'ProductCode',
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            clusterId: 'string',
            clusterType: 'string',
            dashBoardName: 'string',
            dashBoardVersion: 'string',
            dataSourceType: 'string',
            groupName: 'string',
            onlyQuery: 'boolean',
            productCode: 'string',
            regionId: 'string',
        };
    }
}
exports.ListDashboardsByNameRequest = ListDashboardsByNameRequest;
class ListDashboardsByNameResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.ListDashboardsByNameResponseBody = ListDashboardsByNameResponseBody;
class ListDashboardsByNameResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListDashboardsByNameResponseBody,
        };
    }
}
exports.ListDashboardsByNameResponse = ListDashboardsByNameResponse;
class ListDispatchRuleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'Name',
            regionId: 'RegionId',
            system: 'System',
        };
    }
    static types() {
        return {
            name: 'string',
            regionId: 'string',
            system: 'boolean',
        };
    }
}
exports.ListDispatchRuleRequest = ListDispatchRuleRequest;
class ListDispatchRuleResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dispatchRules: 'DispatchRules',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            dispatchRules: { 'type': 'array', 'itemType': ListDispatchRuleResponseBodyDispatchRules },
            requestId: 'string',
        };
    }
}
exports.ListDispatchRuleResponseBody = ListDispatchRuleResponseBody;
class ListDispatchRuleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListDispatchRuleResponseBody,
        };
    }
}
exports.ListDispatchRuleResponse = ListDispatchRuleResponse;
class ListEscalationPoliciesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'Name',
            page: 'Page',
            size: 'Size',
        };
    }
    static types() {
        return {
            name: 'string',
            page: 'number',
            size: 'number',
        };
    }
}
exports.ListEscalationPoliciesRequest = ListEscalationPoliciesRequest;
class ListEscalationPoliciesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageBean: 'PageBean',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            pageBean: ListEscalationPoliciesResponseBodyPageBean,
            requestId: 'string',
        };
    }
}
exports.ListEscalationPoliciesResponseBody = ListEscalationPoliciesResponseBody;
class ListEscalationPoliciesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListEscalationPoliciesResponseBody,
        };
    }
}
exports.ListEscalationPoliciesResponse = ListEscalationPoliciesResponse;
class ListEventBridgeIntegrationsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'Name',
            page: 'Page',
            size: 'Size',
        };
    }
    static types() {
        return {
            name: 'string',
            page: 'number',
            size: 'number',
        };
    }
}
exports.ListEventBridgeIntegrationsRequest = ListEventBridgeIntegrationsRequest;
class ListEventBridgeIntegrationsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageBean: 'PageBean',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            pageBean: ListEventBridgeIntegrationsResponseBodyPageBean,
            requestId: 'string',
        };
    }
}
exports.ListEventBridgeIntegrationsResponseBody = ListEventBridgeIntegrationsResponseBody;
class ListEventBridgeIntegrationsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListEventBridgeIntegrationsResponseBody,
        };
    }
}
exports.ListEventBridgeIntegrationsResponse = ListEventBridgeIntegrationsResponse;
class ListInsightsEventsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            endTime: 'EndTime',
            insightsTypes: 'InsightsTypes',
            pid: 'Pid',
            regionId: 'RegionId',
            startTime: 'StartTime',
        };
    }
    static types() {
        return {
            endTime: 'string',
            insightsTypes: 'string',
            pid: 'string',
            regionId: 'string',
            startTime: 'string',
        };
    }
}
exports.ListInsightsEventsRequest = ListInsightsEventsRequest;
class ListInsightsEventsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            insightsEvents: 'InsightsEvents',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            insightsEvents: { 'type': 'array', 'itemType': ListInsightsEventsResponseBodyInsightsEvents },
            requestId: 'string',
        };
    }
}
exports.ListInsightsEventsResponseBody = ListInsightsEventsResponseBody;
class ListInsightsEventsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListInsightsEventsResponseBody,
        };
    }
}
exports.ListInsightsEventsResponse = ListInsightsEventsResponse;
class ListIntegrationRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            integrationName: 'IntegrationName',
            integrationProductType: 'IntegrationProductType',
            isDetail: 'IsDetail',
            page: 'Page',
            size: 'Size',
        };
    }
    static types() {
        return {
            integrationName: 'string',
            integrationProductType: 'string',
            isDetail: 'boolean',
            page: 'number',
            size: 'number',
        };
    }
}
exports.ListIntegrationRequest = ListIntegrationRequest;
class ListIntegrationResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageInfo: 'PageInfo',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            pageInfo: ListIntegrationResponseBodyPageInfo,
            requestId: 'string',
        };
    }
}
exports.ListIntegrationResponseBody = ListIntegrationResponseBody;
class ListIntegrationResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListIntegrationResponseBody,
        };
    }
}
exports.ListIntegrationResponse = ListIntegrationResponse;
class ListNotificationPoliciesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            isDetail: 'IsDetail',
            name: 'Name',
            page: 'Page',
            regionId: 'RegionId',
            size: 'Size',
        };
    }
    static types() {
        return {
            isDetail: 'boolean',
            name: 'string',
            page: 'number',
            regionId: 'string',
            size: 'number',
        };
    }
}
exports.ListNotificationPoliciesRequest = ListNotificationPoliciesRequest;
class ListNotificationPoliciesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageBean: 'PageBean',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            pageBean: ListNotificationPoliciesResponseBodyPageBean,
            requestId: 'string',
        };
    }
}
exports.ListNotificationPoliciesResponseBody = ListNotificationPoliciesResponseBody;
class ListNotificationPoliciesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListNotificationPoliciesResponseBody,
        };
    }
}
exports.ListNotificationPoliciesResponse = ListNotificationPoliciesResponse;
class ListOnCallSchedulesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'Name',
            page: 'Page',
            size: 'Size',
        };
    }
    static types() {
        return {
            name: 'string',
            page: 'number',
            size: 'number',
        };
    }
}
exports.ListOnCallSchedulesRequest = ListOnCallSchedulesRequest;
class ListOnCallSchedulesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageBean: 'PageBean',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            pageBean: ListOnCallSchedulesResponseBodyPageBean,
            requestId: 'string',
        };
    }
}
exports.ListOnCallSchedulesResponseBody = ListOnCallSchedulesResponseBody;
class ListOnCallSchedulesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListOnCallSchedulesResponseBody,
        };
    }
}
exports.ListOnCallSchedulesResponse = ListOnCallSchedulesResponse;
class ListPrometheusAlertRulesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
            matchExpressions: 'MatchExpressions',
            name: 'Name',
            regionId: 'RegionId',
            status: 'Status',
            type: 'Type',
        };
    }
    static types() {
        return {
            clusterId: 'string',
            matchExpressions: 'string',
            name: 'string',
            regionId: 'string',
            status: 'number',
            type: 'string',
        };
    }
}
exports.ListPrometheusAlertRulesRequest = ListPrometheusAlertRulesRequest;
class ListPrometheusAlertRulesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            prometheusAlertRules: 'PrometheusAlertRules',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            prometheusAlertRules: { 'type': 'array', 'itemType': ListPrometheusAlertRulesResponseBodyPrometheusAlertRules },
            requestId: 'string',
        };
    }
}
exports.ListPrometheusAlertRulesResponseBody = ListPrometheusAlertRulesResponseBody;
class ListPrometheusAlertRulesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListPrometheusAlertRulesResponseBody,
        };
    }
}
exports.ListPrometheusAlertRulesResponse = ListPrometheusAlertRulesResponse;
class ListPrometheusAlertTemplatesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            clusterId: 'string',
            regionId: 'string',
        };
    }
}
exports.ListPrometheusAlertTemplatesRequest = ListPrometheusAlertTemplatesRequest;
class ListPrometheusAlertTemplatesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            prometheusAlertTemplates: 'PrometheusAlertTemplates',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            prometheusAlertTemplates: { 'type': 'array', 'itemType': ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplates },
            requestId: 'string',
        };
    }
}
exports.ListPrometheusAlertTemplatesResponseBody = ListPrometheusAlertTemplatesResponseBody;
class ListPrometheusAlertTemplatesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListPrometheusAlertTemplatesResponseBody,
        };
    }
}
exports.ListPrometheusAlertTemplatesResponse = ListPrometheusAlertTemplatesResponse;
class ListPrometheusGlobalViewRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            regionId: 'string',
        };
    }
}
exports.ListPrometheusGlobalViewRequest = ListPrometheusGlobalViewRequest;
class ListPrometheusGlobalViewResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.ListPrometheusGlobalViewResponseBody = ListPrometheusGlobalViewResponseBody;
class ListPrometheusGlobalViewResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListPrometheusGlobalViewResponseBody,
        };
    }
}
exports.ListPrometheusGlobalViewResponse = ListPrometheusGlobalViewResponse;
class ListPrometheusInstancesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            regionId: 'RegionId',
            showGlobalView: 'ShowGlobalView',
        };
    }
    static types() {
        return {
            regionId: 'string',
            showGlobalView: 'boolean',
        };
    }
}
exports.ListPrometheusInstancesRequest = ListPrometheusInstancesRequest;
class ListPrometheusInstancesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.ListPrometheusInstancesResponseBody = ListPrometheusInstancesResponseBody;
class ListPrometheusInstancesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListPrometheusInstancesResponseBody,
        };
    }
}
exports.ListPrometheusInstancesResponse = ListPrometheusInstancesResponse;
class ListRetcodeAppsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            regionId: 'RegionId',
            securityToken: 'SecurityToken',
        };
    }
    static types() {
        return {
            regionId: 'string',
            securityToken: 'string',
        };
    }
}
exports.ListRetcodeAppsRequest = ListRetcodeAppsRequest;
class ListRetcodeAppsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            retcodeApps: 'RetcodeApps',
        };
    }
    static types() {
        return {
            requestId: 'string',
            retcodeApps: { 'type': 'array', 'itemType': ListRetcodeAppsResponseBodyRetcodeApps },
        };
    }
}
exports.ListRetcodeAppsResponseBody = ListRetcodeAppsResponseBody;
class ListRetcodeAppsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListRetcodeAppsResponseBody,
        };
    }
}
exports.ListRetcodeAppsResponse = ListRetcodeAppsResponse;
class ListScenarioRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            name: 'Name',
            regionId: 'RegionId',
            scenario: 'Scenario',
            sign: 'Sign',
        };
    }
    static types() {
        return {
            appId: 'string',
            name: 'string',
            regionId: 'string',
            scenario: 'string',
            sign: 'string',
        };
    }
}
exports.ListScenarioRequest = ListScenarioRequest;
class ListScenarioResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            armsScenarios: 'ArmsScenarios',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            armsScenarios: { 'type': 'array', 'itemType': ListScenarioResponseBodyArmsScenarios },
            requestId: 'string',
        };
    }
}
exports.ListScenarioResponseBody = ListScenarioResponseBody;
class ListScenarioResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListScenarioResponseBody,
        };
    }
}
exports.ListScenarioResponse = ListScenarioResponse;
class ListSilencePoliciesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            isDetail: 'IsDetail',
            name: 'Name',
            page: 'Page',
            regionId: 'RegionId',
            size: 'Size',
        };
    }
    static types() {
        return {
            isDetail: 'boolean',
            name: 'string',
            page: 'number',
            regionId: 'string',
            size: 'number',
        };
    }
}
exports.ListSilencePoliciesRequest = ListSilencePoliciesRequest;
class ListSilencePoliciesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageBean: 'PageBean',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            pageBean: ListSilencePoliciesResponseBodyPageBean,
            requestId: 'string',
        };
    }
}
exports.ListSilencePoliciesResponseBody = ListSilencePoliciesResponseBody;
class ListSilencePoliciesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListSilencePoliciesResponseBody,
        };
    }
}
exports.ListSilencePoliciesResponse = ListSilencePoliciesResponse;
class ListTraceAppsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            regionId: 'string',
        };
    }
}
exports.ListTraceAppsRequest = ListTraceAppsRequest;
class ListTraceAppsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            message: 'Message',
            requestId: 'RequestId',
            success: 'Success',
            traceApps: 'TraceApps',
        };
    }
    static types() {
        return {
            code: 'number',
            message: 'string',
            requestId: 'string',
            success: 'boolean',
            traceApps: { 'type': 'array', 'itemType': ListTraceAppsResponseBodyTraceApps },
        };
    }
}
exports.ListTraceAppsResponseBody = ListTraceAppsResponseBody;
class ListTraceAppsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListTraceAppsResponseBody,
        };
    }
}
exports.ListTraceAppsResponse = ListTraceAppsResponse;
class ManageGetRecordingRuleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
            queryUserId: 'QueryUserId',
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            clusterId: 'string',
            queryUserId: 'string',
            regionId: 'string',
        };
    }
}
exports.ManageGetRecordingRuleRequest = ManageGetRecordingRuleRequest;
class ManageGetRecordingRuleResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.ManageGetRecordingRuleResponseBody = ManageGetRecordingRuleResponseBody;
class ManageGetRecordingRuleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ManageGetRecordingRuleResponseBody,
        };
    }
}
exports.ManageGetRecordingRuleResponse = ManageGetRecordingRuleResponse;
class ManageRecordingRuleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
            queryUserId: 'QueryUserId',
            regionId: 'RegionId',
            ruleYaml: 'RuleYaml',
        };
    }
    static types() {
        return {
            clusterId: 'string',
            queryUserId: 'string',
            regionId: 'string',
            ruleYaml: 'string',
        };
    }
}
exports.ManageRecordingRuleRequest = ManageRecordingRuleRequest;
class ManageRecordingRuleResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.ManageRecordingRuleResponseBody = ManageRecordingRuleResponseBody;
class ManageRecordingRuleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ManageRecordingRuleResponseBody,
        };
    }
}
exports.ManageRecordingRuleResponse = ManageRecordingRuleResponse;
class OpenArmsDefaultSLRRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            regionId: 'string',
        };
    }
}
exports.OpenArmsDefaultSLRRequest = OpenArmsDefaultSLRRequest;
class OpenArmsDefaultSLRResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.OpenArmsDefaultSLRResponseBody = OpenArmsDefaultSLRResponseBody;
class OpenArmsDefaultSLRResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: OpenArmsDefaultSLRResponseBody,
        };
    }
}
exports.OpenArmsDefaultSLRResponse = OpenArmsDefaultSLRResponse;
class OpenArmsServiceSecondVersionRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            regionId: 'RegionId',
            type: 'Type',
        };
    }
    static types() {
        return {
            regionId: 'string',
            type: 'string',
        };
    }
}
exports.OpenArmsServiceSecondVersionRequest = OpenArmsServiceSecondVersionRequest;
class OpenArmsServiceSecondVersionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            orderId: 'OrderId',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            orderId: 'string',
            requestId: 'string',
        };
    }
}
exports.OpenArmsServiceSecondVersionResponseBody = OpenArmsServiceSecondVersionResponseBody;
class OpenArmsServiceSecondVersionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: OpenArmsServiceSecondVersionResponseBody,
        };
    }
}
exports.OpenArmsServiceSecondVersionResponse = OpenArmsServiceSecondVersionResponse;
class OpenVClusterRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterType: 'ClusterType',
            length: 'Length',
            product: 'Product',
            recreateSwitch: 'RecreateSwitch',
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            clusterType: 'string',
            length: 'number',
            product: 'string',
            recreateSwitch: 'boolean',
            regionId: 'string',
        };
    }
}
exports.OpenVClusterRequest = OpenVClusterRequest;
class OpenVClusterResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.OpenVClusterResponseBody = OpenVClusterResponseBody;
class OpenVClusterResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: OpenVClusterResponseBody,
        };
    }
}
exports.OpenVClusterResponse = OpenVClusterResponse;
class OpenXtraceDefaultSLRRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            regionId: 'string',
        };
    }
}
exports.OpenXtraceDefaultSLRRequest = OpenXtraceDefaultSLRRequest;
class OpenXtraceDefaultSLRResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.OpenXtraceDefaultSLRResponseBody = OpenXtraceDefaultSLRResponseBody;
class OpenXtraceDefaultSLRResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: OpenXtraceDefaultSLRResponseBody,
        };
    }
}
exports.OpenXtraceDefaultSLRResponse = OpenXtraceDefaultSLRResponse;
class QueryMetricByPageRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentPage: 'CurrentPage',
            customFilters: 'CustomFilters',
            dimensions: 'Dimensions',
            endTime: 'EndTime',
            filters: 'Filters',
            intervalInSec: 'IntervalInSec',
            measures: 'Measures',
            metric: 'Metric',
            order: 'Order',
            orderBy: 'OrderBy',
            pageSize: 'PageSize',
            startTime: 'StartTime',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            customFilters: { 'type': 'array', 'itemType': 'string' },
            dimensions: { 'type': 'array', 'itemType': 'string' },
            endTime: 'number',
            filters: { 'type': 'array', 'itemType': QueryMetricByPageRequestFilters },
            intervalInSec: 'number',
            measures: { 'type': 'array', 'itemType': 'string' },
            metric: 'string',
            order: 'string',
            orderBy: 'string',
            pageSize: 'number',
            startTime: 'number',
        };
    }
}
exports.QueryMetricByPageRequest = QueryMetricByPageRequest;
class QueryMetricByPageResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryMetricByPageResponseBodyData,
            message: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryMetricByPageResponseBody = QueryMetricByPageResponseBody;
class QueryMetricByPageResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryMetricByPageResponseBody,
        };
    }
}
exports.QueryMetricByPageResponse = QueryMetricByPageResponse;
class QueryPromInstallStatusRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            clusterId: 'string',
            regionId: 'string',
        };
    }
}
exports.QueryPromInstallStatusRequest = QueryPromInstallStatusRequest;
class QueryPromInstallStatusResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: QueryPromInstallStatusResponseBodyData,
            requestId: 'string',
        };
    }
}
exports.QueryPromInstallStatusResponseBody = QueryPromInstallStatusResponseBody;
class QueryPromInstallStatusResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryPromInstallStatusResponseBody,
        };
    }
}
exports.QueryPromInstallStatusResponse = QueryPromInstallStatusResponse;
class QueryReleaseMetricRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            changeOrderId: 'ChangeOrderId',
            createTime: 'CreateTime',
            metricType: 'MetricType',
            pid: 'Pid',
            proxyUserId: 'ProxyUserId',
            releaseEndTime: 'ReleaseEndTime',
            releaseStartTime: 'ReleaseStartTime',
            service: 'Service',
        };
    }
    static types() {
        return {
            changeOrderId: 'string',
            createTime: 'number',
            metricType: 'string',
            pid: 'string',
            proxyUserId: 'string',
            releaseEndTime: 'number',
            releaseStartTime: 'number',
            service: 'string',
        };
    }
}
exports.QueryReleaseMetricRequest = QueryReleaseMetricRequest;
class QueryReleaseMetricResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.QueryReleaseMetricResponseBody = QueryReleaseMetricResponseBody;
class QueryReleaseMetricResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryReleaseMetricResponseBody,
        };
    }
}
exports.QueryReleaseMetricResponse = QueryReleaseMetricResponse;
class RemoveAliClusterIdsFromPrometheusGlobalViewRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterIds: 'ClusterIds',
            globalViewClusterId: 'GlobalViewClusterId',
            groupName: 'GroupName',
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            clusterIds: 'string',
            globalViewClusterId: 'string',
            groupName: 'string',
            regionId: 'string',
        };
    }
}
exports.RemoveAliClusterIdsFromPrometheusGlobalViewRequest = RemoveAliClusterIdsFromPrometheusGlobalViewRequest;
class RemoveAliClusterIdsFromPrometheusGlobalViewResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: RemoveAliClusterIdsFromPrometheusGlobalViewResponseBodyData,
            requestId: 'string',
        };
    }
}
exports.RemoveAliClusterIdsFromPrometheusGlobalViewResponseBody = RemoveAliClusterIdsFromPrometheusGlobalViewResponseBody;
class RemoveAliClusterIdsFromPrometheusGlobalViewResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RemoveAliClusterIdsFromPrometheusGlobalViewResponseBody,
        };
    }
}
exports.RemoveAliClusterIdsFromPrometheusGlobalViewResponse = RemoveAliClusterIdsFromPrometheusGlobalViewResponse;
class RemoveSourcesFromPrometheusGlobalViewRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            globalViewClusterId: 'GlobalViewClusterId',
            groupName: 'GroupName',
            regionId: 'RegionId',
            sourceNames: 'SourceNames',
        };
    }
    static types() {
        return {
            globalViewClusterId: 'string',
            groupName: 'string',
            regionId: 'string',
            sourceNames: 'string',
        };
    }
}
exports.RemoveSourcesFromPrometheusGlobalViewRequest = RemoveSourcesFromPrometheusGlobalViewRequest;
class RemoveSourcesFromPrometheusGlobalViewResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: RemoveSourcesFromPrometheusGlobalViewResponseBodyData,
            requestId: 'string',
        };
    }
}
exports.RemoveSourcesFromPrometheusGlobalViewResponseBody = RemoveSourcesFromPrometheusGlobalViewResponseBody;
class RemoveSourcesFromPrometheusGlobalViewResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RemoveSourcesFromPrometheusGlobalViewResponseBody,
        };
    }
}
exports.RemoveSourcesFromPrometheusGlobalViewResponse = RemoveSourcesFromPrometheusGlobalViewResponse;
class SaveTraceAppConfigRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pid: 'Pid',
            settings: 'Settings',
        };
    }
    static types() {
        return {
            pid: 'string',
            settings: { 'type': 'array', 'itemType': SaveTraceAppConfigRequestSettings },
        };
    }
}
exports.SaveTraceAppConfigRequest = SaveTraceAppConfigRequest;
class SaveTraceAppConfigResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.SaveTraceAppConfigResponseBody = SaveTraceAppConfigResponseBody;
class SaveTraceAppConfigResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SaveTraceAppConfigResponseBody,
        };
    }
}
exports.SaveTraceAppConfigResponse = SaveTraceAppConfigResponse;
class SearchAlertContactRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            contactIds: 'ContactIds',
            contactName: 'ContactName',
            currentPage: 'CurrentPage',
            email: 'Email',
            pageSize: 'PageSize',
            phone: 'Phone',
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            contactIds: 'string',
            contactName: 'string',
            currentPage: 'string',
            email: 'string',
            pageSize: 'string',
            phone: 'string',
            regionId: 'string',
        };
    }
}
exports.SearchAlertContactRequest = SearchAlertContactRequest;
class SearchAlertContactResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageBean: 'PageBean',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            pageBean: SearchAlertContactResponseBodyPageBean,
            requestId: 'string',
        };
    }
}
exports.SearchAlertContactResponseBody = SearchAlertContactResponseBody;
class SearchAlertContactResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SearchAlertContactResponseBody,
        };
    }
}
exports.SearchAlertContactResponse = SearchAlertContactResponse;
class SearchAlertContactGroupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            contactGroupIds: 'ContactGroupIds',
            contactGroupName: 'ContactGroupName',
            contactId: 'ContactId',
            contactName: 'ContactName',
            isDetail: 'IsDetail',
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            contactGroupIds: 'string',
            contactGroupName: 'string',
            contactId: 'number',
            contactName: 'string',
            isDetail: 'boolean',
            regionId: 'string',
        };
    }
}
exports.SearchAlertContactGroupRequest = SearchAlertContactGroupRequest;
class SearchAlertContactGroupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            contactGroups: 'ContactGroups',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            contactGroups: { 'type': 'array', 'itemType': SearchAlertContactGroupResponseBodyContactGroups },
            requestId: 'string',
        };
    }
}
exports.SearchAlertContactGroupResponseBody = SearchAlertContactGroupResponseBody;
class SearchAlertContactGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SearchAlertContactGroupResponseBody,
        };
    }
}
exports.SearchAlertContactGroupResponse = SearchAlertContactGroupResponse;
class SearchAlertHistoriesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alertId: 'AlertId',
            alertType: 'AlertType',
            currentPage: 'CurrentPage',
            endTime: 'EndTime',
            pageSize: 'PageSize',
            regionId: 'RegionId',
            startTime: 'StartTime',
        };
    }
    static types() {
        return {
            alertId: 'number',
            alertType: 'number',
            currentPage: 'number',
            endTime: 'number',
            pageSize: 'number',
            regionId: 'string',
            startTime: 'number',
        };
    }
}
exports.SearchAlertHistoriesRequest = SearchAlertHistoriesRequest;
class SearchAlertHistoriesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageBean: 'PageBean',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            pageBean: SearchAlertHistoriesResponseBodyPageBean,
            requestId: 'string',
        };
    }
}
exports.SearchAlertHistoriesResponseBody = SearchAlertHistoriesResponseBody;
class SearchAlertHistoriesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SearchAlertHistoriesResponseBody,
        };
    }
}
exports.SearchAlertHistoriesResponse = SearchAlertHistoriesResponse;
class SearchAlertRulesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'AppType',
            currentPage: 'CurrentPage',
            pageSize: 'PageSize',
            pid: 'Pid',
            regionId: 'RegionId',
            systemRegionId: 'SystemRegionId',
            title: 'Title',
            type: 'Type',
        };
    }
    static types() {
        return {
            appType: 'string',
            currentPage: 'number',
            pageSize: 'number',
            pid: 'string',
            regionId: 'string',
            systemRegionId: 'string',
            title: 'string',
            type: 'string',
        };
    }
}
exports.SearchAlertRulesRequest = SearchAlertRulesRequest;
class SearchAlertRulesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageBean: 'PageBean',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            pageBean: SearchAlertRulesResponseBodyPageBean,
            requestId: 'string',
        };
    }
}
exports.SearchAlertRulesResponseBody = SearchAlertRulesResponseBody;
class SearchAlertRulesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SearchAlertRulesResponseBody,
        };
    }
}
exports.SearchAlertRulesResponse = SearchAlertRulesResponse;
class SearchEventsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alertId: 'AlertId',
            alertType: 'AlertType',
            appType: 'AppType',
            currentPage: 'CurrentPage',
            endTime: 'EndTime',
            isTrigger: 'IsTrigger',
            pageSize: 'PageSize',
            pid: 'Pid',
            regionId: 'RegionId',
            startTime: 'StartTime',
        };
    }
    static types() {
        return {
            alertId: 'number',
            alertType: 'number',
            appType: 'string',
            currentPage: 'number',
            endTime: 'number',
            isTrigger: 'number',
            pageSize: 'number',
            pid: 'string',
            regionId: 'string',
            startTime: 'number',
        };
    }
}
exports.SearchEventsRequest = SearchEventsRequest;
class SearchEventsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            isTrigger: 'IsTrigger',
            pageBean: 'PageBean',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            isTrigger: 'number',
            pageBean: SearchEventsResponseBodyPageBean,
            requestId: 'string',
        };
    }
}
exports.SearchEventsResponseBody = SearchEventsResponseBody;
class SearchEventsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SearchEventsResponseBody,
        };
    }
}
exports.SearchEventsResponse = SearchEventsResponse;
class SearchRetcodeAppByPageRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageNumber: 'PageNumber',
            pageSize: 'PageSize',
            regionId: 'RegionId',
            retcodeAppName: 'RetcodeAppName',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
            regionId: 'string',
            retcodeAppName: 'string',
        };
    }
}
exports.SearchRetcodeAppByPageRequest = SearchRetcodeAppByPageRequest;
class SearchRetcodeAppByPageResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageBean: 'PageBean',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            pageBean: SearchRetcodeAppByPageResponseBodyPageBean,
            requestId: 'string',
        };
    }
}
exports.SearchRetcodeAppByPageResponseBody = SearchRetcodeAppByPageResponseBody;
class SearchRetcodeAppByPageResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SearchRetcodeAppByPageResponseBody,
        };
    }
}
exports.SearchRetcodeAppByPageResponse = SearchRetcodeAppByPageResponse;
class SearchTraceAppByNameRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            regionId: 'RegionId',
            traceAppName: 'TraceAppName',
        };
    }
    static types() {
        return {
            regionId: 'string',
            traceAppName: 'string',
        };
    }
}
exports.SearchTraceAppByNameRequest = SearchTraceAppByNameRequest;
class SearchTraceAppByNameResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            traceApps: 'TraceApps',
        };
    }
    static types() {
        return {
            requestId: 'string',
            traceApps: { 'type': 'array', 'itemType': SearchTraceAppByNameResponseBodyTraceApps },
        };
    }
}
exports.SearchTraceAppByNameResponseBody = SearchTraceAppByNameResponseBody;
class SearchTraceAppByNameResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SearchTraceAppByNameResponseBody,
        };
    }
}
exports.SearchTraceAppByNameResponse = SearchTraceAppByNameResponse;
class SearchTraceAppByPageRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageNumber: 'PageNumber',
            pageSize: 'PageSize',
            regionId: 'RegionId',
            traceAppName: 'TraceAppName',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
            regionId: 'string',
            traceAppName: 'string',
        };
    }
}
exports.SearchTraceAppByPageRequest = SearchTraceAppByPageRequest;
class SearchTraceAppByPageResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageBean: 'PageBean',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            pageBean: SearchTraceAppByPageResponseBodyPageBean,
            requestId: 'string',
        };
    }
}
exports.SearchTraceAppByPageResponseBody = SearchTraceAppByPageResponseBody;
class SearchTraceAppByPageResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SearchTraceAppByPageResponseBody,
        };
    }
}
exports.SearchTraceAppByPageResponse = SearchTraceAppByPageResponse;
class SearchTracesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            endTime: 'EndTime',
            exclusionFilters: 'ExclusionFilters',
            minDuration: 'MinDuration',
            operationName: 'OperationName',
            pid: 'Pid',
            regionId: 'RegionId',
            reverse: 'Reverse',
            serviceIp: 'ServiceIp',
            serviceName: 'ServiceName',
            startTime: 'StartTime',
            tag: 'Tag',
        };
    }
    static types() {
        return {
            endTime: 'number',
            exclusionFilters: { 'type': 'array', 'itemType': SearchTracesRequestExclusionFilters },
            minDuration: 'number',
            operationName: 'string',
            pid: 'string',
            regionId: 'string',
            reverse: 'boolean',
            serviceIp: 'string',
            serviceName: 'string',
            startTime: 'number',
            tag: { 'type': 'array', 'itemType': SearchTracesRequestTag },
        };
    }
}
exports.SearchTracesRequest = SearchTracesRequest;
class SearchTracesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            traceInfos: 'TraceInfos',
        };
    }
    static types() {
        return {
            requestId: 'string',
            traceInfos: { 'type': 'array', 'itemType': SearchTracesResponseBodyTraceInfos },
        };
    }
}
exports.SearchTracesResponseBody = SearchTracesResponseBody;
class SearchTracesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SearchTracesResponseBody,
        };
    }
}
exports.SearchTracesResponse = SearchTracesResponse;
class SearchTracesByPageRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            endTime: 'EndTime',
            exclusionFilters: 'ExclusionFilters',
            minDuration: 'MinDuration',
            operationName: 'OperationName',
            pageNumber: 'PageNumber',
            pageSize: 'PageSize',
            pid: 'Pid',
            regionId: 'RegionId',
            reverse: 'Reverse',
            serviceIp: 'ServiceIp',
            serviceName: 'ServiceName',
            startTime: 'StartTime',
            tags: 'Tags',
        };
    }
    static types() {
        return {
            endTime: 'number',
            exclusionFilters: { 'type': 'array', 'itemType': SearchTracesByPageRequestExclusionFilters },
            minDuration: 'number',
            operationName: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            pid: 'string',
            regionId: 'string',
            reverse: 'boolean',
            serviceIp: 'string',
            serviceName: 'string',
            startTime: 'number',
            tags: { 'type': 'array', 'itemType': SearchTracesByPageRequestTags },
        };
    }
}
exports.SearchTracesByPageRequest = SearchTracesByPageRequest;
class SearchTracesByPageResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageBean: 'PageBean',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            pageBean: SearchTracesByPageResponseBodyPageBean,
            requestId: 'string',
        };
    }
}
exports.SearchTracesByPageResponseBody = SearchTracesByPageResponseBody;
class SearchTracesByPageResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SearchTracesByPageResponseBody,
        };
    }
}
exports.SearchTracesByPageResponse = SearchTracesByPageResponse;
class SendTTSVerifyLinkRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            contactId: 'ContactId',
            phone: 'Phone',
        };
    }
    static types() {
        return {
            contactId: 'number',
            phone: 'string',
        };
    }
}
exports.SendTTSVerifyLinkRequest = SendTTSVerifyLinkRequest;
class SendTTSVerifyLinkResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            isSuccess: 'IsSuccess',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            isSuccess: 'boolean',
            requestId: 'string',
        };
    }
}
exports.SendTTSVerifyLinkResponseBody = SendTTSVerifyLinkResponseBody;
class SendTTSVerifyLinkResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SendTTSVerifyLinkResponseBody,
        };
    }
}
exports.SendTTSVerifyLinkResponse = SendTTSVerifyLinkResponse;
class SetRetcodeShareStatusRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pid: 'Pid',
            status: 'Status',
        };
    }
    static types() {
        return {
            pid: 'string',
            status: 'boolean',
        };
    }
}
exports.SetRetcodeShareStatusRequest = SetRetcodeShareStatusRequest;
class SetRetcodeShareStatusResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            isSuccess: 'IsSuccess',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            isSuccess: 'boolean',
            requestId: 'string',
        };
    }
}
exports.SetRetcodeShareStatusResponseBody = SetRetcodeShareStatusResponseBody;
class SetRetcodeShareStatusResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SetRetcodeShareStatusResponseBody,
        };
    }
}
exports.SetRetcodeShareStatusResponse = SetRetcodeShareStatusResponse;
class StartAlertRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alertId: 'AlertId',
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            alertId: 'string',
            regionId: 'string',
        };
    }
}
exports.StartAlertRequest = StartAlertRequest;
class StartAlertResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            isSuccess: 'IsSuccess',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            isSuccess: 'boolean',
            requestId: 'string',
        };
    }
}
exports.StartAlertResponseBody = StartAlertResponseBody;
class StartAlertResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: StartAlertResponseBody,
        };
    }
}
exports.StartAlertResponse = StartAlertResponse;
class StopAlertRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alertId: 'AlertId',
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            alertId: 'string',
            regionId: 'string',
        };
    }
}
exports.StopAlertRequest = StopAlertRequest;
class StopAlertResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            isSuccess: 'IsSuccess',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            isSuccess: 'boolean',
            requestId: 'string',
        };
    }
}
exports.StopAlertResponseBody = StopAlertResponseBody;
class StopAlertResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: StopAlertResponseBody,
        };
    }
}
exports.StopAlertResponse = StopAlertResponse;
class SwitchSyntheticTaskStatusRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            switchStatus: 'SwitchStatus',
            taskIds: 'TaskIds',
        };
    }
    static types() {
        return {
            switchStatus: 'number',
            taskIds: { 'type': 'array', 'itemType': 'number' },
        };
    }
}
exports.SwitchSyntheticTaskStatusRequest = SwitchSyntheticTaskStatusRequest;
class SwitchSyntheticTaskStatusResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            result: 'Result',
        };
    }
    static types() {
        return {
            requestId: 'string',
            result: 'string',
        };
    }
}
exports.SwitchSyntheticTaskStatusResponseBody = SwitchSyntheticTaskStatusResponseBody;
class SwitchSyntheticTaskStatusResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SwitchSyntheticTaskStatusResponseBody,
        };
    }
}
exports.SwitchSyntheticTaskStatusResponse = SwitchSyntheticTaskStatusResponse;
class SyncRecordingRulesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
            regionId: 'RegionId',
            targetClusters: 'TargetClusters',
        };
    }
    static types() {
        return {
            clusterId: 'string',
            regionId: 'string',
            targetClusters: 'string',
        };
    }
}
exports.SyncRecordingRulesRequest = SyncRecordingRulesRequest;
class SyncRecordingRulesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.SyncRecordingRulesResponseBody = SyncRecordingRulesResponseBody;
class SyncRecordingRulesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SyncRecordingRulesResponseBody,
        };
    }
}
exports.SyncRecordingRulesResponse = SyncRecordingRulesResponse;
class TurnOnSecondSwitchRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pid: 'Pid',
            proxyUserId: 'ProxyUserId',
            releaseStartTime: 'ReleaseStartTime',
        };
    }
    static types() {
        return {
            pid: 'string',
            proxyUserId: 'string',
            releaseStartTime: 'number',
        };
    }
}
exports.TurnOnSecondSwitchRequest = TurnOnSecondSwitchRequest;
class TurnOnSecondSwitchResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.TurnOnSecondSwitchResponseBody = TurnOnSecondSwitchResponseBody;
class TurnOnSecondSwitchResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: TurnOnSecondSwitchResponseBody,
        };
    }
}
exports.TurnOnSecondSwitchResponse = TurnOnSecondSwitchResponse;
class UninstallManagedPrometheusRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
            clusterType: 'ClusterType',
            regionId: 'RegionId',
            vpcId: 'VpcId',
        };
    }
    static types() {
        return {
            clusterId: 'string',
            clusterType: 'string',
            regionId: 'string',
            vpcId: 'string',
        };
    }
}
exports.UninstallManagedPrometheusRequest = UninstallManagedPrometheusRequest;
class UninstallManagedPrometheusResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'number',
            data: 'string',
            message: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.UninstallManagedPrometheusResponseBody = UninstallManagedPrometheusResponseBody;
class UninstallManagedPrometheusResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UninstallManagedPrometheusResponseBody,
        };
    }
}
exports.UninstallManagedPrometheusResponse = UninstallManagedPrometheusResponse;
class UninstallPromClusterRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            clusterId: 'string',
            regionId: 'string',
        };
    }
}
exports.UninstallPromClusterRequest = UninstallPromClusterRequest;
class UninstallPromClusterResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'boolean',
            requestId: 'string',
        };
    }
}
exports.UninstallPromClusterResponseBody = UninstallPromClusterResponseBody;
class UninstallPromClusterResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UninstallPromClusterResponseBody,
        };
    }
}
exports.UninstallPromClusterResponse = UninstallPromClusterResponse;
class UpdateAlertContactRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            contactId: 'ContactId',
            contactName: 'ContactName',
            dingRobotWebhookUrl: 'DingRobotWebhookUrl',
            email: 'Email',
            phoneNum: 'PhoneNum',
            regionId: 'RegionId',
            systemNoc: 'SystemNoc',
        };
    }
    static types() {
        return {
            contactId: 'number',
            contactName: 'string',
            dingRobotWebhookUrl: 'string',
            email: 'string',
            phoneNum: 'string',
            regionId: 'string',
            systemNoc: 'boolean',
        };
    }
}
exports.UpdateAlertContactRequest = UpdateAlertContactRequest;
class UpdateAlertContactResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            isSuccess: 'IsSuccess',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            isSuccess: 'boolean',
            requestId: 'string',
        };
    }
}
exports.UpdateAlertContactResponseBody = UpdateAlertContactResponseBody;
class UpdateAlertContactResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateAlertContactResponseBody,
        };
    }
}
exports.UpdateAlertContactResponse = UpdateAlertContactResponse;
class UpdateAlertContactGroupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            contactGroupId: 'ContactGroupId',
            contactGroupName: 'ContactGroupName',
            contactIds: 'ContactIds',
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            contactGroupId: 'number',
            contactGroupName: 'string',
            contactIds: 'string',
            regionId: 'string',
        };
    }
}
exports.UpdateAlertContactGroupRequest = UpdateAlertContactGroupRequest;
class UpdateAlertContactGroupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            isSuccess: 'IsSuccess',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            isSuccess: 'boolean',
            requestId: 'string',
        };
    }
}
exports.UpdateAlertContactGroupResponseBody = UpdateAlertContactGroupResponseBody;
class UpdateAlertContactGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateAlertContactGroupResponseBody,
        };
    }
}
exports.UpdateAlertContactGroupResponse = UpdateAlertContactGroupResponse;
class UpdateAlertRuleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alertId: 'AlertId',
            contactGroupIds: 'ContactGroupIds',
            isAutoStart: 'IsAutoStart',
            regionId: 'RegionId',
            templageAlertConfig: 'TemplageAlertConfig',
        };
    }
    static types() {
        return {
            alertId: 'number',
            contactGroupIds: 'string',
            isAutoStart: 'boolean',
            regionId: 'string',
            templageAlertConfig: 'string',
        };
    }
}
exports.UpdateAlertRuleRequest = UpdateAlertRuleRequest;
class UpdateAlertRuleResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alertId: 'AlertId',
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            alertId: 'number',
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.UpdateAlertRuleResponseBody = UpdateAlertRuleResponseBody;
class UpdateAlertRuleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateAlertRuleResponseBody,
        };
    }
}
exports.UpdateAlertRuleResponse = UpdateAlertRuleResponse;
class UpdateDispatchRuleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dispatchRule: 'DispatchRule',
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            dispatchRule: 'string',
            regionId: 'string',
        };
    }
}
exports.UpdateDispatchRuleRequest = UpdateDispatchRuleRequest;
class UpdateDispatchRuleResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.UpdateDispatchRuleResponseBody = UpdateDispatchRuleResponseBody;
class UpdateDispatchRuleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateDispatchRuleResponseBody,
        };
    }
}
exports.UpdateDispatchRuleResponse = UpdateDispatchRuleResponse;
class UpdateIntegrationRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            apiEndpoint: 'ApiEndpoint',
            autoRecover: 'AutoRecover',
            description: 'Description',
            duplicateKey: 'DuplicateKey',
            extendedFieldRedefineRules: 'ExtendedFieldRedefineRules',
            fieldRedefineRules: 'FieldRedefineRules',
            initiativeRecoverField: 'InitiativeRecoverField',
            initiativeRecoverValue: 'InitiativeRecoverValue',
            integrationId: 'IntegrationId',
            integrationName: 'IntegrationName',
            integrationProductType: 'IntegrationProductType',
            liveness: 'Liveness',
            recoverTime: 'RecoverTime',
            shortToken: 'ShortToken',
            stat: 'Stat',
            state: 'State',
        };
    }
    static types() {
        return {
            apiEndpoint: 'string',
            autoRecover: 'boolean',
            description: 'string',
            duplicateKey: 'string',
            extendedFieldRedefineRules: 'string',
            fieldRedefineRules: 'string',
            initiativeRecoverField: 'string',
            initiativeRecoverValue: 'string',
            integrationId: 'number',
            integrationName: 'string',
            integrationProductType: 'string',
            liveness: 'string',
            recoverTime: 'number',
            shortToken: 'string',
            stat: 'string',
            state: 'boolean',
        };
    }
}
exports.UpdateIntegrationRequest = UpdateIntegrationRequest;
class UpdateIntegrationResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            integration: 'Integration',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            integration: UpdateIntegrationResponseBodyIntegration,
            requestId: 'string',
        };
    }
}
exports.UpdateIntegrationResponseBody = UpdateIntegrationResponseBody;
class UpdateIntegrationResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateIntegrationResponseBody,
        };
    }
}
exports.UpdateIntegrationResponse = UpdateIntegrationResponse;
class UpdatePrometheusAlertRuleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alertId: 'AlertId',
            alertName: 'AlertName',
            annotations: 'Annotations',
            clusterId: 'ClusterId',
            dispatchRuleId: 'DispatchRuleId',
            duration: 'Duration',
            expression: 'Expression',
            labels: 'Labels',
            message: 'Message',
            notifyType: 'NotifyType',
            regionId: 'RegionId',
            type: 'Type',
        };
    }
    static types() {
        return {
            alertId: 'number',
            alertName: 'string',
            annotations: 'string',
            clusterId: 'string',
            dispatchRuleId: 'number',
            duration: 'string',
            expression: 'string',
            labels: 'string',
            message: 'string',
            notifyType: 'string',
            regionId: 'string',
            type: 'string',
        };
    }
}
exports.UpdatePrometheusAlertRuleRequest = UpdatePrometheusAlertRuleRequest;
class UpdatePrometheusAlertRuleResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            prometheusAlertRule: 'PrometheusAlertRule',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            prometheusAlertRule: UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRule,
            requestId: 'string',
        };
    }
}
exports.UpdatePrometheusAlertRuleResponseBody = UpdatePrometheusAlertRuleResponseBody;
class UpdatePrometheusAlertRuleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdatePrometheusAlertRuleResponseBody,
        };
    }
}
exports.UpdatePrometheusAlertRuleResponse = UpdatePrometheusAlertRuleResponse;
class UpdateWebhookRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            body: 'Body',
            contactId: 'ContactId',
            contactName: 'ContactName',
            httpHeaders: 'HttpHeaders',
            httpParams: 'HttpParams',
            method: 'Method',
            recoverBody: 'RecoverBody',
            regionId: 'RegionId',
            url: 'Url',
        };
    }
    static types() {
        return {
            body: 'string',
            contactId: 'number',
            contactName: 'string',
            httpHeaders: 'string',
            httpParams: 'string',
            method: 'string',
            recoverBody: 'string',
            regionId: 'string',
            url: 'string',
        };
    }
}
exports.UpdateWebhookRequest = UpdateWebhookRequest;
class UpdateWebhookResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            isSuccess: 'IsSuccess',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            isSuccess: 'boolean',
            requestId: 'string',
        };
    }
}
exports.UpdateWebhookResponseBody = UpdateWebhookResponseBody;
class UpdateWebhookResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateWebhookResponseBody,
        };
    }
}
exports.UpdateWebhookResponse = UpdateWebhookResponse;
class UploadRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            edition: 'Edition',
            file: 'File',
            fileName: 'FileName',
            pid: 'Pid',
            regionId: 'RegionId',
            version: 'Version',
        };
    }
    static types() {
        return {
            edition: 'string',
            file: 'string',
            fileName: 'string',
            pid: 'string',
            regionId: 'string',
            version: 'string',
        };
    }
}
exports.UploadRequest = UploadRequest;
class UploadResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            uploadResult: 'UploadResult',
        };
    }
    static types() {
        return {
            requestId: 'string',
            uploadResult: UploadResponseBodyUploadResult,
        };
    }
}
exports.UploadResponseBody = UploadResponseBody;
class UploadResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UploadResponseBody,
        };
    }
}
exports.UploadResponse = UploadResponse;
class AddAliClusterIdsToPrometheusGlobalViewResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            info: 'Info',
            msg: 'Msg',
            success: 'Success',
        };
    }
    static types() {
        return {
            info: 'string',
            msg: 'string',
            success: 'boolean',
        };
    }
}
exports.AddAliClusterIdsToPrometheusGlobalViewResponseBodyData = AddAliClusterIdsToPrometheusGlobalViewResponseBodyData;
class AddPrometheusGlobalViewResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            info: 'Info',
            msg: 'Msg',
            success: 'Success',
        };
    }
    static types() {
        return {
            info: 'string',
            msg: 'string',
            success: 'boolean',
        };
    }
}
exports.AddPrometheusGlobalViewResponseBodyData = AddPrometheusGlobalViewResponseBodyData;
class AddPrometheusGlobalViewByAliClusterIdsResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            info: 'Info',
            msg: 'Msg',
            success: 'Success',
        };
    }
    static types() {
        return {
            info: 'string',
            msg: 'string',
            success: 'boolean',
        };
    }
}
exports.AddPrometheusGlobalViewByAliClusterIdsResponseBodyData = AddPrometheusGlobalViewByAliClusterIdsResponseBodyData;
class AppendInstancesToPrometheusGlobalViewResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            info: 'Info',
            msg: 'Msg',
            success: 'Success',
        };
    }
    static types() {
        return {
            info: 'string',
            msg: 'string',
            success: 'boolean',
        };
    }
}
exports.AppendInstancesToPrometheusGlobalViewResponseBodyData = AppendInstancesToPrometheusGlobalViewResponseBodyData;
class CreateIntegrationResponseBodyIntegration extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            autoRecover: 'AutoRecover',
            description: 'Description',
            integrationId: 'IntegrationId',
            integrationName: 'IntegrationName',
            integrationProductType: 'IntegrationProductType',
            recoverTime: 'RecoverTime',
        };
    }
    static types() {
        return {
            autoRecover: 'boolean',
            description: 'string',
            integrationId: 'number',
            integrationName: 'string',
            integrationProductType: 'string',
            recoverTime: 'number',
        };
    }
}
exports.CreateIntegrationResponseBodyIntegration = CreateIntegrationResponseBodyIntegration;
class CreateOrUpdateAlertRuleResponseBodyAlertRuleAlertRuleContentAlertRuleItems extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            aggregate: 'Aggregate',
            metricKey: 'MetricKey',
            n: 'N',
            operator: 'Operator',
            value: 'Value',
        };
    }
    static types() {
        return {
            aggregate: 'string',
            metricKey: 'string',
            n: 'number',
            operator: 'string',
            value: 'string',
        };
    }
}
exports.CreateOrUpdateAlertRuleResponseBodyAlertRuleAlertRuleContentAlertRuleItems = CreateOrUpdateAlertRuleResponseBodyAlertRuleAlertRuleContentAlertRuleItems;
class CreateOrUpdateAlertRuleResponseBodyAlertRuleAlertRuleContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alertRuleItems: 'AlertRuleItems',
            condition: 'Condition',
        };
    }
    static types() {
        return {
            alertRuleItems: { 'type': 'array', 'itemType': CreateOrUpdateAlertRuleResponseBodyAlertRuleAlertRuleContentAlertRuleItems },
            condition: 'string',
        };
    }
}
exports.CreateOrUpdateAlertRuleResponseBodyAlertRuleAlertRuleContent = CreateOrUpdateAlertRuleResponseBodyAlertRuleAlertRuleContent;
class CreateOrUpdateAlertRuleResponseBodyAlertRuleAnnotations extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'Name',
            value: 'Value',
        };
    }
    static types() {
        return {
            name: 'string',
            value: 'string',
        };
    }
}
exports.CreateOrUpdateAlertRuleResponseBodyAlertRuleAnnotations = CreateOrUpdateAlertRuleResponseBodyAlertRuleAnnotations;
class CreateOrUpdateAlertRuleResponseBodyAlertRuleFiltersCustomSLSFilters extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            key: 'Key',
            opt: 'Opt',
            show: 'Show',
            t: 'T',
            value: 'Value',
        };
    }
    static types() {
        return {
            key: 'string',
            opt: 'string',
            show: 'boolean',
            t: 'string',
            value: 'string',
        };
    }
}
exports.CreateOrUpdateAlertRuleResponseBodyAlertRuleFiltersCustomSLSFilters = CreateOrUpdateAlertRuleResponseBodyAlertRuleFiltersCustomSLSFilters;
class CreateOrUpdateAlertRuleResponseBodyAlertRuleFiltersDimFilters extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            filterKey: 'FilterKey',
            filterOpt: 'FilterOpt',
            filterValues: 'FilterValues',
        };
    }
    static types() {
        return {
            filterKey: 'string',
            filterOpt: 'string',
            filterValues: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.CreateOrUpdateAlertRuleResponseBodyAlertRuleFiltersDimFilters = CreateOrUpdateAlertRuleResponseBodyAlertRuleFiltersDimFilters;
class CreateOrUpdateAlertRuleResponseBodyAlertRuleFilters extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            customSLSFilters: 'CustomSLSFilters',
            customSLSGroupByDimensions: 'CustomSLSGroupByDimensions',
            customSLSWheres: 'CustomSLSWheres',
            dimFilters: 'DimFilters',
        };
    }
    static types() {
        return {
            customSLSFilters: { 'type': 'array', 'itemType': CreateOrUpdateAlertRuleResponseBodyAlertRuleFiltersCustomSLSFilters },
            customSLSGroupByDimensions: { 'type': 'array', 'itemType': 'string' },
            customSLSWheres: { 'type': 'array', 'itemType': 'string' },
            dimFilters: { 'type': 'array', 'itemType': CreateOrUpdateAlertRuleResponseBodyAlertRuleFiltersDimFilters },
        };
    }
}
exports.CreateOrUpdateAlertRuleResponseBodyAlertRuleFilters = CreateOrUpdateAlertRuleResponseBodyAlertRuleFilters;
class CreateOrUpdateAlertRuleResponseBodyAlertRuleLabels extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'Name',
            value: 'Value',
        };
    }
    static types() {
        return {
            name: 'string',
            value: 'string',
        };
    }
}
exports.CreateOrUpdateAlertRuleResponseBodyAlertRuleLabels = CreateOrUpdateAlertRuleResponseBodyAlertRuleLabels;
class CreateOrUpdateAlertRuleResponseBodyAlertRule extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alertCheckType: 'AlertCheckType',
            alertGroup: 'AlertGroup',
            alertId: 'AlertId',
            alertName: 'AlertName',
            alertRuleContent: 'AlertRuleContent',
            alertStatus: 'AlertStatus',
            alertType: 'AlertType',
            annotations: 'Annotations',
            autoAddNewApplication: 'AutoAddNewApplication',
            clusterId: 'ClusterId',
            createdTime: 'CreatedTime',
            duration: 'Duration',
            extend: 'Extend',
            filters: 'Filters',
            labels: 'Labels',
            level: 'Level',
            message: 'Message',
            metricsType: 'MetricsType',
            notifyStrategy: 'NotifyStrategy',
            pids: 'Pids',
            promQL: 'PromQL',
            regionId: 'RegionId',
            updatedTime: 'UpdatedTime',
            userId: 'UserId',
        };
    }
    static types() {
        return {
            alertCheckType: 'string',
            alertGroup: 'number',
            alertId: 'number',
            alertName: 'string',
            alertRuleContent: CreateOrUpdateAlertRuleResponseBodyAlertRuleAlertRuleContent,
            alertStatus: 'string',
            alertType: 'string',
            annotations: { 'type': 'array', 'itemType': CreateOrUpdateAlertRuleResponseBodyAlertRuleAnnotations },
            autoAddNewApplication: 'boolean',
            clusterId: 'string',
            createdTime: 'number',
            duration: 'string',
            extend: 'string',
            filters: CreateOrUpdateAlertRuleResponseBodyAlertRuleFilters,
            labels: { 'type': 'array', 'itemType': CreateOrUpdateAlertRuleResponseBodyAlertRuleLabels },
            level: 'string',
            message: 'string',
            metricsType: 'string',
            notifyStrategy: 'string',
            pids: { 'type': 'array', 'itemType': 'string' },
            promQL: 'string',
            regionId: 'string',
            updatedTime: 'number',
            userId: 'string',
        };
    }
}
exports.CreateOrUpdateAlertRuleResponseBodyAlertRule = CreateOrUpdateAlertRuleResponseBodyAlertRule;
class CreateOrUpdateContactResponseBodyAlertContact extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            contactId: 'ContactId',
            contactName: 'ContactName',
            email: 'Email',
            isVerify: 'IsVerify',
            phone: 'Phone',
            reissueSendNotice: 'ReissueSendNotice',
        };
    }
    static types() {
        return {
            contactId: 'number',
            contactName: 'string',
            email: 'string',
            isVerify: 'boolean',
            phone: 'string',
            reissueSendNotice: 'number',
        };
    }
}
exports.CreateOrUpdateContactResponseBodyAlertContact = CreateOrUpdateContactResponseBodyAlertContact;
class CreateOrUpdateContactGroupResponseBodyAlertContactGroup extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            contactGroupId: 'ContactGroupId',
            contactGroupName: 'ContactGroupName',
            contactIds: 'ContactIds',
        };
    }
    static types() {
        return {
            contactGroupId: 'number',
            contactGroupName: 'string',
            contactIds: 'string',
        };
    }
}
exports.CreateOrUpdateContactGroupResponseBodyAlertContactGroup = CreateOrUpdateContactGroupResponseBodyAlertContactGroup;
class CreateOrUpdateEventBridgeIntegrationResponseBodyEventBridgeIntegration extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessKey: 'AccessKey',
            accessSecret: 'AccessSecret',
            description: 'Description',
            endpoint: 'Endpoint',
            eventBusName: 'EventBusName',
            eventBusRegionId: 'EventBusRegionId',
            id: 'Id',
            name: 'Name',
            source: 'Source',
        };
    }
    static types() {
        return {
            accessKey: 'string',
            accessSecret: 'string',
            description: 'string',
            endpoint: 'string',
            eventBusName: 'string',
            eventBusRegionId: 'string',
            id: 'number',
            name: 'string',
            source: 'string',
        };
    }
}
exports.CreateOrUpdateEventBridgeIntegrationResponseBodyEventBridgeIntegration = CreateOrUpdateEventBridgeIntegrationResponseBodyEventBridgeIntegration;
class CreateOrUpdateIMRobotResponseBodyAlertRobot extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cardTemplate: 'CardTemplate',
            dailyNoc: 'DailyNoc',
            dailyNocTime: 'DailyNocTime',
            enableOutgoing: 'EnableOutgoing',
            robotAddress: 'RobotAddress',
            robotId: 'RobotId',
            robotName: 'RobotName',
            token: 'Token',
            type: 'Type',
        };
    }
    static types() {
        return {
            cardTemplate: 'string',
            dailyNoc: 'boolean',
            dailyNocTime: 'string',
            enableOutgoing: 'boolean',
            robotAddress: 'string',
            robotId: 'number',
            robotName: 'string',
            token: 'string',
            type: 'string',
        };
    }
}
exports.CreateOrUpdateIMRobotResponseBodyAlertRobot = CreateOrUpdateIMRobotResponseBodyAlertRobot;
class CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyGroupRule extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupInterval: 'GroupInterval',
            groupWait: 'GroupWait',
            groupingFields: 'GroupingFields',
        };
    }
    static types() {
        return {
            groupInterval: 'number',
            groupWait: 'number',
            groupingFields: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyGroupRule = CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyGroupRule;
class CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyMatchingRulesMatchingConditions extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            key: 'Key',
            operator: 'Operator',
            value: 'Value',
        };
    }
    static types() {
        return {
            key: 'string',
            operator: 'string',
            value: 'string',
        };
    }
}
exports.CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyMatchingRulesMatchingConditions = CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyMatchingRulesMatchingConditions;
class CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyMatchingRules extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            matchingConditions: 'MatchingConditions',
        };
    }
    static types() {
        return {
            matchingConditions: { 'type': 'array', 'itemType': CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyMatchingRulesMatchingConditions },
        };
    }
}
exports.CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyMatchingRules = CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyMatchingRules;
class CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyRuleNotifyObjects extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            notifyObjectId: 'NotifyObjectId',
            notifyObjectName: 'NotifyObjectName',
            notifyObjectType: 'NotifyObjectType',
        };
    }
    static types() {
        return {
            notifyObjectId: 'number',
            notifyObjectName: 'string',
            notifyObjectType: 'string',
        };
    }
}
exports.CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyRuleNotifyObjects = CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyRuleNotifyObjects;
class CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyRule extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            notifyChannels: 'NotifyChannels',
            notifyEndTime: 'NotifyEndTime',
            notifyObjects: 'NotifyObjects',
            notifyStartTime: 'NotifyStartTime',
        };
    }
    static types() {
        return {
            notifyChannels: { 'type': 'array', 'itemType': 'string' },
            notifyEndTime: 'string',
            notifyObjects: { 'type': 'array', 'itemType': CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyRuleNotifyObjects },
            notifyStartTime: 'string',
        };
    }
}
exports.CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyRule = CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyRule;
class CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyTemplate extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            emailContent: 'EmailContent',
            emailRecoverContent: 'EmailRecoverContent',
            emailRecoverTitle: 'EmailRecoverTitle',
            emailTitle: 'EmailTitle',
            robotContent: 'RobotContent',
            smsContent: 'SmsContent',
            smsRecoverContent: 'SmsRecoverContent',
            ttsContent: 'TtsContent',
            ttsRecoverContent: 'TtsRecoverContent',
        };
    }
    static types() {
        return {
            emailContent: 'string',
            emailRecoverContent: 'string',
            emailRecoverTitle: 'string',
            emailTitle: 'string',
            robotContent: 'string',
            smsContent: 'string',
            smsRecoverContent: 'string',
            ttsContent: 'string',
            ttsRecoverContent: 'string',
        };
    }
}
exports.CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyTemplate = CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyTemplate;
class CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicy extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            escalationPolicyId: 'EscalationPolicyId',
            groupRule: 'GroupRule',
            id: 'Id',
            integrationId: 'IntegrationId',
            matchingRules: 'MatchingRules',
            name: 'Name',
            notifyRule: 'NotifyRule',
            notifyTemplate: 'NotifyTemplate',
            repeat: 'Repeat',
            repeatInterval: 'RepeatInterval',
            sendRecoverMessage: 'SendRecoverMessage',
        };
    }
    static types() {
        return {
            escalationPolicyId: 'number',
            groupRule: CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyGroupRule,
            id: 'number',
            integrationId: 'number',
            matchingRules: { 'type': 'array', 'itemType': CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyMatchingRules },
            name: 'string',
            notifyRule: CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyRule,
            notifyTemplate: CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyTemplate,
            repeat: 'boolean',
            repeatInterval: 'number',
            sendRecoverMessage: 'boolean',
        };
    }
}
exports.CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicy = CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicy;
class CreateOrUpdateSilencePolicyResponseBodySilencePolicyMatchingRulesMatchingConditions extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            key: 'Key',
            operator: 'Operator',
            value: 'Value',
        };
    }
    static types() {
        return {
            key: 'string',
            operator: 'string',
            value: 'string',
        };
    }
}
exports.CreateOrUpdateSilencePolicyResponseBodySilencePolicyMatchingRulesMatchingConditions = CreateOrUpdateSilencePolicyResponseBodySilencePolicyMatchingRulesMatchingConditions;
class CreateOrUpdateSilencePolicyResponseBodySilencePolicyMatchingRules extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            matchingConditions: 'MatchingConditions',
        };
    }
    static types() {
        return {
            matchingConditions: { 'type': 'array', 'itemType': CreateOrUpdateSilencePolicyResponseBodySilencePolicyMatchingRulesMatchingConditions },
        };
    }
}
exports.CreateOrUpdateSilencePolicyResponseBodySilencePolicyMatchingRules = CreateOrUpdateSilencePolicyResponseBodySilencePolicyMatchingRules;
class CreateOrUpdateSilencePolicyResponseBodySilencePolicy extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'Id',
            matchingRules: 'MatchingRules',
            name: 'Name',
        };
    }
    static types() {
        return {
            id: 'number',
            matchingRules: { 'type': 'array', 'itemType': CreateOrUpdateSilencePolicyResponseBodySilencePolicyMatchingRules },
            name: 'string',
        };
    }
}
exports.CreateOrUpdateSilencePolicyResponseBodySilencePolicy = CreateOrUpdateSilencePolicyResponseBodySilencePolicy;
class CreateOrUpdateWebhookContactResponseBodyWebhookContactWebhook extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizHeaders: 'BizHeaders',
            bizParams: 'BizParams',
            body: 'Body',
            method: 'Method',
            recoverBody: 'RecoverBody',
            url: 'Url',
        };
    }
    static types() {
        return {
            bizHeaders: 'string',
            bizParams: 'string',
            body: 'string',
            method: 'string',
            recoverBody: 'string',
            url: 'string',
        };
    }
}
exports.CreateOrUpdateWebhookContactResponseBodyWebhookContactWebhook = CreateOrUpdateWebhookContactResponseBodyWebhookContactWebhook;
class CreateOrUpdateWebhookContactResponseBodyWebhookContact extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            webhook: 'Webhook',
            webhookId: 'WebhookId',
            webhookName: 'WebhookName',
        };
    }
    static types() {
        return {
            webhook: CreateOrUpdateWebhookContactResponseBodyWebhookContactWebhook,
            webhookId: 'number',
            webhookName: 'string',
        };
    }
}
exports.CreateOrUpdateWebhookContactResponseBodyWebhookContact = CreateOrUpdateWebhookContactResponseBodyWebhookContact;
class CreatePrometheusAlertRuleResponseBodyPrometheusAlertRuleAnnotations extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'Name',
            value: 'Value',
        };
    }
    static types() {
        return {
            name: 'string',
            value: 'string',
        };
    }
}
exports.CreatePrometheusAlertRuleResponseBodyPrometheusAlertRuleAnnotations = CreatePrometheusAlertRuleResponseBodyPrometheusAlertRuleAnnotations;
class CreatePrometheusAlertRuleResponseBodyPrometheusAlertRuleLabels extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'Name',
            value: 'Value',
        };
    }
    static types() {
        return {
            name: 'string',
            value: 'string',
        };
    }
}
exports.CreatePrometheusAlertRuleResponseBodyPrometheusAlertRuleLabels = CreatePrometheusAlertRuleResponseBodyPrometheusAlertRuleLabels;
class CreatePrometheusAlertRuleResponseBodyPrometheusAlertRule extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alertId: 'AlertId',
            alertName: 'AlertName',
            annotations: 'Annotations',
            clusterId: 'ClusterId',
            dispatchRuleId: 'DispatchRuleId',
            duration: 'Duration',
            expression: 'Expression',
            labels: 'Labels',
            message: 'Message',
            notifyType: 'NotifyType',
            status: 'Status',
            type: 'Type',
        };
    }
    static types() {
        return {
            alertId: 'number',
            alertName: 'string',
            annotations: { 'type': 'array', 'itemType': CreatePrometheusAlertRuleResponseBodyPrometheusAlertRuleAnnotations },
            clusterId: 'string',
            dispatchRuleId: 'number',
            duration: 'string',
            expression: 'string',
            labels: { 'type': 'array', 'itemType': CreatePrometheusAlertRuleResponseBodyPrometheusAlertRuleLabels },
            message: 'string',
            notifyType: 'string',
            status: 'number',
            type: 'string',
        };
    }
}
exports.CreatePrometheusAlertRuleResponseBodyPrometheusAlertRule = CreatePrometheusAlertRuleResponseBodyPrometheusAlertRule;
class CreateRetcodeAppResponseBodyRetcodeAppDataBean extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            pid: 'Pid',
        };
    }
    static types() {
        return {
            appId: 'number',
            pid: 'string',
        };
    }
}
exports.CreateRetcodeAppResponseBodyRetcodeAppDataBean = CreateRetcodeAppResponseBodyRetcodeAppDataBean;
class CreateSyntheticTaskRequestCommonParamAlertList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            isCritical: 'IsCritical',
            name: 'Name',
            symbols: 'Symbols',
        };
    }
    static types() {
        return {
            isCritical: 'number',
            name: 'string',
            symbols: 'number',
        };
    }
}
exports.CreateSyntheticTaskRequestCommonParamAlertList = CreateSyntheticTaskRequestCommonParamAlertList;
class CreateSyntheticTaskRequestCommonParam extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alarmFlag: 'AlarmFlag',
            alertList: 'AlertList',
            alertNotifierId: 'AlertNotifierId',
            alertPolicyId: 'AlertPolicyId',
            monitorSamples: 'MonitorSamples',
            startExecutionTime: 'StartExecutionTime',
        };
    }
    static types() {
        return {
            alarmFlag: 'string',
            alertList: { 'type': 'array', 'itemType': CreateSyntheticTaskRequestCommonParamAlertList },
            alertNotifierId: 'string',
            alertPolicyId: 'string',
            monitorSamples: 'number',
            startExecutionTime: 'number',
        };
    }
}
exports.CreateSyntheticTaskRequestCommonParam = CreateSyntheticTaskRequestCommonParam;
class CreateSyntheticTaskRequestDownload extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            connectionTimeout: 'ConnectionTimeout',
            downloadCustomHeaderContent: 'DownloadCustomHeaderContent',
            downloadCustomHost: 'DownloadCustomHost',
            downloadCustomHostIp: 'DownloadCustomHostIp',
            downloadIgnoreCertificateError: 'DownloadIgnoreCertificateError',
            downloadKernel: 'DownloadKernel',
            downloadRedirection: 'DownloadRedirection',
            downloadTransmissionSize: 'DownloadTransmissionSize',
            monitorTimeout: 'MonitorTimeout',
            quickProtocol: 'QuickProtocol',
            validateKeywords: 'ValidateKeywords',
            verifyWay: 'VerifyWay',
            whiteList: 'WhiteList',
        };
    }
    static types() {
        return {
            connectionTimeout: 'number',
            downloadCustomHeaderContent: 'string',
            downloadCustomHost: 'number',
            downloadCustomHostIp: 'string',
            downloadIgnoreCertificateError: 'string',
            downloadKernel: 'number',
            downloadRedirection: 'number',
            downloadTransmissionSize: 'number',
            monitorTimeout: 'number',
            quickProtocol: 'string',
            validateKeywords: 'string',
            verifyWay: 'number',
            whiteList: 'string',
        };
    }
}
exports.CreateSyntheticTaskRequestDownload = CreateSyntheticTaskRequestDownload;
class CreateSyntheticTaskRequestExtendInterval extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            days: 'Days',
            endHour: 'EndHour',
            endMinute: 'EndMinute',
            endTime: 'EndTime',
            startHour: 'StartHour',
            startMinute: 'StartMinute',
            startTime: 'StartTime',
        };
    }
    static types() {
        return {
            days: { 'type': 'array', 'itemType': 'number' },
            endHour: 'number',
            endMinute: 'number',
            endTime: 'string',
            startHour: 'number',
            startMinute: 'number',
            startTime: 'string',
        };
    }
}
exports.CreateSyntheticTaskRequestExtendInterval = CreateSyntheticTaskRequestExtendInterval;
class CreateSyntheticTaskRequestMonitorList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cityCode: 'CityCode',
            monitorType: 'MonitorType',
            netServiceId: 'NetServiceId',
        };
    }
    static types() {
        return {
            cityCode: 'number',
            monitorType: 'number',
            netServiceId: 'number',
        };
    }
}
exports.CreateSyntheticTaskRequestMonitorList = CreateSyntheticTaskRequestMonitorList;
class CreateSyntheticTaskRequestNavigation extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            DNSHijackWhiteList: 'DNSHijackWhiteList',
            elementBlacklist: 'ElementBlacklist',
            executeActiveX: 'ExecuteActiveX',
            executeApplication: 'ExecuteApplication',
            executeScript: 'ExecuteScript',
            filterInvalidIP: 'FilterInvalidIP',
            flowHijackJumpTimes: 'FlowHijackJumpTimes',
            flowHijackLogo: 'FlowHijackLogo',
            monitorTimeout: 'MonitorTimeout',
            navAutomaticScrolling: 'NavAutomaticScrolling',
            navCustomHeader: 'NavCustomHeader',
            navCustomHeaderContent: 'NavCustomHeaderContent',
            navCustomHost: 'NavCustomHost',
            navCustomHostIp: 'NavCustomHostIp',
            navDisableCache: 'NavDisableCache',
            navDisableCompression: 'NavDisableCompression',
            navIgnoreCertificateError: 'NavIgnoreCertificateError',
            navRedirection: 'NavRedirection',
            navReturnElement: 'NavReturnElement',
            pageTamper: 'PageTamper',
            processName: 'ProcessName',
            QUICDomain: 'QUICDomain',
            QUICVersion: 'QUICVersion',
            requestHeader: 'RequestHeader',
            responseHeader: 'ResponseHeader',
            slowElementThreshold: 'SlowElementThreshold',
            verifyStringBlacklist: 'VerifyStringBlacklist',
            verifyStringWhiteList: 'VerifyStringWhiteList',
            waitCompletionTime: 'WaitCompletionTime',
        };
    }
    static types() {
        return {
            DNSHijackWhiteList: 'string',
            elementBlacklist: 'string',
            executeActiveX: 'number',
            executeApplication: 'number',
            executeScript: 'number',
            filterInvalidIP: 'number',
            flowHijackJumpTimes: 'number',
            flowHijackLogo: 'string',
            monitorTimeout: 'string',
            navAutomaticScrolling: 'string',
            navCustomHeader: 'string',
            navCustomHeaderContent: 'string',
            navCustomHost: 'number',
            navCustomHostIp: 'string',
            navDisableCache: 'number',
            navDisableCompression: 'string',
            navIgnoreCertificateError: 'number',
            navRedirection: 'number',
            navReturnElement: 'number',
            pageTamper: 'string',
            processName: 'string',
            QUICDomain: 'string',
            QUICVersion: 'number',
            requestHeader: 'number',
            responseHeader: 'number',
            slowElementThreshold: 'number',
            verifyStringBlacklist: 'string',
            verifyStringWhiteList: 'string',
            waitCompletionTime: 'number',
        };
    }
}
exports.CreateSyntheticTaskRequestNavigation = CreateSyntheticTaskRequestNavigation;
class CreateSyntheticTaskRequestNet extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            netDNSNs: 'NetDNSNs',
            netDNSQueryMethod: 'NetDNSQueryMethod',
            netDNSServer: 'NetDNSServer',
            netDNSSwitch: 'NetDNSSwitch',
            netDNSTimeout: 'NetDNSTimeout',
            netDigSwitch: 'NetDigSwitch',
            netICMPActive: 'NetICMPActive',
            netICMPDataCut: 'NetICMPDataCut',
            netICMPInterval: 'NetICMPInterval',
            netICMPNum: 'NetICMPNum',
            netICMPSize: 'NetICMPSize',
            netICMPSwitch: 'NetICMPSwitch',
            netICMPTimeout: 'NetICMPTimeout',
            netTraceRouteNum: 'NetTraceRouteNum',
            netTraceRouteSwitch: 'NetTraceRouteSwitch',
            netTraceRouteTimeout: 'NetTraceRouteTimeout',
            whiteList: 'WhiteList',
        };
    }
    static types() {
        return {
            netDNSNs: 'string',
            netDNSQueryMethod: 'number',
            netDNSServer: 'number',
            netDNSSwitch: 'number',
            netDNSTimeout: 'number',
            netDigSwitch: 'number',
            netICMPActive: 'number',
            netICMPDataCut: 'number',
            netICMPInterval: 'number',
            netICMPNum: 'number',
            netICMPSize: 'number',
            netICMPSwitch: 'number',
            netICMPTimeout: 'number',
            netTraceRouteNum: 'number',
            netTraceRouteSwitch: 'number',
            netTraceRouteTimeout: 'number',
            whiteList: 'string',
        };
    }
}
exports.CreateSyntheticTaskRequestNet = CreateSyntheticTaskRequestNet;
class CreateSyntheticTaskRequestProtocolRequestContentBodyFormData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            key: 'Key',
            value: 'Value',
        };
    }
    static types() {
        return {
            key: 'string',
            value: 'string',
        };
    }
}
exports.CreateSyntheticTaskRequestProtocolRequestContentBodyFormData = CreateSyntheticTaskRequestProtocolRequestContentBodyFormData;
class CreateSyntheticTaskRequestProtocolRequestContentBodyUrlEncoding extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            key: 'Key',
            value: 'Value',
        };
    }
    static types() {
        return {
            key: 'string',
            value: 'string',
        };
    }
}
exports.CreateSyntheticTaskRequestProtocolRequestContentBodyUrlEncoding = CreateSyntheticTaskRequestProtocolRequestContentBodyUrlEncoding;
class CreateSyntheticTaskRequestProtocolRequestContentBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            formData: 'FormData',
            language: 'Language',
            mode: 'Mode',
            raw: 'Raw',
            urlEncoding: 'UrlEncoding',
        };
    }
    static types() {
        return {
            formData: { 'type': 'array', 'itemType': CreateSyntheticTaskRequestProtocolRequestContentBodyFormData },
            language: 'string',
            mode: 'string',
            raw: 'string',
            urlEncoding: { 'type': 'array', 'itemType': CreateSyntheticTaskRequestProtocolRequestContentBodyUrlEncoding },
        };
    }
}
exports.CreateSyntheticTaskRequestProtocolRequestContentBody = CreateSyntheticTaskRequestProtocolRequestContentBody;
class CreateSyntheticTaskRequestProtocolRequestContentHeader extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            key: 'Key',
            value: 'Value',
        };
    }
    static types() {
        return {
            key: 'string',
            value: 'string',
        };
    }
}
exports.CreateSyntheticTaskRequestProtocolRequestContentHeader = CreateSyntheticTaskRequestProtocolRequestContentHeader;
class CreateSyntheticTaskRequestProtocolRequestContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            body: 'Body',
            header: 'Header',
            method: 'Method',
        };
    }
    static types() {
        return {
            body: CreateSyntheticTaskRequestProtocolRequestContentBody,
            header: { 'type': 'array', 'itemType': CreateSyntheticTaskRequestProtocolRequestContentHeader },
            method: 'string',
        };
    }
}
exports.CreateSyntheticTaskRequestProtocolRequestContent = CreateSyntheticTaskRequestProtocolRequestContent;
class CreateSyntheticTaskRequestProtocol extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            characterEncoding: 'CharacterEncoding',
            customHost: 'CustomHost',
            customHostIp: 'CustomHostIp',
            protocolConnectionTime: 'ProtocolConnectionTime',
            protocolMonitorTimeout: 'ProtocolMonitorTimeout',
            receivedDataSize: 'ReceivedDataSize',
            requestContent: 'RequestContent',
            verifyContent: 'VerifyContent',
            verifyWay: 'VerifyWay',
        };
    }
    static types() {
        return {
            characterEncoding: 'number',
            customHost: 'number',
            customHostIp: 'string',
            protocolConnectionTime: 'number',
            protocolMonitorTimeout: 'string',
            receivedDataSize: 'number',
            requestContent: CreateSyntheticTaskRequestProtocolRequestContent,
            verifyContent: 'string',
            verifyWay: 'number',
        };
    }
}
exports.CreateSyntheticTaskRequestProtocol = CreateSyntheticTaskRequestProtocol;
class CreateSyntheticTaskResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            taskId: 'TaskId',
        };
    }
    static types() {
        return {
            taskId: 'number',
        };
    }
}
exports.CreateSyntheticTaskResponseBodyData = CreateSyntheticTaskResponseBodyData;
class DescribeContactGroupsResponseBodyPageBeanAlertContactGroupsContacts extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            contactId: 'ContactId',
            contactName: 'ContactName',
            email: 'Email',
            phone: 'Phone',
        };
    }
    static types() {
        return {
            contactId: 'number',
            contactName: 'string',
            email: 'string',
            phone: 'string',
        };
    }
}
exports.DescribeContactGroupsResponseBodyPageBeanAlertContactGroupsContacts = DescribeContactGroupsResponseBodyPageBeanAlertContactGroupsContacts;
class DescribeContactGroupsResponseBodyPageBeanAlertContactGroups extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            contactGroupId: 'ContactGroupId',
            contactGroupName: 'ContactGroupName',
            contacts: 'Contacts',
        };
    }
    static types() {
        return {
            contactGroupId: 'number',
            contactGroupName: 'string',
            contacts: { 'type': 'array', 'itemType': DescribeContactGroupsResponseBodyPageBeanAlertContactGroupsContacts },
        };
    }
}
exports.DescribeContactGroupsResponseBodyPageBeanAlertContactGroups = DescribeContactGroupsResponseBodyPageBeanAlertContactGroups;
class DescribeContactGroupsResponseBodyPageBean extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alertContactGroups: 'AlertContactGroups',
            page: 'Page',
            size: 'Size',
            total: 'Total',
        };
    }
    static types() {
        return {
            alertContactGroups: { 'type': 'array', 'itemType': DescribeContactGroupsResponseBodyPageBeanAlertContactGroups },
            page: 'number',
            size: 'number',
            total: 'number',
        };
    }
}
exports.DescribeContactGroupsResponseBodyPageBean = DescribeContactGroupsResponseBodyPageBean;
class DescribeContactsResponseBodyPageBeanAlertContacts extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            contactId: 'ContactId',
            contactName: 'ContactName',
            email: 'Email',
            isVerify: 'IsVerify',
            phone: 'Phone',
            reissueSendNotice: 'ReissueSendNotice',
        };
    }
    static types() {
        return {
            contactId: 'number',
            contactName: 'string',
            email: 'string',
            isVerify: 'boolean',
            phone: 'string',
            reissueSendNotice: 'number',
        };
    }
}
exports.DescribeContactsResponseBodyPageBeanAlertContacts = DescribeContactsResponseBodyPageBeanAlertContacts;
class DescribeContactsResponseBodyPageBean extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alertContacts: 'AlertContacts',
            page: 'Page',
            size: 'Size',
            total: 'Total',
        };
    }
    static types() {
        return {
            alertContacts: { 'type': 'array', 'itemType': DescribeContactsResponseBodyPageBeanAlertContacts },
            page: 'number',
            size: 'number',
            total: 'number',
        };
    }
}
exports.DescribeContactsResponseBodyPageBean = DescribeContactsResponseBodyPageBean;
class DescribeDispatchRuleResponseBodyDispatchRuleGroupRules extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupId: 'GroupId',
            groupInterval: 'GroupInterval',
            groupWaitTime: 'GroupWaitTime',
            groupingFields: 'GroupingFields',
            repeatInterval: 'RepeatInterval',
        };
    }
    static types() {
        return {
            groupId: 'number',
            groupInterval: 'number',
            groupWaitTime: 'number',
            groupingFields: { 'type': 'array', 'itemType': 'string' },
            repeatInterval: 'number',
        };
    }
}
exports.DescribeDispatchRuleResponseBodyDispatchRuleGroupRules = DescribeDispatchRuleResponseBodyDispatchRuleGroupRules;
class DescribeDispatchRuleResponseBodyDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupsLabelMatchExpressions extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            key: 'Key',
            operator: 'Operator',
            value: 'Value',
        };
    }
    static types() {
        return {
            key: 'string',
            operator: 'string',
            value: 'string',
        };
    }
}
exports.DescribeDispatchRuleResponseBodyDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupsLabelMatchExpressions = DescribeDispatchRuleResponseBodyDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupsLabelMatchExpressions;
class DescribeDispatchRuleResponseBodyDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroups extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            labelMatchExpressions: 'LabelMatchExpressions',
        };
    }
    static types() {
        return {
            labelMatchExpressions: { 'type': 'array', 'itemType': DescribeDispatchRuleResponseBodyDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupsLabelMatchExpressions },
        };
    }
}
exports.DescribeDispatchRuleResponseBodyDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroups = DescribeDispatchRuleResponseBodyDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroups;
class DescribeDispatchRuleResponseBodyDispatchRuleLabelMatchExpressionGrid extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            labelMatchExpressionGroups: 'LabelMatchExpressionGroups',
        };
    }
    static types() {
        return {
            labelMatchExpressionGroups: { 'type': 'array', 'itemType': DescribeDispatchRuleResponseBodyDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroups },
        };
    }
}
exports.DescribeDispatchRuleResponseBodyDispatchRuleLabelMatchExpressionGrid = DescribeDispatchRuleResponseBodyDispatchRuleLabelMatchExpressionGrid;
class DescribeDispatchRuleResponseBodyDispatchRuleNotifyRulesNotifyObjects extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'Name',
            notifyObjectId: 'NotifyObjectId',
            notifyType: 'NotifyType',
        };
    }
    static types() {
        return {
            name: 'string',
            notifyObjectId: 'string',
            notifyType: 'string',
        };
    }
}
exports.DescribeDispatchRuleResponseBodyDispatchRuleNotifyRulesNotifyObjects = DescribeDispatchRuleResponseBodyDispatchRuleNotifyRulesNotifyObjects;
class DescribeDispatchRuleResponseBodyDispatchRuleNotifyRules extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            notifyChannels: 'NotifyChannels',
            notifyObjects: 'NotifyObjects',
        };
    }
    static types() {
        return {
            notifyChannels: { 'type': 'array', 'itemType': 'string' },
            notifyObjects: { 'type': 'array', 'itemType': DescribeDispatchRuleResponseBodyDispatchRuleNotifyRulesNotifyObjects },
        };
    }
}
exports.DescribeDispatchRuleResponseBodyDispatchRuleNotifyRules = DescribeDispatchRuleResponseBodyDispatchRuleNotifyRules;
class DescribeDispatchRuleResponseBodyDispatchRule extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dispatchType: 'DispatchType',
            groupRules: 'GroupRules',
            isRecover: 'IsRecover',
            labelMatchExpressionGrid: 'LabelMatchExpressionGrid',
            name: 'Name',
            notifyRules: 'NotifyRules',
            ruleId: 'RuleId',
            state: 'State',
        };
    }
    static types() {
        return {
            dispatchType: 'string',
            groupRules: { 'type': 'array', 'itemType': DescribeDispatchRuleResponseBodyDispatchRuleGroupRules },
            isRecover: 'boolean',
            labelMatchExpressionGrid: DescribeDispatchRuleResponseBodyDispatchRuleLabelMatchExpressionGrid,
            name: 'string',
            notifyRules: { 'type': 'array', 'itemType': DescribeDispatchRuleResponseBodyDispatchRuleNotifyRules },
            ruleId: 'number',
            state: 'string',
        };
    }
}
exports.DescribeDispatchRuleResponseBodyDispatchRule = DescribeDispatchRuleResponseBodyDispatchRule;
class DescribeIMRobotsResponseBodyPageBeanAlertIMRobots extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dailyNoc: 'DailyNoc',
            dailyNocTime: 'DailyNocTime',
            dingSignKey: 'DingSignKey',
            robotAddr: 'RobotAddr',
            robotId: 'RobotId',
            robotName: 'RobotName',
            type: 'Type',
        };
    }
    static types() {
        return {
            dailyNoc: 'boolean',
            dailyNocTime: 'string',
            dingSignKey: 'string',
            robotAddr: 'string',
            robotId: 'number',
            robotName: 'string',
            type: 'string',
        };
    }
}
exports.DescribeIMRobotsResponseBodyPageBeanAlertIMRobots = DescribeIMRobotsResponseBodyPageBeanAlertIMRobots;
class DescribeIMRobotsResponseBodyPageBean extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alertIMRobots: 'AlertIMRobots',
            page: 'Page',
            size: 'Size',
            total: 'Total',
        };
    }
    static types() {
        return {
            alertIMRobots: { 'type': 'array', 'itemType': DescribeIMRobotsResponseBodyPageBeanAlertIMRobots },
            page: 'number',
            size: 'number',
            total: 'number',
        };
    }
}
exports.DescribeIMRobotsResponseBodyPageBean = DescribeIMRobotsResponseBodyPageBean;
class DescribePrometheusAlertRuleResponseBodyPrometheusAlertRuleAnnotations extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'Name',
            value: 'Value',
        };
    }
    static types() {
        return {
            name: 'string',
            value: 'string',
        };
    }
}
exports.DescribePrometheusAlertRuleResponseBodyPrometheusAlertRuleAnnotations = DescribePrometheusAlertRuleResponseBodyPrometheusAlertRuleAnnotations;
class DescribePrometheusAlertRuleResponseBodyPrometheusAlertRuleLabels extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'Name',
            value: 'Value',
        };
    }
    static types() {
        return {
            name: 'string',
            value: 'string',
        };
    }
}
exports.DescribePrometheusAlertRuleResponseBodyPrometheusAlertRuleLabels = DescribePrometheusAlertRuleResponseBodyPrometheusAlertRuleLabels;
class DescribePrometheusAlertRuleResponseBodyPrometheusAlertRule extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alertId: 'AlertId',
            alertName: 'AlertName',
            annotations: 'Annotations',
            clusterId: 'ClusterId',
            dispatchRuleId: 'DispatchRuleId',
            duration: 'Duration',
            expression: 'Expression',
            labels: 'Labels',
            message: 'Message',
            notifyType: 'NotifyType',
            status: 'Status',
            type: 'Type',
        };
    }
    static types() {
        return {
            alertId: 'number',
            alertName: 'string',
            annotations: { 'type': 'array', 'itemType': DescribePrometheusAlertRuleResponseBodyPrometheusAlertRuleAnnotations },
            clusterId: 'string',
            dispatchRuleId: 'number',
            duration: 'string',
            expression: 'string',
            labels: { 'type': 'array', 'itemType': DescribePrometheusAlertRuleResponseBodyPrometheusAlertRuleLabels },
            message: 'string',
            notifyType: 'string',
            status: 'number',
            type: 'string',
        };
    }
}
exports.DescribePrometheusAlertRuleResponseBodyPrometheusAlertRule = DescribePrometheusAlertRuleResponseBodyPrometheusAlertRule;
class DescribeWebhookContactsResponseBodyPageBeanWebhookContactsWebhook extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizHeaders: 'BizHeaders',
            bizParams: 'BizParams',
            body: 'Body',
            method: 'Method',
            recoverBody: 'RecoverBody',
            url: 'Url',
        };
    }
    static types() {
        return {
            bizHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            bizParams: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            body: 'string',
            method: 'string',
            recoverBody: 'string',
            url: 'string',
        };
    }
}
exports.DescribeWebhookContactsResponseBodyPageBeanWebhookContactsWebhook = DescribeWebhookContactsResponseBodyPageBeanWebhookContactsWebhook;
class DescribeWebhookContactsResponseBodyPageBeanWebhookContacts extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            webhook: 'Webhook',
            webhookId: 'WebhookId',
            webhookName: 'WebhookName',
        };
    }
    static types() {
        return {
            webhook: DescribeWebhookContactsResponseBodyPageBeanWebhookContactsWebhook,
            webhookId: 'number',
            webhookName: 'string',
        };
    }
}
exports.DescribeWebhookContactsResponseBodyPageBeanWebhookContacts = DescribeWebhookContactsResponseBodyPageBeanWebhookContacts;
class DescribeWebhookContactsResponseBodyPageBean extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            page: 'Page',
            size: 'Size',
            total: 'Total',
            webhookContacts: 'WebhookContacts',
        };
    }
    static types() {
        return {
            page: 'number',
            size: 'number',
            total: 'number',
            webhookContacts: { 'type': 'array', 'itemType': DescribeWebhookContactsResponseBodyPageBeanWebhookContacts },
        };
    }
}
exports.DescribeWebhookContactsResponseBodyPageBean = DescribeWebhookContactsResponseBodyPageBean;
class GetAlertRulesResponseBodyPageBeanAlertRulesAlertRuleContentAlertRuleItems extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            aggregate: 'Aggregate',
            metricKey: 'MetricKey',
            n: 'N',
            operator: 'Operator',
            value: 'Value',
        };
    }
    static types() {
        return {
            aggregate: 'string',
            metricKey: 'string',
            n: 'number',
            operator: 'string',
            value: 'string',
        };
    }
}
exports.GetAlertRulesResponseBodyPageBeanAlertRulesAlertRuleContentAlertRuleItems = GetAlertRulesResponseBodyPageBeanAlertRulesAlertRuleContentAlertRuleItems;
class GetAlertRulesResponseBodyPageBeanAlertRulesAlertRuleContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alertRuleItems: 'AlertRuleItems',
            condition: 'Condition',
        };
    }
    static types() {
        return {
            alertRuleItems: { 'type': 'array', 'itemType': GetAlertRulesResponseBodyPageBeanAlertRulesAlertRuleContentAlertRuleItems },
            condition: 'string',
        };
    }
}
exports.GetAlertRulesResponseBodyPageBeanAlertRulesAlertRuleContent = GetAlertRulesResponseBodyPageBeanAlertRulesAlertRuleContent;
class GetAlertRulesResponseBodyPageBeanAlertRulesAnnotations extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'Name',
            value: 'Value',
        };
    }
    static types() {
        return {
            name: 'string',
            value: 'string',
        };
    }
}
exports.GetAlertRulesResponseBodyPageBeanAlertRulesAnnotations = GetAlertRulesResponseBodyPageBeanAlertRulesAnnotations;
class GetAlertRulesResponseBodyPageBeanAlertRulesFiltersCustomSLSFilters extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            key: 'Key',
            opt: 'Opt',
            show: 'Show',
            t: 'T',
            value: 'Value',
        };
    }
    static types() {
        return {
            key: 'string',
            opt: 'string',
            show: 'boolean',
            t: 'string',
            value: 'string',
        };
    }
}
exports.GetAlertRulesResponseBodyPageBeanAlertRulesFiltersCustomSLSFilters = GetAlertRulesResponseBodyPageBeanAlertRulesFiltersCustomSLSFilters;
class GetAlertRulesResponseBodyPageBeanAlertRulesFiltersDimFilters extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            filterKey: 'FilterKey',
            filterOpt: 'FilterOpt',
            filterValues: 'FilterValues',
        };
    }
    static types() {
        return {
            filterKey: 'string',
            filterOpt: 'string',
            filterValues: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.GetAlertRulesResponseBodyPageBeanAlertRulesFiltersDimFilters = GetAlertRulesResponseBodyPageBeanAlertRulesFiltersDimFilters;
class GetAlertRulesResponseBodyPageBeanAlertRulesFilters extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            customSLSFilters: 'CustomSLSFilters',
            customSLSGroupByDimensions: 'CustomSLSGroupByDimensions',
            customSLSWheres: 'CustomSLSWheres',
            dimFilters: 'DimFilters',
        };
    }
    static types() {
        return {
            customSLSFilters: { 'type': 'array', 'itemType': GetAlertRulesResponseBodyPageBeanAlertRulesFiltersCustomSLSFilters },
            customSLSGroupByDimensions: { 'type': 'array', 'itemType': 'string' },
            customSLSWheres: { 'type': 'array', 'itemType': 'string' },
            dimFilters: { 'type': 'array', 'itemType': GetAlertRulesResponseBodyPageBeanAlertRulesFiltersDimFilters },
        };
    }
}
exports.GetAlertRulesResponseBodyPageBeanAlertRulesFilters = GetAlertRulesResponseBodyPageBeanAlertRulesFilters;
class GetAlertRulesResponseBodyPageBeanAlertRulesLabels extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'Name',
            value: 'Value',
        };
    }
    static types() {
        return {
            name: 'string',
            value: 'string',
        };
    }
}
exports.GetAlertRulesResponseBodyPageBeanAlertRulesLabels = GetAlertRulesResponseBodyPageBeanAlertRulesLabels;
class GetAlertRulesResponseBodyPageBeanAlertRules extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alertCheckType: 'AlertCheckType',
            alertGroup: 'AlertGroup',
            alertId: 'AlertId',
            alertName: 'AlertName',
            alertRuleContent: 'AlertRuleContent',
            alertStatus: 'AlertStatus',
            alertType: 'AlertType',
            annotations: 'Annotations',
            autoAddNewApplication: 'AutoAddNewApplication',
            clusterId: 'ClusterId',
            createdTime: 'CreatedTime',
            duration: 'Duration',
            extend: 'Extend',
            filters: 'Filters',
            labels: 'Labels',
            level: 'Level',
            message: 'Message',
            metricsType: 'MetricsType',
            notifyStrategy: 'NotifyStrategy',
            pids: 'Pids',
            promQL: 'PromQL',
            regionId: 'RegionId',
            updatedTime: 'UpdatedTime',
            userId: 'UserId',
        };
    }
    static types() {
        return {
            alertCheckType: 'string',
            alertGroup: 'number',
            alertId: 'number',
            alertName: 'string',
            alertRuleContent: GetAlertRulesResponseBodyPageBeanAlertRulesAlertRuleContent,
            alertStatus: 'string',
            alertType: 'string',
            annotations: { 'type': 'array', 'itemType': GetAlertRulesResponseBodyPageBeanAlertRulesAnnotations },
            autoAddNewApplication: 'boolean',
            clusterId: 'string',
            createdTime: 'number',
            duration: 'string',
            extend: 'string',
            filters: GetAlertRulesResponseBodyPageBeanAlertRulesFilters,
            labels: { 'type': 'array', 'itemType': GetAlertRulesResponseBodyPageBeanAlertRulesLabels },
            level: 'string',
            message: 'string',
            metricsType: 'string',
            notifyStrategy: 'string',
            pids: { 'type': 'array', 'itemType': 'string' },
            promQL: 'string',
            regionId: 'string',
            updatedTime: 'number',
            userId: 'string',
        };
    }
}
exports.GetAlertRulesResponseBodyPageBeanAlertRules = GetAlertRulesResponseBodyPageBeanAlertRules;
class GetAlertRulesResponseBodyPageBean extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alertRules: 'AlertRules',
            page: 'Page',
            size: 'Size',
            total: 'Total',
        };
    }
    static types() {
        return {
            alertRules: { 'type': 'array', 'itemType': GetAlertRulesResponseBodyPageBeanAlertRules },
            page: 'number',
            size: 'number',
            total: 'number',
        };
    }
}
exports.GetAlertRulesResponseBodyPageBean = GetAlertRulesResponseBodyPageBean;
class GetAppApiByPageResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            items: 'Items',
            page: 'Page',
            pageSize: 'PageSize',
            total: 'Total',
        };
    }
    static types() {
        return {
            items: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            page: 'number',
            pageSize: 'number',
            total: 'string',
        };
    }
}
exports.GetAppApiByPageResponseBodyData = GetAppApiByPageResponseBodyData;
class GetMultipleTraceResponseBodyMultiCallChainInfosSpansLogEventListTagEntryList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            key: 'Key',
            value: 'Value',
        };
    }
    static types() {
        return {
            key: 'string',
            value: 'string',
        };
    }
}
exports.GetMultipleTraceResponseBodyMultiCallChainInfosSpansLogEventListTagEntryList = GetMultipleTraceResponseBodyMultiCallChainInfosSpansLogEventListTagEntryList;
class GetMultipleTraceResponseBodyMultiCallChainInfosSpansLogEventList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            tagEntryList: 'TagEntryList',
            timestamp: 'Timestamp',
        };
    }
    static types() {
        return {
            tagEntryList: { 'type': 'array', 'itemType': GetMultipleTraceResponseBodyMultiCallChainInfosSpansLogEventListTagEntryList },
            timestamp: 'number',
        };
    }
}
exports.GetMultipleTraceResponseBodyMultiCallChainInfosSpansLogEventList = GetMultipleTraceResponseBodyMultiCallChainInfosSpansLogEventList;
class GetMultipleTraceResponseBodyMultiCallChainInfosSpansTagEntryList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            key: 'Key',
            value: 'Value',
        };
    }
    static types() {
        return {
            key: 'string',
            value: 'string',
        };
    }
}
exports.GetMultipleTraceResponseBodyMultiCallChainInfosSpansTagEntryList = GetMultipleTraceResponseBodyMultiCallChainInfosSpansTagEntryList;
class GetMultipleTraceResponseBodyMultiCallChainInfosSpans extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            duration: 'Duration',
            haveStack: 'HaveStack',
            logEventList: 'LogEventList',
            operationName: 'OperationName',
            parentSpanId: 'ParentSpanId',
            resultCode: 'ResultCode',
            rpcId: 'RpcId',
            rpcType: 'RpcType',
            serviceIp: 'ServiceIp',
            serviceName: 'ServiceName',
            spanId: 'SpanId',
            tagEntryList: 'TagEntryList',
            timestamp: 'Timestamp',
            traceID: 'TraceID',
        };
    }
    static types() {
        return {
            duration: 'number',
            haveStack: 'boolean',
            logEventList: { 'type': 'array', 'itemType': GetMultipleTraceResponseBodyMultiCallChainInfosSpansLogEventList },
            operationName: 'string',
            parentSpanId: 'string',
            resultCode: 'string',
            rpcId: 'string',
            rpcType: 'number',
            serviceIp: 'string',
            serviceName: 'string',
            spanId: 'string',
            tagEntryList: { 'type': 'array', 'itemType': GetMultipleTraceResponseBodyMultiCallChainInfosSpansTagEntryList },
            timestamp: 'number',
            traceID: 'string',
        };
    }
}
exports.GetMultipleTraceResponseBodyMultiCallChainInfosSpans = GetMultipleTraceResponseBodyMultiCallChainInfosSpans;
class GetMultipleTraceResponseBodyMultiCallChainInfos extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            spans: 'Spans',
            traceID: 'TraceID',
        };
    }
    static types() {
        return {
            spans: { 'type': 'array', 'itemType': GetMultipleTraceResponseBodyMultiCallChainInfosSpans },
            traceID: 'string',
        };
    }
}
exports.GetMultipleTraceResponseBodyMultiCallChainInfos = GetMultipleTraceResponseBodyMultiCallChainInfos;
class GetOnCallSchedulesDetailResponseBodyDataRenderedFinnalEntriesSimpleContact extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'Id',
            name: 'Name',
        };
    }
    static types() {
        return {
            id: 'number',
            name: 'string',
        };
    }
}
exports.GetOnCallSchedulesDetailResponseBodyDataRenderedFinnalEntriesSimpleContact = GetOnCallSchedulesDetailResponseBodyDataRenderedFinnalEntriesSimpleContact;
class GetOnCallSchedulesDetailResponseBodyDataRenderedFinnalEntries extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            end: 'End',
            simpleContact: 'SimpleContact',
            start: 'Start',
        };
    }
    static types() {
        return {
            end: 'string',
            simpleContact: GetOnCallSchedulesDetailResponseBodyDataRenderedFinnalEntriesSimpleContact,
            start: 'string',
        };
    }
}
exports.GetOnCallSchedulesDetailResponseBodyDataRenderedFinnalEntries = GetOnCallSchedulesDetailResponseBodyDataRenderedFinnalEntries;
class GetOnCallSchedulesDetailResponseBodyDataRenderedLayerEntriesSimpleContact extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'Id',
            name: 'Name',
        };
    }
    static types() {
        return {
            id: 'number',
            name: 'string',
        };
    }
}
exports.GetOnCallSchedulesDetailResponseBodyDataRenderedLayerEntriesSimpleContact = GetOnCallSchedulesDetailResponseBodyDataRenderedLayerEntriesSimpleContact;
class GetOnCallSchedulesDetailResponseBodyDataRenderedLayerEntries extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            start: 'Start',
            end: 'End',
            simpleContact: 'SimpleContact',
        };
    }
    static types() {
        return {
            start: 'string',
            end: 'string',
            simpleContact: GetOnCallSchedulesDetailResponseBodyDataRenderedLayerEntriesSimpleContact,
        };
    }
}
exports.GetOnCallSchedulesDetailResponseBodyDataRenderedLayerEntries = GetOnCallSchedulesDetailResponseBodyDataRenderedLayerEntries;
class GetOnCallSchedulesDetailResponseBodyDataRenderedSubstitudeEntriesSimpleContact extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'Id',
            name: 'Name',
        };
    }
    static types() {
        return {
            id: 'number',
            name: 'string',
        };
    }
}
exports.GetOnCallSchedulesDetailResponseBodyDataRenderedSubstitudeEntriesSimpleContact = GetOnCallSchedulesDetailResponseBodyDataRenderedSubstitudeEntriesSimpleContact;
class GetOnCallSchedulesDetailResponseBodyDataRenderedSubstitudeEntries extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            end: 'End',
            simpleContact: 'SimpleContact',
            start: 'Start',
        };
    }
    static types() {
        return {
            end: 'string',
            simpleContact: GetOnCallSchedulesDetailResponseBodyDataRenderedSubstitudeEntriesSimpleContact,
            start: 'string',
        };
    }
}
exports.GetOnCallSchedulesDetailResponseBodyDataRenderedSubstitudeEntries = GetOnCallSchedulesDetailResponseBodyDataRenderedSubstitudeEntries;
class GetOnCallSchedulesDetailResponseBodyDataScheduleLayersRestrictions extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            endTimeOfDay: 'EndTimeOfDay',
            restrictionType: 'RestrictionType',
            startTimeOfDay: 'StartTimeOfDay',
        };
    }
    static types() {
        return {
            endTimeOfDay: 'string',
            restrictionType: 'string',
            startTimeOfDay: 'string',
        };
    }
}
exports.GetOnCallSchedulesDetailResponseBodyDataScheduleLayersRestrictions = GetOnCallSchedulesDetailResponseBodyDataScheduleLayersRestrictions;
class GetOnCallSchedulesDetailResponseBodyDataScheduleLayers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            contactIds: 'ContactIds',
            restrictions: 'Restrictions',
            rotationType: 'RotationType',
            shiftLength: 'ShiftLength',
            startTime: 'StartTime',
        };
    }
    static types() {
        return {
            contactIds: { 'type': 'array', 'itemType': 'number' },
            restrictions: { 'type': 'array', 'itemType': GetOnCallSchedulesDetailResponseBodyDataScheduleLayersRestrictions },
            rotationType: 'string',
            shiftLength: 'number',
            startTime: 'string',
        };
    }
}
exports.GetOnCallSchedulesDetailResponseBodyDataScheduleLayers = GetOnCallSchedulesDetailResponseBodyDataScheduleLayers;
class GetOnCallSchedulesDetailResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alertRobotId: 'AlertRobotId',
            description: 'Description',
            id: 'Id',
            name: 'Name',
            renderedFinnalEntries: 'RenderedFinnalEntries',
            renderedLayerEntries: 'RenderedLayerEntries',
            renderedSubstitudeEntries: 'RenderedSubstitudeEntries',
            scheduleLayers: 'ScheduleLayers',
        };
    }
    static types() {
        return {
            alertRobotId: 'number',
            description: 'string',
            id: 'number',
            name: 'string',
            renderedFinnalEntries: { 'type': 'array', 'itemType': GetOnCallSchedulesDetailResponseBodyDataRenderedFinnalEntries },
            renderedLayerEntries: { 'type': 'array', 'itemType': { 'type': 'array', 'itemType': GetOnCallSchedulesDetailResponseBodyDataRenderedLayerEntries } },
            renderedSubstitudeEntries: { 'type': 'array', 'itemType': GetOnCallSchedulesDetailResponseBodyDataRenderedSubstitudeEntries },
            scheduleLayers: { 'type': 'array', 'itemType': GetOnCallSchedulesDetailResponseBodyDataScheduleLayers },
        };
    }
}
exports.GetOnCallSchedulesDetailResponseBodyData = GetOnCallSchedulesDetailResponseBodyData;
class GetSourceMapInfoResponseBodySourceMapList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            fid: 'Fid',
            fileName: 'FileName',
            size: 'Size',
            uploadTime: 'UploadTime',
            version: 'Version',
        };
    }
    static types() {
        return {
            fid: 'string',
            fileName: 'string',
            size: 'string',
            uploadTime: 'string',
            version: 'string',
        };
    }
}
exports.GetSourceMapInfoResponseBodySourceMapList = GetSourceMapInfoResponseBodySourceMapList;
class GetStackResponseBodyStackInfoExtInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            info: 'Info',
            type: 'Type',
        };
    }
    static types() {
        return {
            info: 'string',
            type: 'string',
        };
    }
}
exports.GetStackResponseBodyStackInfoExtInfo = GetStackResponseBodyStackInfoExtInfo;
class GetStackResponseBodyStackInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            api: 'Api',
            duration: 'Duration',
            exception: 'Exception',
            extInfo: 'ExtInfo',
            line: 'Line',
            rpcId: 'RpcId',
            serviceName: 'ServiceName',
            startTime: 'StartTime',
        };
    }
    static types() {
        return {
            api: 'string',
            duration: 'number',
            exception: 'string',
            extInfo: GetStackResponseBodyStackInfoExtInfo,
            line: 'string',
            rpcId: 'string',
            serviceName: 'string',
            startTime: 'number',
        };
    }
}
exports.GetStackResponseBodyStackInfo = GetStackResponseBodyStackInfo;
class GetSyntheticTaskDetailResponseBodyTaskDetailCommonParamAlertList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            generalAlert: 'GeneralAlert',
            isCritical: 'IsCritical',
            name: 'Name',
            seriousAlert: 'SeriousAlert',
            symbols: 'Symbols',
        };
    }
    static types() {
        return {
            generalAlert: 'string',
            isCritical: 'string',
            name: 'string',
            seriousAlert: 'string',
            symbols: 'string',
        };
    }
}
exports.GetSyntheticTaskDetailResponseBodyTaskDetailCommonParamAlertList = GetSyntheticTaskDetailResponseBodyTaskDetailCommonParamAlertList;
class GetSyntheticTaskDetailResponseBodyTaskDetailCommonParam extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alarmFlag: 'AlarmFlag',
            alertList: 'AlertList',
            alertNotifierId: 'AlertNotifierId',
            alertPolicyId: 'AlertPolicyId',
            monitorSamples: 'MonitorSamples',
            startExecutionTime: 'StartExecutionTime',
        };
    }
    static types() {
        return {
            alarmFlag: 'number',
            alertList: { 'type': 'array', 'itemType': GetSyntheticTaskDetailResponseBodyTaskDetailCommonParamAlertList },
            alertNotifierId: 'string',
            alertPolicyId: 'string',
            monitorSamples: 'string',
            startExecutionTime: 'string',
        };
    }
}
exports.GetSyntheticTaskDetailResponseBodyTaskDetailCommonParam = GetSyntheticTaskDetailResponseBodyTaskDetailCommonParam;
class GetSyntheticTaskDetailResponseBodyTaskDetailDownload extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            connectionTimeout: 'ConnectionTimeout',
            downloadCustomHeaderContent: 'DownloadCustomHeaderContent',
            downloadCustomHost: 'DownloadCustomHost',
            downloadCustomHostIp: 'DownloadCustomHostIp',
            downloadKernel: 'DownloadKernel',
            downloadRedirect: 'DownloadRedirect',
            downloadTransmissionSize: 'DownloadTransmissionSize',
            monitorTimeout: 'MonitorTimeout',
            quickProtocol: 'QuickProtocol',
            validateKeywords: 'ValidateKeywords',
            verifyWay: 'VerifyWay',
            whiteList: 'WhiteList',
        };
    }
    static types() {
        return {
            connectionTimeout: 'number',
            downloadCustomHeaderContent: 'string',
            downloadCustomHost: 'number',
            downloadCustomHostIp: 'string',
            downloadKernel: 'number',
            downloadRedirect: 'number',
            downloadTransmissionSize: 'number',
            monitorTimeout: 'number',
            quickProtocol: 'string',
            validateKeywords: 'string',
            verifyWay: 'number',
            whiteList: 'string',
        };
    }
}
exports.GetSyntheticTaskDetailResponseBodyTaskDetailDownload = GetSyntheticTaskDetailResponseBodyTaskDetailDownload;
class GetSyntheticTaskDetailResponseBodyTaskDetailExtendInterval extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            days: 'Days',
            endMinute: 'EndMinute',
            endTime: 'EndTime',
            endhour: 'Endhour',
            startHour: 'StartHour',
            startMinute: 'StartMinute',
            startTime: 'StartTime',
        };
    }
    static types() {
        return {
            days: { 'type': 'array', 'itemType': 'number' },
            endMinute: 'number',
            endTime: 'string',
            endhour: 'number',
            startHour: 'number',
            startMinute: 'number',
            startTime: 'string',
        };
    }
}
exports.GetSyntheticTaskDetailResponseBodyTaskDetailExtendInterval = GetSyntheticTaskDetailResponseBodyTaskDetailExtendInterval;
class GetSyntheticTaskDetailResponseBodyTaskDetailMonitorList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cityCode: 'CityCode',
            monitorType: 'MonitorType',
            netServiceId: 'NetServiceId',
            sendCount: 'SendCount',
        };
    }
    static types() {
        return {
            cityCode: 'number',
            monitorType: 'number',
            netServiceId: 'number',
            sendCount: 'number',
        };
    }
}
exports.GetSyntheticTaskDetailResponseBodyTaskDetailMonitorList = GetSyntheticTaskDetailResponseBodyTaskDetailMonitorList;
class GetSyntheticTaskDetailResponseBodyTaskDetailNav extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dnsHijackWhitelist: 'DnsHijackWhitelist',
            elementBlacklist: 'ElementBlacklist',
            executeActiveX: 'ExecuteActiveX',
            executeApplet: 'ExecuteApplet',
            executeScript: 'ExecuteScript',
            filterInvalidIP: 'FilterInvalidIP',
            flowHijackJumpTimes: 'FlowHijackJumpTimes',
            flowHijackLogo: 'FlowHijackLogo',
            monitorTimeout: 'MonitorTimeout',
            navAutomaticScrolling: 'NavAutomaticScrolling',
            navCustomHeader: 'NavCustomHeader',
            navCustomHeaderContent: 'NavCustomHeaderContent',
            navCustomHost: 'NavCustomHost',
            navCustomHostIp: 'NavCustomHostIp',
            navDisableCache: 'NavDisableCache',
            navDisableCompression: 'NavDisableCompression',
            navIgnoreCertificateError: 'NavIgnoreCertificateError',
            navRedirect: 'NavRedirect',
            navReturnElement: 'NavReturnElement',
            pageTampering: 'PageTampering',
            processName: 'ProcessName',
            quicDomain: 'QuicDomain',
            quicVersion: 'QuicVersion',
            requestHeader: 'RequestHeader',
            slowElementThreshold: 'SlowElementThreshold',
            verifyStringBlacklist: 'VerifyStringBlacklist',
            verifyStringWhitelist: 'VerifyStringWhitelist',
            waitCompletionTime: 'WaitCompletionTime',
        };
    }
    static types() {
        return {
            dnsHijackWhitelist: 'string',
            elementBlacklist: 'string',
            executeActiveX: 'number',
            executeApplet: 'number',
            executeScript: 'number',
            filterInvalidIP: 'number',
            flowHijackJumpTimes: 'number',
            flowHijackLogo: 'string',
            monitorTimeout: 'number',
            navAutomaticScrolling: 'number',
            navCustomHeader: 'string',
            navCustomHeaderContent: 'string',
            navCustomHost: 'number',
            navCustomHostIp: 'string',
            navDisableCache: 'number',
            navDisableCompression: 'number',
            navIgnoreCertificateError: 'number',
            navRedirect: 'number',
            navReturnElement: 'number',
            pageTampering: 'string',
            processName: 'string',
            quicDomain: 'string',
            quicVersion: 'number',
            requestHeader: 'number',
            slowElementThreshold: 'number',
            verifyStringBlacklist: 'string',
            verifyStringWhitelist: 'string',
            waitCompletionTime: 'number',
        };
    }
}
exports.GetSyntheticTaskDetailResponseBodyTaskDetailNav = GetSyntheticTaskDetailResponseBodyTaskDetailNav;
class GetSyntheticTaskDetailResponseBodyTaskDetailNet extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            netDigSwitch: 'NetDigSwitch',
            netDnsNs: 'NetDnsNs',
            netDnsQueryMethod: 'NetDnsQueryMethod',
            netDnsServer: 'NetDnsServer',
            netDnsSwitch: 'NetDnsSwitch',
            netDnsTimeout: 'NetDnsTimeout',
            netIcmpActive: 'NetIcmpActive',
            netIcmpDataCut: 'NetIcmpDataCut',
            netIcmpInterval: 'NetIcmpInterval',
            netIcmpNum: 'NetIcmpNum',
            netIcmpSize: 'NetIcmpSize',
            netIcmpSwitch: 'NetIcmpSwitch',
            netIcmpTimeout: 'NetIcmpTimeout',
            netTraceRouteNum: 'NetTraceRouteNum',
            netTraceRouteSwitch: 'NetTraceRouteSwitch',
            netTraceRouteTimeout: 'NetTraceRouteTimeout',
            whiteList: 'WhiteList',
        };
    }
    static types() {
        return {
            netDigSwitch: 'number',
            netDnsNs: 'string',
            netDnsQueryMethod: 'string',
            netDnsServer: 'number',
            netDnsSwitch: 'number',
            netDnsTimeout: 'string',
            netIcmpActive: 'number',
            netIcmpDataCut: 'number',
            netIcmpInterval: 'number',
            netIcmpNum: 'number',
            netIcmpSize: 'number',
            netIcmpSwitch: 'number',
            netIcmpTimeout: 'number',
            netTraceRouteNum: 'number',
            netTraceRouteSwitch: 'number',
            netTraceRouteTimeout: 'number',
            whiteList: 'string',
        };
    }
}
exports.GetSyntheticTaskDetailResponseBodyTaskDetailNet = GetSyntheticTaskDetailResponseBodyTaskDetailNet;
class GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentBodyFormdata extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            key: 'Key',
            value: 'Value',
        };
    }
    static types() {
        return {
            key: 'string',
            value: 'string',
        };
    }
}
exports.GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentBodyFormdata = GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentBodyFormdata;
class GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentBodyUrlencoded extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            key: 'Key',
            value: 'Value',
        };
    }
    static types() {
        return {
            key: 'string',
            value: 'string',
        };
    }
}
exports.GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentBodyUrlencoded = GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentBodyUrlencoded;
class GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            formdata: 'Formdata',
            language: 'Language',
            mode: 'Mode',
            raw: 'Raw',
            urlencoded: 'Urlencoded',
        };
    }
    static types() {
        return {
            formdata: GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentBodyFormdata,
            language: 'string',
            mode: 'string',
            raw: 'string',
            urlencoded: GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentBodyUrlencoded,
        };
    }
}
exports.GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentBody = GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentBody;
class GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentHeader extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            key: 'Key',
            value: 'Value',
        };
    }
    static types() {
        return {
            key: 'string',
            value: 'string',
        };
    }
}
exports.GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentHeader = GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentHeader;
class GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            body: 'Body',
            header: 'Header',
            method: 'Method',
        };
    }
    static types() {
        return {
            body: GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentBody,
            header: { 'type': 'array', 'itemType': GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentHeader },
            method: 'string',
        };
    }
}
exports.GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContent = GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContent;
class GetSyntheticTaskDetailResponseBodyTaskDetailProtocol extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            characterEncoding: 'CharacterEncoding',
            customHost: 'CustomHost',
            customHostIp: 'CustomHostIp',
            protocolConnectionTimeout: 'ProtocolConnectionTimeout',
            protocolMonitorTimeout: 'ProtocolMonitorTimeout',
            receivedDataSize: 'ReceivedDataSize',
            requestContent: 'RequestContent',
            verifyContent: 'VerifyContent',
            verifyWay: 'VerifyWay',
        };
    }
    static types() {
        return {
            characterEncoding: 'number',
            customHost: 'number',
            customHostIp: 'string',
            protocolConnectionTimeout: 'number',
            protocolMonitorTimeout: 'number',
            receivedDataSize: 'number',
            requestContent: GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContent,
            verifyContent: 'string',
            verifyWay: 'number',
        };
    }
}
exports.GetSyntheticTaskDetailResponseBodyTaskDetailProtocol = GetSyntheticTaskDetailResponseBodyTaskDetailProtocol;
class GetSyntheticTaskDetailResponseBodyTaskDetail extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonParam: 'CommonParam',
            download: 'Download',
            extendInterval: 'ExtendInterval',
            intervalTime: 'IntervalTime',
            intervalType: 'IntervalType',
            ipType: 'IpType',
            monitorList: 'MonitorList',
            monitorListString: 'MonitorListString',
            nav: 'Nav',
            net: 'Net',
            protocol: 'Protocol',
            taskId: 'TaskId',
            taskName: 'TaskName',
            taskType: 'TaskType',
            url: 'Url',
        };
    }
    static types() {
        return {
            commonParam: GetSyntheticTaskDetailResponseBodyTaskDetailCommonParam,
            download: GetSyntheticTaskDetailResponseBodyTaskDetailDownload,
            extendInterval: GetSyntheticTaskDetailResponseBodyTaskDetailExtendInterval,
            intervalTime: 'number',
            intervalType: 'number',
            ipType: 'number',
            monitorList: { 'type': 'array', 'itemType': GetSyntheticTaskDetailResponseBodyTaskDetailMonitorList },
            monitorListString: 'string',
            nav: GetSyntheticTaskDetailResponseBodyTaskDetailNav,
            net: GetSyntheticTaskDetailResponseBodyTaskDetailNet,
            protocol: GetSyntheticTaskDetailResponseBodyTaskDetailProtocol,
            taskId: 'number',
            taskName: 'string',
            taskType: 'number',
            url: 'string',
        };
    }
}
exports.GetSyntheticTaskDetailResponseBodyTaskDetail = GetSyntheticTaskDetailResponseBodyTaskDetail;
class GetSyntheticTaskListResponseBodyPageInfoList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            createTime: 'CreateTime',
            monitorNumber: 'MonitorNumber',
            taskId: 'TaskId',
            taskName: 'TaskName',
            taskStatus: 'TaskStatus',
            taskType: 'TaskType',
            taskTypeName: 'TaskTypeName',
            url: 'Url',
            usable: 'Usable',
        };
    }
    static types() {
        return {
            createTime: 'string',
            monitorNumber: 'number',
            taskId: 'string',
            taskName: 'string',
            taskStatus: 'string',
            taskType: 'number',
            taskTypeName: 'string',
            url: 'string',
            usable: 'number',
        };
    }
}
exports.GetSyntheticTaskListResponseBodyPageInfoList = GetSyntheticTaskListResponseBodyPageInfoList;
class GetSyntheticTaskListResponseBodyPageInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasNextPage: 'HasNextPage',
            hasPreviousPage: 'HasPreviousPage',
            isFirstPage: 'IsFirstPage',
            isLastPage: 'IsLastPage',
            list: 'List',
            navigateFirstPage: 'NavigateFirstPage',
            navigateLastPage: 'NavigateLastPage',
            navigatePageNums: 'NavigatePageNums',
            nextPage: 'NextPage',
            pages: 'Pages',
            prepage: 'Prepage',
            size: 'Size',
            total: 'Total',
        };
    }
    static types() {
        return {
            hasNextPage: 'string',
            hasPreviousPage: 'boolean',
            isFirstPage: 'boolean',
            isLastPage: 'boolean',
            list: { 'type': 'array', 'itemType': GetSyntheticTaskListResponseBodyPageInfoList },
            navigateFirstPage: 'string',
            navigateLastPage: 'string',
            navigatePageNums: 'string',
            nextPage: 'string',
            pages: 'string',
            prepage: 'string',
            size: 'number',
            total: 'number',
        };
    }
}
exports.GetSyntheticTaskListResponseBodyPageInfo = GetSyntheticTaskListResponseBodyPageInfo;
class GetSyntheticTaskMonitorsResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            busy: 'Busy',
            city: 'City',
            cityCode: 'CityCode',
            clientType: 'ClientType',
            district: 'District',
            netServiceId: 'NetServiceId',
            netServiceName: 'NetServiceName',
        };
    }
    static types() {
        return {
            busy: 'number',
            city: 'string',
            cityCode: 'number',
            clientType: 'number',
            district: 'string',
            netServiceId: 'number',
            netServiceName: 'string',
        };
    }
}
exports.GetSyntheticTaskMonitorsResponseBodyData = GetSyntheticTaskMonitorsResponseBodyData;
class GetTraceResponseBodySpansLogEventListTagEntryList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            key: 'Key',
            value: 'Value',
        };
    }
    static types() {
        return {
            key: 'string',
            value: 'string',
        };
    }
}
exports.GetTraceResponseBodySpansLogEventListTagEntryList = GetTraceResponseBodySpansLogEventListTagEntryList;
class GetTraceResponseBodySpansLogEventList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            tagEntryList: 'TagEntryList',
            timestamp: 'Timestamp',
        };
    }
    static types() {
        return {
            tagEntryList: { 'type': 'array', 'itemType': GetTraceResponseBodySpansLogEventListTagEntryList },
            timestamp: 'number',
        };
    }
}
exports.GetTraceResponseBodySpansLogEventList = GetTraceResponseBodySpansLogEventList;
class GetTraceResponseBodySpansTagEntryList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            key: 'Key',
            value: 'Value',
        };
    }
    static types() {
        return {
            key: 'string',
            value: 'string',
        };
    }
}
exports.GetTraceResponseBodySpansTagEntryList = GetTraceResponseBodySpansTagEntryList;
class GetTraceResponseBodySpans extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            children: 'Children',
            duration: 'Duration',
            haveStack: 'HaveStack',
            logEventList: 'LogEventList',
            operationName: 'OperationName',
            parentSpanId: 'ParentSpanId',
            resultCode: 'ResultCode',
            rpcId: 'RpcId',
            rpcType: 'RpcType',
            serviceIp: 'ServiceIp',
            serviceName: 'ServiceName',
            spanId: 'SpanId',
            tagEntryList: 'TagEntryList',
            timestamp: 'Timestamp',
            traceID: 'TraceID',
        };
    }
    static types() {
        return {
            children: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            duration: 'number',
            haveStack: 'boolean',
            logEventList: { 'type': 'array', 'itemType': GetTraceResponseBodySpansLogEventList },
            operationName: 'string',
            parentSpanId: 'string',
            resultCode: 'string',
            rpcId: 'string',
            rpcType: 'number',
            serviceIp: 'string',
            serviceName: 'string',
            spanId: 'string',
            tagEntryList: { 'type': 'array', 'itemType': GetTraceResponseBodySpansTagEntryList },
            timestamp: 'number',
            traceID: 'string',
        };
    }
}
exports.GetTraceResponseBodySpans = GetTraceResponseBodySpans;
class GetTraceAppResponseBodyTraceApp extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            appName: 'AppName',
            createTime: 'CreateTime',
            labels: 'Labels',
            pid: 'Pid',
            regionId: 'RegionId',
            show: 'Show',
            type: 'Type',
            updateTime: 'UpdateTime',
            userId: 'UserId',
        };
    }
    static types() {
        return {
            appId: 'number',
            appName: 'string',
            createTime: 'number',
            labels: { 'type': 'array', 'itemType': 'string' },
            pid: 'string',
            regionId: 'string',
            show: 'boolean',
            type: 'string',
            updateTime: 'number',
            userId: 'string',
        };
    }
}
exports.GetTraceAppResponseBodyTraceApp = GetTraceAppResponseBodyTraceApp;
class ListActivatedAlertsResponseBodyPageAlertsDispatchRules extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            ruleId: 'RuleId',
            ruleName: 'RuleName',
        };
    }
    static types() {
        return {
            ruleId: 'number',
            ruleName: 'string',
        };
    }
}
exports.ListActivatedAlertsResponseBodyPageAlertsDispatchRules = ListActivatedAlertsResponseBodyPageAlertsDispatchRules;
class ListActivatedAlertsResponseBodyPageAlerts extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alertId: 'AlertId',
            alertName: 'AlertName',
            alertType: 'AlertType',
            count: 'Count',
            createTime: 'CreateTime',
            dispatchRules: 'DispatchRules',
            endsAt: 'EndsAt',
            expandFields: 'ExpandFields',
            integrationName: 'IntegrationName',
            integrationType: 'IntegrationType',
            involvedObjectKind: 'InvolvedObjectKind',
            involvedObjectName: 'InvolvedObjectName',
            message: 'Message',
            severity: 'Severity',
            startsAt: 'StartsAt',
            status: 'Status',
        };
    }
    static types() {
        return {
            alertId: 'string',
            alertName: 'string',
            alertType: 'string',
            count: 'number',
            createTime: 'number',
            dispatchRules: { 'type': 'array', 'itemType': ListActivatedAlertsResponseBodyPageAlertsDispatchRules },
            endsAt: 'number',
            expandFields: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            integrationName: 'string',
            integrationType: 'string',
            involvedObjectKind: 'string',
            involvedObjectName: 'string',
            message: 'string',
            severity: 'string',
            startsAt: 'number',
            status: 'string',
        };
    }
}
exports.ListActivatedAlertsResponseBodyPageAlerts = ListActivatedAlertsResponseBodyPageAlerts;
class ListActivatedAlertsResponseBodyPage extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alerts: 'Alerts',
            page: 'Page',
            pageSize: 'PageSize',
            total: 'Total',
        };
    }
    static types() {
        return {
            alerts: { 'type': 'array', 'itemType': ListActivatedAlertsResponseBodyPageAlerts },
            page: 'number',
            pageSize: 'number',
            total: 'number',
        };
    }
}
exports.ListActivatedAlertsResponseBodyPage = ListActivatedAlertsResponseBodyPage;
class ListAlertEventsResponseBodyPageBeanEventsAlarms extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alarmId: 'AlarmId',
            alarmName: 'AlarmName',
            createTime: 'CreateTime',
            state: 'State',
        };
    }
    static types() {
        return {
            alarmId: 'number',
            alarmName: 'string',
            createTime: 'string',
            state: 'number',
        };
    }
}
exports.ListAlertEventsResponseBodyPageBeanEventsAlarms = ListAlertEventsResponseBodyPageBeanEventsAlarms;
class ListAlertEventsResponseBodyPageBeanEvents extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alarms: 'Alarms',
            alertName: 'AlertName',
            annotations: 'Annotations',
            description: 'Description',
            endTime: 'EndTime',
            generatorURL: 'GeneratorURL',
            handlerName: 'HandlerName',
            integrationName: 'IntegrationName',
            integrationType: 'IntegrationType',
            labels: 'Labels',
            receiveTime: 'ReceiveTime',
            severity: 'Severity',
            startTime: 'StartTime',
            status: 'Status',
        };
    }
    static types() {
        return {
            alarms: { 'type': 'array', 'itemType': ListAlertEventsResponseBodyPageBeanEventsAlarms },
            alertName: 'string',
            annotations: 'string',
            description: 'string',
            endTime: 'string',
            generatorURL: 'string',
            handlerName: 'string',
            integrationName: 'string',
            integrationType: 'string',
            labels: 'string',
            receiveTime: 'string',
            severity: 'string',
            startTime: 'string',
            status: 'string',
        };
    }
}
exports.ListAlertEventsResponseBodyPageBeanEvents = ListAlertEventsResponseBodyPageBeanEvents;
class ListAlertEventsResponseBodyPageBean extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            events: 'Events',
            page: 'Page',
            size: 'Size',
            total: 'Total',
        };
    }
    static types() {
        return {
            events: { 'type': 'array', 'itemType': ListAlertEventsResponseBodyPageBeanEvents },
            page: 'number',
            size: 'number',
            total: 'number',
        };
    }
}
exports.ListAlertEventsResponseBodyPageBean = ListAlertEventsResponseBodyPageBean;
class ListAlertsResponseBodyPageBeanListAlertsActivities extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'Content',
            description: 'Description',
            handlerName: 'HandlerName',
            time: 'Time',
            type: 'Type',
        };
    }
    static types() {
        return {
            content: 'string',
            description: 'string',
            handlerName: 'string',
            time: 'string',
            type: 'number',
        };
    }
}
exports.ListAlertsResponseBodyPageBeanListAlertsActivities = ListAlertsResponseBodyPageBeanListAlertsActivities;
class ListAlertsResponseBodyPageBeanListAlertsAlertEvents extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alertName: 'AlertName',
            annotations: 'Annotations',
            description: 'Description',
            endTime: 'EndTime',
            generatorURL: 'GeneratorURL',
            integrationName: 'IntegrationName',
            integrationType: 'IntegrationType',
            labels: 'Labels',
            receiveTime: 'ReceiveTime',
            severity: 'Severity',
            startTime: 'StartTime',
            state: 'State',
        };
    }
    static types() {
        return {
            alertName: 'string',
            annotations: 'string',
            description: 'string',
            endTime: 'string',
            generatorURL: 'string',
            integrationName: 'string',
            integrationType: 'string',
            labels: 'string',
            receiveTime: 'string',
            severity: 'string',
            startTime: 'string',
            state: 'string',
        };
    }
}
exports.ListAlertsResponseBodyPageBeanListAlertsAlertEvents = ListAlertsResponseBodyPageBeanListAlertsAlertEvents;
class ListAlertsResponseBodyPageBeanListAlerts extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            activities: 'Activities',
            alertEvents: 'AlertEvents',
            alertId: 'AlertId',
            alertName: 'AlertName',
            createTime: 'CreateTime',
            dispatchRuleId: 'DispatchRuleId',
            dispatchRuleName: 'DispatchRuleName',
            severity: 'Severity',
            state: 'State',
        };
    }
    static types() {
        return {
            activities: { 'type': 'array', 'itemType': ListAlertsResponseBodyPageBeanListAlertsActivities },
            alertEvents: { 'type': 'array', 'itemType': ListAlertsResponseBodyPageBeanListAlertsAlertEvents },
            alertId: 'number',
            alertName: 'string',
            createTime: 'string',
            dispatchRuleId: 'number',
            dispatchRuleName: 'string',
            severity: 'string',
            state: 'number',
        };
    }
}
exports.ListAlertsResponseBodyPageBeanListAlerts = ListAlertsResponseBodyPageBeanListAlerts;
class ListAlertsResponseBodyPageBean extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            listAlerts: 'ListAlerts',
            page: 'Page',
            size: 'Size',
            total: 'Total',
        };
    }
    static types() {
        return {
            listAlerts: { 'type': 'array', 'itemType': ListAlertsResponseBodyPageBeanListAlerts },
            page: 'number',
            size: 'number',
            total: 'number',
        };
    }
}
exports.ListAlertsResponseBodyPageBean = ListAlertsResponseBodyPageBean;
class ListClusterFromGrafanaResponseBodyPromClusterList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            agentStatus: 'AgentStatus',
            clusterId: 'ClusterId',
            clusterName: 'ClusterName',
            clusterType: 'ClusterType',
            controllerId: 'ControllerId',
            createTime: 'CreateTime',
            extra: 'Extra',
            id: 'Id',
            installTime: 'InstallTime',
            isControllerInstalled: 'IsControllerInstalled',
            lastHeartBeatTime: 'LastHeartBeatTime',
            nodeNum: 'NodeNum',
            options: 'Options',
            pluginsJsonArray: 'PluginsJsonArray',
            regionId: 'RegionId',
            stateJson: 'StateJson',
            updateTime: 'UpdateTime',
            userId: 'UserId',
        };
    }
    static types() {
        return {
            agentStatus: 'string',
            clusterId: 'string',
            clusterName: 'string',
            clusterType: 'string',
            controllerId: 'string',
            createTime: 'number',
            extra: 'string',
            id: 'number',
            installTime: 'number',
            isControllerInstalled: 'boolean',
            lastHeartBeatTime: 'number',
            nodeNum: 'number',
            options: 'string',
            pluginsJsonArray: 'string',
            regionId: 'string',
            stateJson: 'string',
            updateTime: 'number',
            userId: 'string',
        };
    }
}
exports.ListClusterFromGrafanaResponseBodyPromClusterList = ListClusterFromGrafanaResponseBodyPromClusterList;
class ListCmsInstancesResponseBodyDataProducts extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            descr: 'Descr',
            id: 'Id',
            instance: 'Instance',
            name: 'Name',
            prod: 'Prod',
            source: 'Source',
            state: 'State',
            time: 'Time',
            type: 'Type',
            url: 'Url',
        };
    }
    static types() {
        return {
            descr: 'string',
            id: 'string',
            instance: 'string',
            name: 'string',
            prod: 'string',
            source: 'string',
            state: 'string',
            time: 'string',
            type: 'string',
            url: 'string',
        };
    }
}
exports.ListCmsInstancesResponseBodyDataProducts = ListCmsInstancesResponseBodyDataProducts;
class ListCmsInstancesResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            enableTag: 'EnableTag',
            products: 'Products',
        };
    }
    static types() {
        return {
            enableTag: 'boolean',
            products: { 'type': 'array', 'itemType': ListCmsInstancesResponseBodyDataProducts },
        };
    }
}
exports.ListCmsInstancesResponseBodyData = ListCmsInstancesResponseBodyData;
class ListDashboardsResponseBodyDashboardVosI18nChild extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dashboardType: 'DashboardType',
            exporter: 'Exporter',
            httpUrl: 'HttpUrl',
            httpsUrl: 'HttpsUrl',
            id: 'Id',
            isArmsExporter: 'IsArmsExporter',
            kind: 'Kind',
            language: 'Language',
            name: 'Name',
            needUpdate: 'NeedUpdate',
            tags: 'Tags',
            time: 'Time',
            title: 'Title',
            type: 'Type',
            uid: 'Uid',
            url: 'Url',
            version: 'Version',
        };
    }
    static types() {
        return {
            dashboardType: 'string',
            exporter: 'string',
            httpUrl: 'string',
            httpsUrl: 'string',
            id: 'string',
            isArmsExporter: 'boolean',
            kind: 'string',
            language: 'string',
            name: 'string',
            needUpdate: 'boolean',
            tags: { 'type': 'array', 'itemType': 'string' },
            time: 'string',
            title: 'string',
            type: 'string',
            uid: 'string',
            url: 'string',
            version: 'string',
        };
    }
}
exports.ListDashboardsResponseBodyDashboardVosI18nChild = ListDashboardsResponseBodyDashboardVosI18nChild;
class ListDashboardsResponseBodyDashboardVos extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dashboardType: 'DashboardType',
            exporter: 'Exporter',
            httpUrl: 'HttpUrl',
            httpsUrl: 'HttpsUrl',
            i18nChild: 'I18nChild',
            id: 'Id',
            isArmsExporter: 'IsArmsExporter',
            kind: 'Kind',
            language: 'Language',
            name: 'Name',
            needUpdate: 'NeedUpdate',
            tags: 'Tags',
            time: 'Time',
            title: 'Title',
            type: 'Type',
            uid: 'Uid',
            url: 'Url',
            version: 'Version',
        };
    }
    static types() {
        return {
            dashboardType: 'string',
            exporter: 'string',
            httpUrl: 'string',
            httpsUrl: 'string',
            i18nChild: ListDashboardsResponseBodyDashboardVosI18nChild,
            id: 'string',
            isArmsExporter: 'boolean',
            kind: 'string',
            language: 'string',
            name: 'string',
            needUpdate: 'boolean',
            tags: { 'type': 'array', 'itemType': 'string' },
            time: 'string',
            title: 'string',
            type: 'string',
            uid: 'string',
            url: 'string',
            version: 'string',
        };
    }
}
exports.ListDashboardsResponseBodyDashboardVos = ListDashboardsResponseBodyDashboardVos;
class ListDispatchRuleResponseBodyDispatchRules extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'Name',
            ruleId: 'RuleId',
            state: 'State',
        };
    }
    static types() {
        return {
            name: 'string',
            ruleId: 'number',
            state: 'string',
        };
    }
}
exports.ListDispatchRuleResponseBodyDispatchRules = ListDispatchRuleResponseBodyDispatchRules;
class ListEscalationPoliciesResponseBodyPageBeanEscalationPolicies extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'Id',
            name: 'Name',
        };
    }
    static types() {
        return {
            id: 'number',
            name: 'string',
        };
    }
}
exports.ListEscalationPoliciesResponseBodyPageBeanEscalationPolicies = ListEscalationPoliciesResponseBodyPageBeanEscalationPolicies;
class ListEscalationPoliciesResponseBodyPageBean extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            escalationPolicies: 'EscalationPolicies',
            page: 'Page',
            size: 'Size',
            total: 'Total',
        };
    }
    static types() {
        return {
            escalationPolicies: { 'type': 'array', 'itemType': ListEscalationPoliciesResponseBodyPageBeanEscalationPolicies },
            page: 'number',
            size: 'number',
            total: 'number',
        };
    }
}
exports.ListEscalationPoliciesResponseBodyPageBean = ListEscalationPoliciesResponseBodyPageBean;
class ListEventBridgeIntegrationsResponseBodyPageBeanEventBridgeIntegrations extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            description: 'Description',
            id: 'Id',
            name: 'Name',
        };
    }
    static types() {
        return {
            description: 'string',
            id: 'number',
            name: 'string',
        };
    }
}
exports.ListEventBridgeIntegrationsResponseBodyPageBeanEventBridgeIntegrations = ListEventBridgeIntegrationsResponseBodyPageBeanEventBridgeIntegrations;
class ListEventBridgeIntegrationsResponseBodyPageBean extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            eventBridgeIntegrations: 'EventBridgeIntegrations',
            page: 'Page',
            size: 'Size',
            total: 'Total',
        };
    }
    static types() {
        return {
            eventBridgeIntegrations: { 'type': 'array', 'itemType': ListEventBridgeIntegrationsResponseBodyPageBeanEventBridgeIntegrations },
            page: 'number',
            size: 'number',
            total: 'number',
        };
    }
}
exports.ListEventBridgeIntegrationsResponseBodyPageBean = ListEventBridgeIntegrationsResponseBodyPageBean;
class ListInsightsEventsResponseBodyInsightsEvents extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            date: 'Date',
            desc: 'Desc',
            level: 'Level',
            pid: 'Pid',
            title: 'Title',
            type: 'Type',
        };
    }
    static types() {
        return {
            date: 'number',
            desc: 'string',
            level: 'string',
            pid: 'string',
            title: 'string',
            type: 'string',
        };
    }
}
exports.ListInsightsEventsResponseBodyInsightsEvents = ListInsightsEventsResponseBodyInsightsEvents;
class ListIntegrationResponseBodyPageInfoIntegrationsIntegrationDetail extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            autoRecover: 'AutoRecover',
            description: 'Description',
            duplicateKey: 'DuplicateKey',
            extendedFieldRedefineRules: 'ExtendedFieldRedefineRules',
            fieldRedefineRules: 'FieldRedefineRules',
            initiativeRecoverField: 'InitiativeRecoverField',
            initiativeRecoverValue: 'InitiativeRecoverValue',
            recoverTime: 'RecoverTime',
            stat: 'Stat',
        };
    }
    static types() {
        return {
            autoRecover: 'boolean',
            description: 'string',
            duplicateKey: 'string',
            extendedFieldRedefineRules: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            fieldRedefineRules: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            initiativeRecoverField: 'string',
            initiativeRecoverValue: 'string',
            recoverTime: 'number',
            stat: { 'type': 'array', 'itemType': 'number' },
        };
    }
}
exports.ListIntegrationResponseBodyPageInfoIntegrationsIntegrationDetail = ListIntegrationResponseBodyPageInfoIntegrationsIntegrationDetail;
class ListIntegrationResponseBodyPageInfoIntegrations extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            apiEndpoint: 'ApiEndpoint',
            createTime: 'CreateTime',
            integrationDetail: 'IntegrationDetail',
            integrationId: 'IntegrationId',
            integrationName: 'IntegrationName',
            integrationProductType: 'IntegrationProductType',
            liveness: 'Liveness',
            shortToken: 'ShortToken',
            state: 'State',
        };
    }
    static types() {
        return {
            apiEndpoint: 'string',
            createTime: 'string',
            integrationDetail: ListIntegrationResponseBodyPageInfoIntegrationsIntegrationDetail,
            integrationId: 'number',
            integrationName: 'string',
            integrationProductType: 'string',
            liveness: 'string',
            shortToken: 'string',
            state: 'boolean',
        };
    }
}
exports.ListIntegrationResponseBodyPageInfoIntegrations = ListIntegrationResponseBodyPageInfoIntegrations;
class ListIntegrationResponseBodyPageInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            integrations: 'Integrations',
            page: 'Page',
            size: 'Size',
            total: 'Total',
        };
    }
    static types() {
        return {
            integrations: { 'type': 'array', 'itemType': ListIntegrationResponseBodyPageInfoIntegrations },
            page: 'number',
            size: 'number',
            total: 'number',
        };
    }
}
exports.ListIntegrationResponseBodyPageInfo = ListIntegrationResponseBodyPageInfo;
class ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesGroupRule extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupInterval: 'GroupInterval',
            groupWait: 'GroupWait',
            groupingFields: 'GroupingFields',
        };
    }
    static types() {
        return {
            groupInterval: 'number',
            groupWait: 'number',
            groupingFields: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesGroupRule = ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesGroupRule;
class ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesMatchingRulesMatchingConditions extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            key: 'Key',
            operator: 'Operator',
            value: 'Value',
        };
    }
    static types() {
        return {
            key: 'string',
            operator: 'string',
            value: 'string',
        };
    }
}
exports.ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesMatchingRulesMatchingConditions = ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesMatchingRulesMatchingConditions;
class ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesMatchingRules extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            matchingConditions: 'MatchingConditions',
        };
    }
    static types() {
        return {
            matchingConditions: { 'type': 'array', 'itemType': ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesMatchingRulesMatchingConditions },
        };
    }
}
exports.ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesMatchingRules = ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesMatchingRules;
class ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyRuleNotifyObjects extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            notifyObjectId: 'NotifyObjectId',
            notifyObjectName: 'NotifyObjectName',
            notifyObjectType: 'NotifyObjectType',
        };
    }
    static types() {
        return {
            notifyObjectId: 'number',
            notifyObjectName: 'string',
            notifyObjectType: 'string',
        };
    }
}
exports.ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyRuleNotifyObjects = ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyRuleNotifyObjects;
class ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyRule extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            notifyChannels: 'NotifyChannels',
            notifyEndTime: 'NotifyEndTime',
            notifyObjects: 'NotifyObjects',
            notifyStartTime: 'NotifyStartTime',
        };
    }
    static types() {
        return {
            notifyChannels: { 'type': 'array', 'itemType': 'string' },
            notifyEndTime: 'string',
            notifyObjects: { 'type': 'array', 'itemType': ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyRuleNotifyObjects },
            notifyStartTime: 'string',
        };
    }
}
exports.ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyRule = ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyRule;
class ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyTemplate extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            emailContent: 'EmailContent',
            emailRecoverContent: 'EmailRecoverContent',
            emailRecoverTitle: 'EmailRecoverTitle',
            emailTitle: 'EmailTitle',
            robotContent: 'RobotContent',
            smsContent: 'SmsContent',
            smsRecoverContent: 'SmsRecoverContent',
            ttsContent: 'TtsContent',
            ttsRecoverContent: 'TtsRecoverContent',
        };
    }
    static types() {
        return {
            emailContent: 'string',
            emailRecoverContent: 'string',
            emailRecoverTitle: 'string',
            emailTitle: 'string',
            robotContent: 'string',
            smsContent: 'string',
            smsRecoverContent: 'string',
            ttsContent: 'string',
            ttsRecoverContent: 'string',
        };
    }
}
exports.ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyTemplate = ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyTemplate;
class ListNotificationPoliciesResponseBodyPageBeanNotificationPolicies extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            escalationPolicyId: 'EscalationPolicyId',
            groupRule: 'GroupRule',
            id: 'Id',
            integrationId: 'IntegrationId',
            matchingRules: 'MatchingRules',
            name: 'Name',
            notifyRule: 'NotifyRule',
            notifyTemplate: 'NotifyTemplate',
            repeat: 'Repeat',
            repeatInterval: 'RepeatInterval',
            sendRecoverMessage: 'SendRecoverMessage',
        };
    }
    static types() {
        return {
            escalationPolicyId: 'number',
            groupRule: ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesGroupRule,
            id: 'number',
            integrationId: 'number',
            matchingRules: { 'type': 'array', 'itemType': ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesMatchingRules },
            name: 'string',
            notifyRule: ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyRule,
            notifyTemplate: ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyTemplate,
            repeat: 'boolean',
            repeatInterval: 'number',
            sendRecoverMessage: 'boolean',
        };
    }
}
exports.ListNotificationPoliciesResponseBodyPageBeanNotificationPolicies = ListNotificationPoliciesResponseBodyPageBeanNotificationPolicies;
class ListNotificationPoliciesResponseBodyPageBean extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            notificationPolicies: 'NotificationPolicies',
            page: 'Page',
            size: 'Size',
            total: 'Total',
        };
    }
    static types() {
        return {
            notificationPolicies: { 'type': 'array', 'itemType': ListNotificationPoliciesResponseBodyPageBeanNotificationPolicies },
            page: 'number',
            size: 'number',
            total: 'number',
        };
    }
}
exports.ListNotificationPoliciesResponseBodyPageBean = ListNotificationPoliciesResponseBodyPageBean;
class ListOnCallSchedulesResponseBodyPageBeanOnCallSchedules extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            description: 'Description',
            id: 'Id',
            name: 'Name',
        };
    }
    static types() {
        return {
            description: 'string',
            id: 'number',
            name: 'string',
        };
    }
}
exports.ListOnCallSchedulesResponseBodyPageBeanOnCallSchedules = ListOnCallSchedulesResponseBodyPageBeanOnCallSchedules;
class ListOnCallSchedulesResponseBodyPageBean extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            onCallSchedules: 'OnCallSchedules',
            page: 'Page',
            size: 'Size',
            total: 'Total',
        };
    }
    static types() {
        return {
            onCallSchedules: { 'type': 'array', 'itemType': ListOnCallSchedulesResponseBodyPageBeanOnCallSchedules },
            page: 'number',
            size: 'number',
            total: 'number',
        };
    }
}
exports.ListOnCallSchedulesResponseBodyPageBean = ListOnCallSchedulesResponseBodyPageBean;
class ListPrometheusAlertRulesResponseBodyPrometheusAlertRulesAnnotations extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'Name',
            value: 'Value',
        };
    }
    static types() {
        return {
            name: 'string',
            value: 'string',
        };
    }
}
exports.ListPrometheusAlertRulesResponseBodyPrometheusAlertRulesAnnotations = ListPrometheusAlertRulesResponseBodyPrometheusAlertRulesAnnotations;
class ListPrometheusAlertRulesResponseBodyPrometheusAlertRulesLabels extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'Name',
            value: 'Value',
        };
    }
    static types() {
        return {
            name: 'string',
            value: 'string',
        };
    }
}
exports.ListPrometheusAlertRulesResponseBodyPrometheusAlertRulesLabels = ListPrometheusAlertRulesResponseBodyPrometheusAlertRulesLabels;
class ListPrometheusAlertRulesResponseBodyPrometheusAlertRules extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alertId: 'AlertId',
            alertName: 'AlertName',
            annotations: 'Annotations',
            clusterId: 'ClusterId',
            dispatchRuleId: 'DispatchRuleId',
            duration: 'Duration',
            expression: 'Expression',
            labels: 'Labels',
            message: 'Message',
            notifyType: 'NotifyType',
            status: 'Status',
            type: 'Type',
        };
    }
    static types() {
        return {
            alertId: 'number',
            alertName: 'string',
            annotations: { 'type': 'array', 'itemType': ListPrometheusAlertRulesResponseBodyPrometheusAlertRulesAnnotations },
            clusterId: 'string',
            dispatchRuleId: 'number',
            duration: 'string',
            expression: 'string',
            labels: { 'type': 'array', 'itemType': ListPrometheusAlertRulesResponseBodyPrometheusAlertRulesLabels },
            message: 'string',
            notifyType: 'string',
            status: 'number',
            type: 'string',
        };
    }
}
exports.ListPrometheusAlertRulesResponseBodyPrometheusAlertRules = ListPrometheusAlertRulesResponseBodyPrometheusAlertRules;
class ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplatesAnnotations extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'Name',
            value: 'Value',
        };
    }
    static types() {
        return {
            name: 'string',
            value: 'string',
        };
    }
}
exports.ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplatesAnnotations = ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplatesAnnotations;
class ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplatesLabels extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'Name',
            value: 'Value',
        };
    }
    static types() {
        return {
            name: 'string',
            value: 'string',
        };
    }
}
exports.ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplatesLabels = ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplatesLabels;
class ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplates extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alertName: 'AlertName',
            annotations: 'Annotations',
            description: 'Description',
            duration: 'Duration',
            expression: 'Expression',
            labels: 'Labels',
            type: 'Type',
            version: 'Version',
        };
    }
    static types() {
        return {
            alertName: 'string',
            annotations: { 'type': 'array', 'itemType': ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplatesAnnotations },
            description: 'string',
            duration: 'string',
            expression: 'string',
            labels: { 'type': 'array', 'itemType': ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplatesLabels },
            type: 'string',
            version: 'string',
        };
    }
}
exports.ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplates = ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplates;
class ListRetcodeAppsResponseBodyRetcodeApps extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            appName: 'AppName',
            nickName: 'NickName',
            pid: 'Pid',
            retcodeAppType: 'RetcodeAppType',
        };
    }
    static types() {
        return {
            appId: 'number',
            appName: 'string',
            nickName: 'string',
            pid: 'string',
            retcodeAppType: 'string',
        };
    }
}
exports.ListRetcodeAppsResponseBodyRetcodeApps = ListRetcodeAppsResponseBodyRetcodeApps;
class ListScenarioResponseBodyArmsScenarios extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            createTime: 'CreateTime',
            extensions: 'Extensions',
            id: 'Id',
            name: 'Name',
            regionId: 'RegionId',
            sign: 'Sign',
            updateTime: 'UpdateTime',
            userId: 'UserId',
        };
    }
    static types() {
        return {
            appId: 'string',
            createTime: 'string',
            extensions: 'string',
            id: 'number',
            name: 'string',
            regionId: 'string',
            sign: 'string',
            updateTime: 'string',
            userId: 'string',
        };
    }
}
exports.ListScenarioResponseBodyArmsScenarios = ListScenarioResponseBodyArmsScenarios;
class ListSilencePoliciesResponseBodyPageBeanSilencePoliciesMatchingRulesMatchingConditions extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            key: 'Key',
            operator: 'Operator',
            value: 'Value',
        };
    }
    static types() {
        return {
            key: 'string',
            operator: 'string',
            value: 'string',
        };
    }
}
exports.ListSilencePoliciesResponseBodyPageBeanSilencePoliciesMatchingRulesMatchingConditions = ListSilencePoliciesResponseBodyPageBeanSilencePoliciesMatchingRulesMatchingConditions;
class ListSilencePoliciesResponseBodyPageBeanSilencePoliciesMatchingRules extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            matchingConditions: 'MatchingConditions',
        };
    }
    static types() {
        return {
            matchingConditions: { 'type': 'array', 'itemType': ListSilencePoliciesResponseBodyPageBeanSilencePoliciesMatchingRulesMatchingConditions },
        };
    }
}
exports.ListSilencePoliciesResponseBodyPageBeanSilencePoliciesMatchingRules = ListSilencePoliciesResponseBodyPageBeanSilencePoliciesMatchingRules;
class ListSilencePoliciesResponseBodyPageBeanSilencePolicies extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'Id',
            matchingRules: 'MatchingRules',
            name: 'Name',
        };
    }
    static types() {
        return {
            id: 'number',
            matchingRules: { 'type': 'array', 'itemType': ListSilencePoliciesResponseBodyPageBeanSilencePoliciesMatchingRules },
            name: 'string',
        };
    }
}
exports.ListSilencePoliciesResponseBodyPageBeanSilencePolicies = ListSilencePoliciesResponseBodyPageBeanSilencePolicies;
class ListSilencePoliciesResponseBodyPageBean extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            page: 'Page',
            silencePolicies: 'SilencePolicies',
            size: 'Size',
            total: 'Total',
        };
    }
    static types() {
        return {
            page: 'number',
            silencePolicies: { 'type': 'array', 'itemType': ListSilencePoliciesResponseBodyPageBeanSilencePolicies },
            size: 'number',
            total: 'number',
        };
    }
}
exports.ListSilencePoliciesResponseBodyPageBean = ListSilencePoliciesResponseBodyPageBean;
class ListTraceAppsResponseBodyTraceApps extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            appName: 'AppName',
            createTime: 'CreateTime',
            labels: 'Labels',
            pid: 'Pid',
            regionId: 'RegionId',
            show: 'Show',
            type: 'Type',
            updateTime: 'UpdateTime',
            userId: 'UserId',
        };
    }
    static types() {
        return {
            appId: 'number',
            appName: 'string',
            createTime: 'number',
            labels: { 'type': 'array', 'itemType': 'string' },
            pid: 'string',
            regionId: 'string',
            show: 'boolean',
            type: 'string',
            updateTime: 'number',
            userId: 'string',
        };
    }
}
exports.ListTraceAppsResponseBodyTraceApps = ListTraceAppsResponseBodyTraceApps;
class QueryMetricByPageRequestFilters extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            key: 'Key',
            value: 'Value',
        };
    }
    static types() {
        return {
            key: 'string',
            value: 'string',
        };
    }
}
exports.QueryMetricByPageRequestFilters = QueryMetricByPageRequestFilters;
class QueryMetricByPageResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            items: 'Items',
            page: 'Page',
            pageSize: 'PageSize',
            total: 'Total',
        };
    }
    static types() {
        return {
            items: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            page: 'number',
            pageSize: 'number',
            total: 'number',
        };
    }
}
exports.QueryMetricByPageResponseBodyData = QueryMetricByPageResponseBodyData;
class QueryPromInstallStatusResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            isControllerInstalled: 'isControllerInstalled',
        };
    }
    static types() {
        return {
            isControllerInstalled: 'boolean',
        };
    }
}
exports.QueryPromInstallStatusResponseBodyData = QueryPromInstallStatusResponseBodyData;
class RemoveAliClusterIdsFromPrometheusGlobalViewResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            info: 'Info',
            msg: 'Msg',
            success: 'Success',
        };
    }
    static types() {
        return {
            info: 'string',
            msg: 'string',
            success: 'boolean',
        };
    }
}
exports.RemoveAliClusterIdsFromPrometheusGlobalViewResponseBodyData = RemoveAliClusterIdsFromPrometheusGlobalViewResponseBodyData;
class RemoveSourcesFromPrometheusGlobalViewResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            info: 'Info',
            msg: 'Msg',
            success: 'Success',
        };
    }
    static types() {
        return {
            info: 'string',
            msg: 'string',
            success: 'boolean',
        };
    }
}
exports.RemoveSourcesFromPrometheusGlobalViewResponseBodyData = RemoveSourcesFromPrometheusGlobalViewResponseBodyData;
class SaveTraceAppConfigRequestSettings extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            key: 'Key',
            value: 'Value',
        };
    }
    static types() {
        return {
            key: 'string',
            value: 'string',
        };
    }
}
exports.SaveTraceAppConfigRequestSettings = SaveTraceAppConfigRequestSettings;
class SearchAlertContactResponseBodyPageBeanContacts extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            contactId: 'ContactId',
            contactName: 'ContactName',
            content: 'Content',
            createTime: 'CreateTime',
            dingRobot: 'DingRobot',
            email: 'Email',
            phone: 'Phone',
            systemNoc: 'SystemNoc',
            updateTime: 'UpdateTime',
            userId: 'UserId',
            webhook: 'Webhook',
        };
    }
    static types() {
        return {
            contactId: 'number',
            contactName: 'string',
            content: 'string',
            createTime: 'number',
            dingRobot: 'string',
            email: 'string',
            phone: 'string',
            systemNoc: 'boolean',
            updateTime: 'number',
            userId: 'string',
            webhook: 'string',
        };
    }
}
exports.SearchAlertContactResponseBodyPageBeanContacts = SearchAlertContactResponseBodyPageBeanContacts;
class SearchAlertContactResponseBodyPageBean extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            contacts: 'Contacts',
            pageNumber: 'PageNumber',
            pageSize: 'PageSize',
            totalCount: 'TotalCount',
        };
    }
    static types() {
        return {
            contacts: { 'type': 'array', 'itemType': SearchAlertContactResponseBodyPageBeanContacts },
            pageNumber: 'number',
            pageSize: 'number',
            totalCount: 'number',
        };
    }
}
exports.SearchAlertContactResponseBodyPageBean = SearchAlertContactResponseBodyPageBean;
class SearchAlertContactGroupResponseBodyContactGroupsContacts extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            contactId: 'ContactId',
            contactName: 'ContactName',
            createTime: 'CreateTime',
            dingRobot: 'DingRobot',
            email: 'Email',
            phone: 'Phone',
            systemNoc: 'SystemNoc',
            updateTime: 'UpdateTime',
            userId: 'UserId',
        };
    }
    static types() {
        return {
            contactId: 'number',
            contactName: 'string',
            createTime: 'number',
            dingRobot: 'string',
            email: 'string',
            phone: 'string',
            systemNoc: 'boolean',
            updateTime: 'number',
            userId: 'string',
        };
    }
}
exports.SearchAlertContactGroupResponseBodyContactGroupsContacts = SearchAlertContactGroupResponseBodyContactGroupsContacts;
class SearchAlertContactGroupResponseBodyContactGroups extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            contactGroupId: 'ContactGroupId',
            contactGroupName: 'ContactGroupName',
            contacts: 'Contacts',
            createTime: 'CreateTime',
            updateTime: 'UpdateTime',
            userId: 'UserId',
        };
    }
    static types() {
        return {
            contactGroupId: 'number',
            contactGroupName: 'string',
            contacts: { 'type': 'array', 'itemType': SearchAlertContactGroupResponseBodyContactGroupsContacts },
            createTime: 'number',
            updateTime: 'number',
            userId: 'string',
        };
    }
}
exports.SearchAlertContactGroupResponseBodyContactGroups = SearchAlertContactGroupResponseBodyContactGroups;
class SearchAlertHistoriesResponseBodyPageBeanAlarmHistories extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alarmContent: 'AlarmContent',
            alarmResponseCode: 'AlarmResponseCode',
            alarmSources: 'AlarmSources',
            alarmTime: 'AlarmTime',
            alarmType: 'AlarmType',
            emails: 'Emails',
            id: 'Id',
            phones: 'Phones',
            strategyId: 'StrategyId',
            target: 'Target',
            userId: 'UserId',
        };
    }
    static types() {
        return {
            alarmContent: 'string',
            alarmResponseCode: 'number',
            alarmSources: 'string',
            alarmTime: 'number',
            alarmType: 'number',
            emails: 'string',
            id: 'number',
            phones: 'string',
            strategyId: 'string',
            target: 'string',
            userId: 'string',
        };
    }
}
exports.SearchAlertHistoriesResponseBodyPageBeanAlarmHistories = SearchAlertHistoriesResponseBodyPageBeanAlarmHistories;
class SearchAlertHistoriesResponseBodyPageBean extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alarmHistories: 'AlarmHistories',
            pageNumber: 'PageNumber',
            pageSize: 'PageSize',
            totalCount: 'TotalCount',
        };
    }
    static types() {
        return {
            alarmHistories: { 'type': 'array', 'itemType': SearchAlertHistoriesResponseBodyPageBeanAlarmHistories },
            pageNumber: 'number',
            pageSize: 'number',
            totalCount: 'number',
        };
    }
}
exports.SearchAlertHistoriesResponseBodyPageBean = SearchAlertHistoriesResponseBodyPageBean;
class SearchAlertRulesResponseBodyPageBeanAlertRulesAlarmContext extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alarmContentSubTitle: 'AlarmContentSubTitle',
            alarmContentTemplate: 'AlarmContentTemplate',
            content: 'Content',
            subTitle: 'SubTitle',
        };
    }
    static types() {
        return {
            alarmContentSubTitle: 'string',
            alarmContentTemplate: 'string',
            content: 'string',
            subTitle: 'string',
        };
    }
}
exports.SearchAlertRulesResponseBodyPageBeanAlertRulesAlarmContext = SearchAlertRulesResponseBodyPageBeanAlertRulesAlarmContext;
class SearchAlertRulesResponseBodyPageBeanAlertRulesAlertRuleRules extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            aggregates: 'Aggregates',
            alias: 'Alias',
            measure: 'Measure',
            NValue: 'NValue',
            operator: 'Operator',
            value: 'Value',
        };
    }
    static types() {
        return {
            aggregates: 'string',
            alias: 'string',
            measure: 'string',
            NValue: 'number',
            operator: 'string',
            value: 'number',
        };
    }
}
exports.SearchAlertRulesResponseBodyPageBeanAlertRulesAlertRuleRules = SearchAlertRulesResponseBodyPageBeanAlertRulesAlertRuleRules;
class SearchAlertRulesResponseBodyPageBeanAlertRulesAlertRule extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            operator: 'Operator',
            rules: 'Rules',
        };
    }
    static types() {
        return {
            operator: 'string',
            rules: { 'type': 'array', 'itemType': SearchAlertRulesResponseBodyPageBeanAlertRulesAlertRuleRules },
        };
    }
}
exports.SearchAlertRulesResponseBodyPageBeanAlertRulesAlertRule = SearchAlertRulesResponseBodyPageBeanAlertRulesAlertRule;
class SearchAlertRulesResponseBodyPageBeanAlertRulesMetricParamDimensions extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            key: 'Key',
            type: 'Type',
            value: 'Value',
        };
    }
    static types() {
        return {
            key: 'string',
            type: 'string',
            value: 'string',
        };
    }
}
exports.SearchAlertRulesResponseBodyPageBeanAlertRulesMetricParamDimensions = SearchAlertRulesResponseBodyPageBeanAlertRulesMetricParamDimensions;
class SearchAlertRulesResponseBodyPageBeanAlertRulesMetricParam extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appGroupId: 'AppGroupId',
            appId: 'AppId',
            dimensions: 'Dimensions',
            pid: 'Pid',
            type: 'Type',
        };
    }
    static types() {
        return {
            appGroupId: 'string',
            appId: 'string',
            dimensions: { 'type': 'array', 'itemType': SearchAlertRulesResponseBodyPageBeanAlertRulesMetricParamDimensions },
            pid: 'string',
            type: 'string',
        };
    }
}
exports.SearchAlertRulesResponseBodyPageBeanAlertRulesMetricParam = SearchAlertRulesResponseBodyPageBeanAlertRulesMetricParam;
class SearchAlertRulesResponseBodyPageBeanAlertRulesNotice extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            endTime: 'EndTime',
            noticeEndTime: 'NoticeEndTime',
            noticeStartTime: 'NoticeStartTime',
            startTime: 'StartTime',
        };
    }
    static types() {
        return {
            endTime: 'number',
            noticeEndTime: 'number',
            noticeStartTime: 'number',
            startTime: 'number',
        };
    }
}
exports.SearchAlertRulesResponseBodyPageBeanAlertRulesNotice = SearchAlertRulesResponseBodyPageBeanAlertRulesNotice;
class SearchAlertRulesResponseBodyPageBeanAlertRules extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alarmContext: 'AlarmContext',
            alertLevel: 'AlertLevel',
            alertRule: 'AlertRule',
            alertTitle: 'AlertTitle',
            alertType: 'AlertType',
            alertVersion: 'AlertVersion',
            alertWays: 'AlertWays',
            config: 'Config',
            contactGroupIdList: 'ContactGroupIdList',
            contactGroupIds: 'ContactGroupIds',
            createTime: 'CreateTime',
            hostByAlertManager: 'HostByAlertManager',
            id: 'Id',
            metricParam: 'MetricParam',
            notice: 'Notice',
            regionId: 'RegionId',
            status: 'Status',
            taskId: 'TaskId',
            taskStatus: 'TaskStatus',
            title: 'Title',
            updateTime: 'UpdateTime',
            userId: 'UserId',
        };
    }
    static types() {
        return {
            alarmContext: SearchAlertRulesResponseBodyPageBeanAlertRulesAlarmContext,
            alertLevel: 'string',
            alertRule: SearchAlertRulesResponseBodyPageBeanAlertRulesAlertRule,
            alertTitle: 'string',
            alertType: 'number',
            alertVersion: 'number',
            alertWays: { 'type': 'array', 'itemType': 'string' },
            config: 'string',
            contactGroupIdList: 'string',
            contactGroupIds: 'string',
            createTime: 'number',
            hostByAlertManager: 'boolean',
            id: 'number',
            metricParam: SearchAlertRulesResponseBodyPageBeanAlertRulesMetricParam,
            notice: SearchAlertRulesResponseBodyPageBeanAlertRulesNotice,
            regionId: 'string',
            status: 'string',
            taskId: 'number',
            taskStatus: 'string',
            title: 'string',
            updateTime: 'number',
            userId: 'string',
        };
    }
}
exports.SearchAlertRulesResponseBodyPageBeanAlertRules = SearchAlertRulesResponseBodyPageBeanAlertRules;
class SearchAlertRulesResponseBodyPageBean extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alertRules: 'AlertRules',
            pageNumber: 'PageNumber',
            pageSize: 'PageSize',
            totalCount: 'TotalCount',
        };
    }
    static types() {
        return {
            alertRules: { 'type': 'array', 'itemType': SearchAlertRulesResponseBodyPageBeanAlertRules },
            pageNumber: 'number',
            pageSize: 'number',
            totalCount: 'number',
        };
    }
}
exports.SearchAlertRulesResponseBodyPageBean = SearchAlertRulesResponseBodyPageBean;
class SearchEventsResponseBodyPageBeanEvent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alertId: 'AlertId',
            alertName: 'AlertName',
            alertRule: 'AlertRule',
            alertType: 'AlertType',
            eventLevel: 'EventLevel',
            eventTime: 'EventTime',
            id: 'Id',
            links: 'Links',
            message: 'Message',
        };
    }
    static types() {
        return {
            alertId: 'number',
            alertName: 'string',
            alertRule: 'string',
            alertType: 'number',
            eventLevel: 'string',
            eventTime: 'number',
            id: 'number',
            links: { 'type': 'array', 'itemType': 'string' },
            message: 'string',
        };
    }
}
exports.SearchEventsResponseBodyPageBeanEvent = SearchEventsResponseBodyPageBeanEvent;
class SearchEventsResponseBodyPageBean extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            event: 'Event',
            pageNumber: 'PageNumber',
            pageSize: 'PageSize',
            totalCount: 'TotalCount',
        };
    }
    static types() {
        return {
            event: { 'type': 'array', 'itemType': SearchEventsResponseBodyPageBeanEvent },
            pageNumber: 'number',
            pageSize: 'number',
            totalCount: 'number',
        };
    }
}
exports.SearchEventsResponseBodyPageBean = SearchEventsResponseBodyPageBean;
class SearchRetcodeAppByPageResponseBodyPageBeanRetcodeApps extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            appName: 'AppName',
            createTime: 'CreateTime',
            nickName: 'NickName',
            pid: 'Pid',
            regionId: 'RegionId',
            retcodeAppType: 'RetcodeAppType',
            type: 'Type',
            updateTime: 'UpdateTime',
            userId: 'UserId',
        };
    }
    static types() {
        return {
            appId: 'number',
            appName: 'string',
            createTime: 'number',
            nickName: 'string',
            pid: 'string',
            regionId: 'string',
            retcodeAppType: 'string',
            type: 'string',
            updateTime: 'number',
            userId: 'string',
        };
    }
}
exports.SearchRetcodeAppByPageResponseBodyPageBeanRetcodeApps = SearchRetcodeAppByPageResponseBodyPageBeanRetcodeApps;
class SearchRetcodeAppByPageResponseBodyPageBean extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageNumber: 'PageNumber',
            pageSize: 'PageSize',
            retcodeApps: 'RetcodeApps',
            totalCount: 'TotalCount',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
            retcodeApps: { 'type': 'array', 'itemType': SearchRetcodeAppByPageResponseBodyPageBeanRetcodeApps },
            totalCount: 'number',
        };
    }
}
exports.SearchRetcodeAppByPageResponseBodyPageBean = SearchRetcodeAppByPageResponseBodyPageBean;
class SearchTraceAppByNameResponseBodyTraceApps extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            appName: 'AppName',
            createTime: 'CreateTime',
            labels: 'Labels',
            pid: 'Pid',
            regionId: 'RegionId',
            show: 'Show',
            type: 'Type',
            updateTime: 'UpdateTime',
            userId: 'UserId',
        };
    }
    static types() {
        return {
            appId: 'number',
            appName: 'string',
            createTime: 'number',
            labels: { 'type': 'array', 'itemType': 'string' },
            pid: 'string',
            regionId: 'string',
            show: 'boolean',
            type: 'string',
            updateTime: 'number',
            userId: 'string',
        };
    }
}
exports.SearchTraceAppByNameResponseBodyTraceApps = SearchTraceAppByNameResponseBodyTraceApps;
class SearchTraceAppByPageResponseBodyPageBeanTraceApps extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            appName: 'AppName',
            createTime: 'CreateTime',
            labels: 'Labels',
            pid: 'Pid',
            regionId: 'RegionId',
            show: 'Show',
            type: 'Type',
            updateTime: 'UpdateTime',
            userId: 'UserId',
        };
    }
    static types() {
        return {
            appId: 'number',
            appName: 'string',
            createTime: 'number',
            labels: { 'type': 'array', 'itemType': 'string' },
            pid: 'string',
            regionId: 'string',
            show: 'boolean',
            type: 'string',
            updateTime: 'number',
            userId: 'string',
        };
    }
}
exports.SearchTraceAppByPageResponseBodyPageBeanTraceApps = SearchTraceAppByPageResponseBodyPageBeanTraceApps;
class SearchTraceAppByPageResponseBodyPageBean extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageNumber: 'PageNumber',
            pageSize: 'PageSize',
            totalCount: 'TotalCount',
            traceApps: 'TraceApps',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
            totalCount: 'number',
            traceApps: { 'type': 'array', 'itemType': SearchTraceAppByPageResponseBodyPageBeanTraceApps },
        };
    }
}
exports.SearchTraceAppByPageResponseBodyPageBean = SearchTraceAppByPageResponseBodyPageBean;
class SearchTracesRequestExclusionFilters extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            key: 'Key',
            value: 'Value',
        };
    }
    static types() {
        return {
            key: 'string',
            value: 'string',
        };
    }
}
exports.SearchTracesRequestExclusionFilters = SearchTracesRequestExclusionFilters;
class SearchTracesRequestTag extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            key: 'Key',
            value: 'Value',
        };
    }
    static types() {
        return {
            key: 'string',
            value: 'string',
        };
    }
}
exports.SearchTracesRequestTag = SearchTracesRequestTag;
class SearchTracesResponseBodyTraceInfos extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            duration: 'Duration',
            operationName: 'OperationName',
            serviceIp: 'ServiceIp',
            serviceName: 'ServiceName',
            timestamp: 'Timestamp',
            traceID: 'TraceID',
        };
    }
    static types() {
        return {
            duration: 'number',
            operationName: 'string',
            serviceIp: 'string',
            serviceName: 'string',
            timestamp: 'number',
            traceID: 'string',
        };
    }
}
exports.SearchTracesResponseBodyTraceInfos = SearchTracesResponseBodyTraceInfos;
class SearchTracesByPageRequestExclusionFilters extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            key: 'Key',
            value: 'Value',
        };
    }
    static types() {
        return {
            key: 'string',
            value: 'string',
        };
    }
}
exports.SearchTracesByPageRequestExclusionFilters = SearchTracesByPageRequestExclusionFilters;
class SearchTracesByPageRequestTags extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            key: 'Key',
            value: 'Value',
        };
    }
    static types() {
        return {
            key: 'string',
            value: 'string',
        };
    }
}
exports.SearchTracesByPageRequestTags = SearchTracesByPageRequestTags;
class SearchTracesByPageResponseBodyPageBeanTraceInfos extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            duration: 'Duration',
            operationName: 'OperationName',
            serviceIp: 'ServiceIp',
            serviceName: 'ServiceName',
            timestamp: 'Timestamp',
            traceID: 'TraceID',
        };
    }
    static types() {
        return {
            duration: 'number',
            operationName: 'string',
            serviceIp: 'string',
            serviceName: 'string',
            timestamp: 'number',
            traceID: 'string',
        };
    }
}
exports.SearchTracesByPageResponseBodyPageBeanTraceInfos = SearchTracesByPageResponseBodyPageBeanTraceInfos;
class SearchTracesByPageResponseBodyPageBean extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageNumber: 'PageNumber',
            pageSize: 'PageSize',
            total: 'Total',
            traceInfos: 'TraceInfos',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
            total: 'number',
            traceInfos: { 'type': 'array', 'itemType': SearchTracesByPageResponseBodyPageBeanTraceInfos },
        };
    }
}
exports.SearchTracesByPageResponseBodyPageBean = SearchTracesByPageResponseBodyPageBean;
class UpdateIntegrationResponseBodyIntegration extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            apiEndpoint: 'ApiEndpoint',
            autoRecover: 'AutoRecover',
            description: 'Description',
            duplicateKey: 'DuplicateKey',
            extendedFieldRedefineRules: 'ExtendedFieldRedefineRules',
            fieldRedefineRules: 'FieldRedefineRules',
            initiativeRecoverField: 'InitiativeRecoverField',
            initiativeRecoverValue: 'InitiativeRecoverValue',
            integrationId: 'IntegrationId',
            integrationName: 'IntegrationName',
            integrationProductType: 'IntegrationProductType',
            liveness: 'Liveness',
            recoverTime: 'RecoverTime',
            shortToken: 'ShortToken',
            stat: 'Stat',
            state: 'State',
        };
    }
    static types() {
        return {
            apiEndpoint: 'string',
            autoRecover: 'boolean',
            description: 'string',
            duplicateKey: 'string',
            extendedFieldRedefineRules: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            fieldRedefineRules: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            initiativeRecoverField: 'string',
            initiativeRecoverValue: 'string',
            integrationId: 'number',
            integrationName: 'string',
            integrationProductType: 'string',
            liveness: 'string',
            recoverTime: 'number',
            shortToken: 'string',
            stat: { 'type': 'array', 'itemType': 'number' },
            state: 'boolean',
        };
    }
}
exports.UpdateIntegrationResponseBodyIntegration = UpdateIntegrationResponseBodyIntegration;
class UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRuleAnnotations extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'Name',
            value: 'Value',
        };
    }
    static types() {
        return {
            name: 'string',
            value: 'string',
        };
    }
}
exports.UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRuleAnnotations = UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRuleAnnotations;
class UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRuleLabels extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'Name',
            value: 'Value',
        };
    }
    static types() {
        return {
            name: 'string',
            value: 'string',
        };
    }
}
exports.UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRuleLabels = UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRuleLabels;
class UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRule extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alertId: 'AlertId',
            alertName: 'AlertName',
            annotations: 'Annotations',
            clusterId: 'ClusterId',
            dispatchRuleId: 'DispatchRuleId',
            duration: 'Duration',
            expression: 'Expression',
            labels: 'Labels',
            message: 'Message',
            notifyType: 'NotifyType',
            status: 'Status',
            type: 'Type',
        };
    }
    static types() {
        return {
            alertId: 'number',
            alertName: 'string',
            annotations: { 'type': 'array', 'itemType': UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRuleAnnotations },
            clusterId: 'string',
            dispatchRuleId: 'number',
            duration: 'string',
            expression: 'string',
            labels: { 'type': 'array', 'itemType': UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRuleLabels },
            message: 'string',
            notifyType: 'string',
            status: 'number',
            type: 'string',
        };
    }
}
exports.UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRule = UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRule;
class UploadResponseBodyUploadResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            fid: 'Fid',
            fileName: 'FileName',
            uploadTime: 'UploadTime',
        };
    }
    static types() {
        return {
            fid: 'string',
            fileName: 'string',
            uploadTime: 'string',
        };
    }
}
exports.UploadResponseBodyUploadResult = UploadResponseBodyUploadResult;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._endpointRule = "regional";
        this._endpointMap = {
            'ap-northeast-2-pop': "arms.aliyuncs.com",
            'cn-beijing-finance-1': "arms.aliyuncs.com",
            'cn-beijing-finance-pop': "arms.aliyuncs.com",
            'cn-beijing-gov-1': "arms.aliyuncs.com",
            'cn-beijing-nu16-b01': "arms.aliyuncs.com",
            'cn-edge-1': "arms.aliyuncs.com",
            'cn-fujian': "arms.aliyuncs.com",
            'cn-haidian-cm12-c01': "arms.aliyuncs.com",
            'cn-hangzhou-bj-b01': "arms.aliyuncs.com",
            'cn-hangzhou-internal-prod-1': "arms.aliyuncs.com",
            'cn-hangzhou-internal-test-1': "arms.aliyuncs.com",
            'cn-hangzhou-internal-test-2': "arms.aliyuncs.com",
            'cn-hangzhou-internal-test-3': "arms.aliyuncs.com",
            'cn-hangzhou-test-306': "arms.aliyuncs.com",
            'cn-hongkong-finance-pop': "arms.aliyuncs.com",
            'cn-huhehaote-nebula-1': "arms.aliyuncs.com",
            'cn-qingdao-nebula': "arms.aliyuncs.com",
            'cn-shanghai-et15-b01': "arms.aliyuncs.com",
            'cn-shanghai-et2-b01': "arms.aliyuncs.com",
            'cn-shanghai-inner': "arms.aliyuncs.com",
            'cn-shanghai-internal-test-1': "arms.aliyuncs.com",
            'cn-shenzhen-inner': "arms.aliyuncs.com",
            'cn-shenzhen-st4-d01': "arms.aliyuncs.com",
            'cn-shenzhen-su18-b01': "arms.aliyuncs.com",
            'cn-wuhan': "arms.aliyuncs.com",
            'cn-yushanfang': "arms.aliyuncs.com",
            'cn-zhangbei': "arms.aliyuncs.com",
            'cn-zhangbei-na61-b01': "arms.aliyuncs.com",
            'cn-zhangjiakou-na62-a01': "arms.aliyuncs.com",
            'cn-zhengzhou-nebula-1': "arms.aliyuncs.com",
            'eu-west-1-oxs': "arms.aliyuncs.com",
            'me-east-1': "arms.aliyuncs.com",
            'rus-west-1-pop': "arms.aliyuncs.com",
        };
        this.checkConfig(config);
        this._endpoint = this.getEndpoint("arms", this._regionId, this._endpointRule, this._network, this._suffix, this._endpointMap, this._endpoint);
    }
    getEndpoint(productId, regionId, endpointRule, network, suffix, endpointMap, endpoint) {
        if (!tea_util_1.default.empty(endpoint)) {
            return endpoint;
        }
        if (!tea_util_1.default.isUnset(endpointMap) && !tea_util_1.default.empty(endpointMap[regionId])) {
            return endpointMap[regionId];
        }
        return endpoint_util_1.default.getEndpointRules(productId, regionId, endpointRule, network, suffix);
    }
    async addAliClusterIdsToPrometheusGlobalViewWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.clusterIds)) {
            query["ClusterIds"] = request.clusterIds;
        }
        if (!tea_util_1.default.isUnset(request.globalViewClusterId)) {
            query["GlobalViewClusterId"] = request.globalViewClusterId;
        }
        if (!tea_util_1.default.isUnset(request.groupName)) {
            query["GroupName"] = request.groupName;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "AddAliClusterIdsToPrometheusGlobalView",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new AddAliClusterIdsToPrometheusGlobalViewResponse({}));
    }
    async addAliClusterIdsToPrometheusGlobalView(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.addAliClusterIdsToPrometheusGlobalViewWithOptions(request, runtime);
    }
    async addGrafanaWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.clusterId)) {
            query["ClusterId"] = request.clusterId;
        }
        if (!tea_util_1.default.isUnset(request.integration)) {
            query["Integration"] = request.integration;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "AddGrafana",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new AddGrafanaResponse({}));
    }
    async addGrafana(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.addGrafanaWithOptions(request, runtime);
    }
    async addIntegrationWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.clusterId)) {
            query["ClusterId"] = request.clusterId;
        }
        if (!tea_util_1.default.isUnset(request.integration)) {
            query["Integration"] = request.integration;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "AddIntegration",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new AddIntegrationResponse({}));
    }
    async addIntegration(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.addIntegrationWithOptions(request, runtime);
    }
    async addPrometheusGlobalViewWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.clusters)) {
            query["Clusters"] = request.clusters;
        }
        if (!tea_util_1.default.isUnset(request.groupName)) {
            query["GroupName"] = request.groupName;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "AddPrometheusGlobalView",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new AddPrometheusGlobalViewResponse({}));
    }
    async addPrometheusGlobalView(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.addPrometheusGlobalViewWithOptions(request, runtime);
    }
    async addPrometheusGlobalViewByAliClusterIdsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.clusterIds)) {
            query["ClusterIds"] = request.clusterIds;
        }
        if (!tea_util_1.default.isUnset(request.groupName)) {
            query["GroupName"] = request.groupName;
        }
        if (!tea_util_1.default.isUnset(request.productCode)) {
            query["ProductCode"] = request.productCode;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "AddPrometheusGlobalViewByAliClusterIds",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new AddPrometheusGlobalViewByAliClusterIdsResponse({}));
    }
    async addPrometheusGlobalViewByAliClusterIds(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.addPrometheusGlobalViewByAliClusterIdsWithOptions(request, runtime);
    }
    async addPrometheusInstanceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.name)) {
            query["Name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            query["Type"] = request.type;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "AddPrometheusInstance",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new AddPrometheusInstanceResponse({}));
    }
    async addPrometheusInstance(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.addPrometheusInstanceWithOptions(request, runtime);
    }
    async addRecordingRuleWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.clusterId)) {
            query["ClusterId"] = request.clusterId;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.ruleYaml)) {
            query["RuleYaml"] = request.ruleYaml;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "AddRecordingRule",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new AddRecordingRuleResponse({}));
    }
    async addRecordingRule(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.addRecordingRuleWithOptions(request, runtime);
    }
    async appendInstancesToPrometheusGlobalViewWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.clusters)) {
            query["Clusters"] = request.clusters;
        }
        if (!tea_util_1.default.isUnset(request.globalViewClusterId)) {
            query["GlobalViewClusterId"] = request.globalViewClusterId;
        }
        if (!tea_util_1.default.isUnset(request.groupName)) {
            query["GroupName"] = request.groupName;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "AppendInstancesToPrometheusGlobalView",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new AppendInstancesToPrometheusGlobalViewResponse({}));
    }
    async appendInstancesToPrometheusGlobalView(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.appendInstancesToPrometheusGlobalViewWithOptions(request, runtime);
    }
    async applyScenarioWithOptions(tmpReq, runtime) {
        tea_util_1.default.validateModel(tmpReq);
        let request = new ApplyScenarioShrinkRequest({});
        openapi_util_1.default.convert(tmpReq, request);
        if (!tea_util_1.default.isUnset(tmpReq.config)) {
            request.configShrink = openapi_util_1.default.arrayToStringWithSpecifiedStyle(tmpReq.config, "Config", "json");
        }
        let query = {};
        if (!tea_util_1.default.isUnset(request.appId)) {
            query["AppId"] = request.appId;
        }
        if (!tea_util_1.default.isUnset(request.configShrink)) {
            query["Config"] = request.configShrink;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            query["Name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.scenario)) {
            query["Scenario"] = request.scenario;
        }
        if (!tea_util_1.default.isUnset(request.sign)) {
            query["Sign"] = request.sign;
        }
        if (!tea_util_1.default.isUnset(request.snDump)) {
            query["SnDump"] = request.snDump;
        }
        if (!tea_util_1.default.isUnset(request.snForce)) {
            query["SnForce"] = request.snForce;
        }
        if (!tea_util_1.default.isUnset(request.snStat)) {
            query["SnStat"] = request.snStat;
        }
        if (!tea_util_1.default.isUnset(request.snTransfer)) {
            query["SnTransfer"] = request.snTransfer;
        }
        if (!tea_util_1.default.isUnset(request.updateOption)) {
            query["UpdateOption"] = request.updateOption;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ApplyScenario",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ApplyScenarioResponse({}));
    }
    async applyScenario(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.applyScenarioWithOptions(request, runtime);
    }
    async checkServiceStatusWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.svcCode)) {
            query["SvcCode"] = request.svcCode;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CheckServiceStatus",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CheckServiceStatusResponse({}));
    }
    async checkServiceStatus(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.checkServiceStatusWithOptions(request, runtime);
    }
    async configAppWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.appIds)) {
            query["AppIds"] = request.appIds;
        }
        if (!tea_util_1.default.isUnset(request.enable)) {
            query["Enable"] = request.enable;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ConfigApp",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ConfigAppResponse({}));
    }
    async configApp(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.configAppWithOptions(request, runtime);
    }
    async createAlertContactWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.contactName)) {
            query["ContactName"] = request.contactName;
        }
        if (!tea_util_1.default.isUnset(request.dingRobotWebhookUrl)) {
            query["DingRobotWebhookUrl"] = request.dingRobotWebhookUrl;
        }
        if (!tea_util_1.default.isUnset(request.email)) {
            query["Email"] = request.email;
        }
        if (!tea_util_1.default.isUnset(request.phoneNum)) {
            query["PhoneNum"] = request.phoneNum;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.systemNoc)) {
            query["SystemNoc"] = request.systemNoc;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CreateAlertContact",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateAlertContactResponse({}));
    }
    async createAlertContact(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createAlertContactWithOptions(request, runtime);
    }
    async createAlertContactGroupWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.contactGroupName)) {
            query["ContactGroupName"] = request.contactGroupName;
        }
        if (!tea_util_1.default.isUnset(request.contactIds)) {
            query["ContactIds"] = request.contactIds;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CreateAlertContactGroup",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateAlertContactGroupResponse({}));
    }
    async createAlertContactGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createAlertContactGroupWithOptions(request, runtime);
    }
    async createDispatchRuleWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.dispatchRule)) {
            query["DispatchRule"] = request.dispatchRule;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CreateDispatchRule",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateDispatchRuleResponse({}));
    }
    async createDispatchRule(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createDispatchRuleWithOptions(request, runtime);
    }
    async createIntegrationWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.autoRecover)) {
            body["AutoRecover"] = request.autoRecover;
        }
        if (!tea_util_1.default.isUnset(request.description)) {
            body["Description"] = request.description;
        }
        if (!tea_util_1.default.isUnset(request.integrationName)) {
            body["IntegrationName"] = request.integrationName;
        }
        if (!tea_util_1.default.isUnset(request.integrationProductType)) {
            body["IntegrationProductType"] = request.integrationProductType;
        }
        if (!tea_util_1.default.isUnset(request.recoverTime)) {
            body["RecoverTime"] = request.recoverTime;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateIntegration",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateIntegrationResponse({}));
    }
    async createIntegration(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createIntegrationWithOptions(request, runtime);
    }
    async createOrUpdateAlertRuleWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.alertCheckType)) {
            body["AlertCheckType"] = request.alertCheckType;
        }
        if (!tea_util_1.default.isUnset(request.alertGroup)) {
            body["AlertGroup"] = request.alertGroup;
        }
        if (!tea_util_1.default.isUnset(request.alertId)) {
            body["AlertId"] = request.alertId;
        }
        if (!tea_util_1.default.isUnset(request.alertName)) {
            body["AlertName"] = request.alertName;
        }
        if (!tea_util_1.default.isUnset(request.alertRuleContent)) {
            body["AlertRuleContent"] = request.alertRuleContent;
        }
        if (!tea_util_1.default.isUnset(request.alertStatus)) {
            body["AlertStatus"] = request.alertStatus;
        }
        if (!tea_util_1.default.isUnset(request.alertType)) {
            body["AlertType"] = request.alertType;
        }
        if (!tea_util_1.default.isUnset(request.annotations)) {
            body["Annotations"] = request.annotations;
        }
        if (!tea_util_1.default.isUnset(request.autoAddNewApplication)) {
            body["AutoAddNewApplication"] = request.autoAddNewApplication;
        }
        if (!tea_util_1.default.isUnset(request.clusterId)) {
            body["ClusterId"] = request.clusterId;
        }
        if (!tea_util_1.default.isUnset(request.duration)) {
            body["Duration"] = request.duration;
        }
        if (!tea_util_1.default.isUnset(request.filters)) {
            body["Filters"] = request.filters;
        }
        if (!tea_util_1.default.isUnset(request.labels)) {
            body["Labels"] = request.labels;
        }
        if (!tea_util_1.default.isUnset(request.level)) {
            body["Level"] = request.level;
        }
        if (!tea_util_1.default.isUnset(request.message)) {
            body["Message"] = request.message;
        }
        if (!tea_util_1.default.isUnset(request.metricsKey)) {
            body["MetricsKey"] = request.metricsKey;
        }
        if (!tea_util_1.default.isUnset(request.metricsType)) {
            body["MetricsType"] = request.metricsType;
        }
        if (!tea_util_1.default.isUnset(request.notifyStrategy)) {
            body["NotifyStrategy"] = request.notifyStrategy;
        }
        if (!tea_util_1.default.isUnset(request.pids)) {
            body["Pids"] = request.pids;
        }
        if (!tea_util_1.default.isUnset(request.promQL)) {
            body["PromQL"] = request.promQL;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            body["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateOrUpdateAlertRule",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateOrUpdateAlertRuleResponse({}));
    }
    async createOrUpdateAlertRule(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createOrUpdateAlertRuleWithOptions(request, runtime);
    }
    async createOrUpdateContactWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.contactId)) {
            body["ContactId"] = request.contactId;
        }
        if (!tea_util_1.default.isUnset(request.contactName)) {
            body["ContactName"] = request.contactName;
        }
        if (!tea_util_1.default.isUnset(request.email)) {
            body["Email"] = request.email;
        }
        if (!tea_util_1.default.isUnset(request.phone)) {
            body["Phone"] = request.phone;
        }
        if (!tea_util_1.default.isUnset(request.reissueSendNotice)) {
            body["ReissueSendNotice"] = request.reissueSendNotice;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateOrUpdateContact",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateOrUpdateContactResponse({}));
    }
    async createOrUpdateContact(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createOrUpdateContactWithOptions(request, runtime);
    }
    async createOrUpdateContactGroupWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.contactGroupId)) {
            body["ContactGroupId"] = request.contactGroupId;
        }
        if (!tea_util_1.default.isUnset(request.contactGroupName)) {
            body["ContactGroupName"] = request.contactGroupName;
        }
        if (!tea_util_1.default.isUnset(request.contactIds)) {
            body["ContactIds"] = request.contactIds;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateOrUpdateContactGroup",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateOrUpdateContactGroupResponse({}));
    }
    async createOrUpdateContactGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createOrUpdateContactGroupWithOptions(request, runtime);
    }
    async createOrUpdateEventBridgeIntegrationWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.accessKey)) {
            body["AccessKey"] = request.accessKey;
        }
        if (!tea_util_1.default.isUnset(request.accessSecret)) {
            body["AccessSecret"] = request.accessSecret;
        }
        if (!tea_util_1.default.isUnset(request.description)) {
            body["Description"] = request.description;
        }
        if (!tea_util_1.default.isUnset(request.endpoint)) {
            body["Endpoint"] = request.endpoint;
        }
        if (!tea_util_1.default.isUnset(request.eventBusName)) {
            body["EventBusName"] = request.eventBusName;
        }
        if (!tea_util_1.default.isUnset(request.eventBusRegionId)) {
            body["EventBusRegionId"] = request.eventBusRegionId;
        }
        if (!tea_util_1.default.isUnset(request.id)) {
            body["Id"] = request.id;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["Name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.source)) {
            body["Source"] = request.source;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateOrUpdateEventBridgeIntegration",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateOrUpdateEventBridgeIntegrationResponse({}));
    }
    async createOrUpdateEventBridgeIntegration(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createOrUpdateEventBridgeIntegrationWithOptions(request, runtime);
    }
    async createOrUpdateIMRobotWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.cardTemplate)) {
            body["CardTemplate"] = request.cardTemplate;
        }
        if (!tea_util_1.default.isUnset(request.dailyNoc)) {
            body["DailyNoc"] = request.dailyNoc;
        }
        if (!tea_util_1.default.isUnset(request.dailyNocTime)) {
            body["DailyNocTime"] = request.dailyNocTime;
        }
        if (!tea_util_1.default.isUnset(request.dingSignKey)) {
            body["DingSignKey"] = request.dingSignKey;
        }
        if (!tea_util_1.default.isUnset(request.enableOutgoing)) {
            body["EnableOutgoing"] = request.enableOutgoing;
        }
        if (!tea_util_1.default.isUnset(request.robotAddress)) {
            body["RobotAddress"] = request.robotAddress;
        }
        if (!tea_util_1.default.isUnset(request.robotId)) {
            body["RobotId"] = request.robotId;
        }
        if (!tea_util_1.default.isUnset(request.robotName)) {
            body["RobotName"] = request.robotName;
        }
        if (!tea_util_1.default.isUnset(request.token)) {
            body["Token"] = request.token;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            body["Type"] = request.type;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateOrUpdateIMRobot",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateOrUpdateIMRobotResponse({}));
    }
    async createOrUpdateIMRobot(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createOrUpdateIMRobotWithOptions(request, runtime);
    }
    async createOrUpdateNotificationPolicyWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.escalationPolicyId)) {
            body["EscalationPolicyId"] = request.escalationPolicyId;
        }
        if (!tea_util_1.default.isUnset(request.groupRule)) {
            body["GroupRule"] = request.groupRule;
        }
        if (!tea_util_1.default.isUnset(request.id)) {
            body["Id"] = request.id;
        }
        if (!tea_util_1.default.isUnset(request.integrationId)) {
            body["IntegrationId"] = request.integrationId;
        }
        if (!tea_util_1.default.isUnset(request.matchingRules)) {
            body["MatchingRules"] = request.matchingRules;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["Name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.notifyRule)) {
            body["NotifyRule"] = request.notifyRule;
        }
        if (!tea_util_1.default.isUnset(request.notifyTemplate)) {
            body["NotifyTemplate"] = request.notifyTemplate;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            body["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.repeat)) {
            body["Repeat"] = request.repeat;
        }
        if (!tea_util_1.default.isUnset(request.repeatInterval)) {
            body["RepeatInterval"] = request.repeatInterval;
        }
        if (!tea_util_1.default.isUnset(request.sendRecoverMessage)) {
            body["SendRecoverMessage"] = request.sendRecoverMessage;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateOrUpdateNotificationPolicy",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateOrUpdateNotificationPolicyResponse({}));
    }
    async createOrUpdateNotificationPolicy(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createOrUpdateNotificationPolicyWithOptions(request, runtime);
    }
    async createOrUpdateSilencePolicyWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.id)) {
            body["Id"] = request.id;
        }
        if (!tea_util_1.default.isUnset(request.matchingRules)) {
            body["MatchingRules"] = request.matchingRules;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["Name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            body["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateOrUpdateSilencePolicy",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateOrUpdateSilencePolicyResponse({}));
    }
    async createOrUpdateSilencePolicy(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createOrUpdateSilencePolicyWithOptions(request, runtime);
    }
    async createOrUpdateWebhookContactWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bizHeaders)) {
            body["BizHeaders"] = request.bizHeaders;
        }
        if (!tea_util_1.default.isUnset(request.bizParams)) {
            body["BizParams"] = request.bizParams;
        }
        if (!tea_util_1.default.isUnset(request.body)) {
            body["Body"] = request.body;
        }
        if (!tea_util_1.default.isUnset(request.method)) {
            body["Method"] = request.method;
        }
        if (!tea_util_1.default.isUnset(request.recoverBody)) {
            body["RecoverBody"] = request.recoverBody;
        }
        if (!tea_util_1.default.isUnset(request.url)) {
            body["Url"] = request.url;
        }
        if (!tea_util_1.default.isUnset(request.webhookId)) {
            body["WebhookId"] = request.webhookId;
        }
        if (!tea_util_1.default.isUnset(request.webhookName)) {
            body["WebhookName"] = request.webhookName;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateOrUpdateWebhookContact",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateOrUpdateWebhookContactResponse({}));
    }
    async createOrUpdateWebhookContact(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createOrUpdateWebhookContactWithOptions(request, runtime);
    }
    async createPrometheusAlertRuleWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.alertName)) {
            query["AlertName"] = request.alertName;
        }
        if (!tea_util_1.default.isUnset(request.annotations)) {
            query["Annotations"] = request.annotations;
        }
        if (!tea_util_1.default.isUnset(request.clusterId)) {
            query["ClusterId"] = request.clusterId;
        }
        if (!tea_util_1.default.isUnset(request.dispatchRuleId)) {
            query["DispatchRuleId"] = request.dispatchRuleId;
        }
        if (!tea_util_1.default.isUnset(request.duration)) {
            query["Duration"] = request.duration;
        }
        if (!tea_util_1.default.isUnset(request.expression)) {
            query["Expression"] = request.expression;
        }
        if (!tea_util_1.default.isUnset(request.labels)) {
            query["Labels"] = request.labels;
        }
        if (!tea_util_1.default.isUnset(request.message)) {
            query["Message"] = request.message;
        }
        if (!tea_util_1.default.isUnset(request.notifyType)) {
            query["NotifyType"] = request.notifyType;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            query["Type"] = request.type;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CreatePrometheusAlertRule",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreatePrometheusAlertRuleResponse({}));
    }
    async createPrometheusAlertRule(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createPrometheusAlertRuleWithOptions(request, runtime);
    }
    async createRetcodeAppWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.retcodeAppName)) {
            query["RetcodeAppName"] = request.retcodeAppName;
        }
        if (!tea_util_1.default.isUnset(request.retcodeAppType)) {
            query["RetcodeAppType"] = request.retcodeAppType;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CreateRetcodeApp",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateRetcodeAppResponse({}));
    }
    async createRetcodeApp(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createRetcodeAppWithOptions(request, runtime);
    }
    async createSyntheticTaskWithOptions(tmpReq, runtime) {
        tea_util_1.default.validateModel(tmpReq);
        let request = new CreateSyntheticTaskShrinkRequest({});
        openapi_util_1.default.convert(tmpReq, request);
        if (!tea_util_1.default.isUnset($tea.toMap(tmpReq.commonParam))) {
            request.commonParamShrink = openapi_util_1.default.arrayToStringWithSpecifiedStyle($tea.toMap(tmpReq.commonParam), "CommonParam", "json");
        }
        if (!tea_util_1.default.isUnset($tea.toMap(tmpReq.download))) {
            request.downloadShrink = openapi_util_1.default.arrayToStringWithSpecifiedStyle($tea.toMap(tmpReq.download), "Download", "json");
        }
        if (!tea_util_1.default.isUnset($tea.toMap(tmpReq.extendInterval))) {
            request.extendIntervalShrink = openapi_util_1.default.arrayToStringWithSpecifiedStyle($tea.toMap(tmpReq.extendInterval), "ExtendInterval", "json");
        }
        if (!tea_util_1.default.isUnset(tmpReq.monitorList)) {
            request.monitorListShrink = openapi_util_1.default.arrayToStringWithSpecifiedStyle(tmpReq.monitorList, "MonitorList", "json");
        }
        if (!tea_util_1.default.isUnset($tea.toMap(tmpReq.navigation))) {
            request.navigationShrink = openapi_util_1.default.arrayToStringWithSpecifiedStyle($tea.toMap(tmpReq.navigation), "Navigation", "json");
        }
        if (!tea_util_1.default.isUnset($tea.toMap(tmpReq.net))) {
            request.netShrink = openapi_util_1.default.arrayToStringWithSpecifiedStyle($tea.toMap(tmpReq.net), "Net", "json");
        }
        if (!tea_util_1.default.isUnset($tea.toMap(tmpReq.protocol))) {
            request.protocolShrink = openapi_util_1.default.arrayToStringWithSpecifiedStyle($tea.toMap(tmpReq.protocol), "Protocol", "json");
        }
        let query = {};
        if (!tea_util_1.default.isUnset(request.commonParamShrink)) {
            query["CommonParam"] = request.commonParamShrink;
        }
        if (!tea_util_1.default.isUnset(request.downloadShrink)) {
            query["Download"] = request.downloadShrink;
        }
        if (!tea_util_1.default.isUnset(request.extendIntervalShrink)) {
            query["ExtendInterval"] = request.extendIntervalShrink;
        }
        if (!tea_util_1.default.isUnset(request.intervalTime)) {
            query["IntervalTime"] = request.intervalTime;
        }
        if (!tea_util_1.default.isUnset(request.intervalType)) {
            query["IntervalType"] = request.intervalType;
        }
        if (!tea_util_1.default.isUnset(request.ipType)) {
            query["IpType"] = request.ipType;
        }
        if (!tea_util_1.default.isUnset(request.monitorListShrink)) {
            query["MonitorList"] = request.monitorListShrink;
        }
        if (!tea_util_1.default.isUnset(request.navigationShrink)) {
            query["Navigation"] = request.navigationShrink;
        }
        if (!tea_util_1.default.isUnset(request.netShrink)) {
            query["Net"] = request.netShrink;
        }
        if (!tea_util_1.default.isUnset(request.protocolShrink)) {
            query["Protocol"] = request.protocolShrink;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.taskName)) {
            query["TaskName"] = request.taskName;
        }
        if (!tea_util_1.default.isUnset(request.taskType)) {
            query["TaskType"] = request.taskType;
        }
        if (!tea_util_1.default.isUnset(request.updateTask)) {
            query["UpdateTask"] = request.updateTask;
        }
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CreateSyntheticTask",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateSyntheticTaskResponse({}));
    }
    async createSyntheticTask(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createSyntheticTaskWithOptions(request, runtime);
    }
    async createWebhookWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.body)) {
            query["Body"] = request.body;
        }
        if (!tea_util_1.default.isUnset(request.contactName)) {
            query["ContactName"] = request.contactName;
        }
        if (!tea_util_1.default.isUnset(request.httpHeaders)) {
            query["HttpHeaders"] = request.httpHeaders;
        }
        if (!tea_util_1.default.isUnset(request.httpParams)) {
            query["HttpParams"] = request.httpParams;
        }
        if (!tea_util_1.default.isUnset(request.method)) {
            query["Method"] = request.method;
        }
        if (!tea_util_1.default.isUnset(request.recoverBody)) {
            query["RecoverBody"] = request.recoverBody;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CreateWebhook",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateWebhookResponse({}));
    }
    async createWebhook(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createWebhookWithOptions(request, runtime);
    }
    async delAuthTokenWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.clusterId)) {
            query["ClusterId"] = request.clusterId;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DelAuthToken",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DelAuthTokenResponse({}));
    }
    async delAuthToken(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.delAuthTokenWithOptions(request, runtime);
    }
    async deleteAlertContactWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.contactId)) {
            query["ContactId"] = request.contactId;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteAlertContact",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeleteAlertContactResponse({}));
    }
    async deleteAlertContact(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteAlertContactWithOptions(request, runtime);
    }
    async deleteAlertContactGroupWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.contactGroupId)) {
            query["ContactGroupId"] = request.contactGroupId;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteAlertContactGroup",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeleteAlertContactGroupResponse({}));
    }
    async deleteAlertContactGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteAlertContactGroupWithOptions(request, runtime);
    }
    async deleteAlertRuleWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.alertId)) {
            query["AlertId"] = request.alertId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteAlertRule",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeleteAlertRuleResponse({}));
    }
    async deleteAlertRule(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteAlertRuleWithOptions(request, runtime);
    }
    async deleteAlertRulesWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.alertIds)) {
            query["AlertIds"] = request.alertIds;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteAlertRules",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeleteAlertRulesResponse({}));
    }
    async deleteAlertRules(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteAlertRulesWithOptions(request, runtime);
    }
    async deleteCmsExporterWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.clusterId)) {
            query["ClusterId"] = request.clusterId;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteCmsExporter",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeleteCmsExporterResponse({}));
    }
    async deleteCmsExporter(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteCmsExporterWithOptions(request, runtime);
    }
    async deleteContactWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.contactId)) {
            query["ContactId"] = request.contactId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteContact",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeleteContactResponse({}));
    }
    async deleteContact(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteContactWithOptions(request, runtime);
    }
    async deleteContactGroupWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.contactGroupId)) {
            query["ContactGroupId"] = request.contactGroupId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteContactGroup",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeleteContactGroupResponse({}));
    }
    async deleteContactGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteContactGroupWithOptions(request, runtime);
    }
    async deleteDispatchRuleWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.id)) {
            query["Id"] = request.id;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteDispatchRule",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeleteDispatchRuleResponse({}));
    }
    async deleteDispatchRule(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteDispatchRuleWithOptions(request, runtime);
    }
    async deleteEventBridgeIntegrationWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.id)) {
            body["Id"] = request.id;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "DeleteEventBridgeIntegration",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeleteEventBridgeIntegrationResponse({}));
    }
    async deleteEventBridgeIntegration(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteEventBridgeIntegrationWithOptions(request, runtime);
    }
    async deleteGrafanaResourceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.clusterId)) {
            body["ClusterId"] = request.clusterId;
        }
        if (!tea_util_1.default.isUnset(request.clusterName)) {
            body["ClusterName"] = request.clusterName;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "DeleteGrafanaResource",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeleteGrafanaResourceResponse({}));
    }
    async deleteGrafanaResource(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteGrafanaResourceWithOptions(request, runtime);
    }
    async deleteIMRobotWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.robotId)) {
            query["RobotId"] = request.robotId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteIMRobot",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeleteIMRobotResponse({}));
    }
    async deleteIMRobot(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteIMRobotWithOptions(request, runtime);
    }
    async deleteIntegrationWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.clusterId)) {
            query["ClusterId"] = request.clusterId;
        }
        if (!tea_util_1.default.isUnset(request.integration)) {
            query["Integration"] = request.integration;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteIntegration",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeleteIntegrationResponse({}));
    }
    async deleteIntegration(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteIntegrationWithOptions(request, runtime);
    }
    async deleteIntegrationsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = openapi_util_1.default.query(tea_util_1.default.toMap(request));
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteIntegrations",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "GET",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeleteIntegrationsResponse({}));
    }
    async deleteIntegrations(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteIntegrationsWithOptions(request, runtime);
    }
    async deleteNotificationPolicyWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.id)) {
            query["Id"] = request.id;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteNotificationPolicy",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeleteNotificationPolicyResponse({}));
    }
    async deleteNotificationPolicy(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteNotificationPolicyWithOptions(request, runtime);
    }
    async deletePrometheusAlertRuleWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.alertId)) {
            query["AlertId"] = request.alertId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeletePrometheusAlertRule",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeletePrometheusAlertRuleResponse({}));
    }
    async deletePrometheusAlertRule(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deletePrometheusAlertRuleWithOptions(request, runtime);
    }
    async deletePrometheusGlobalViewWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.globalViewClusterId)) {
            query["GlobalViewClusterId"] = request.globalViewClusterId;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeletePrometheusGlobalView",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeletePrometheusGlobalViewResponse({}));
    }
    async deletePrometheusGlobalView(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deletePrometheusGlobalViewWithOptions(request, runtime);
    }
    async deleteRetcodeAppWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.appId)) {
            query["AppId"] = request.appId;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteRetcodeApp",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeleteRetcodeAppResponse({}));
    }
    async deleteRetcodeApp(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteRetcodeAppWithOptions(request, runtime);
    }
    async deleteScenarioWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.scenarioId)) {
            query["ScenarioId"] = request.scenarioId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteScenario",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeleteScenarioResponse({}));
    }
    async deleteScenario(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteScenarioWithOptions(request, runtime);
    }
    async deleteSilencePolicyWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.id)) {
            query["Id"] = request.id;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteSilencePolicy",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeleteSilencePolicyResponse({}));
    }
    async deleteSilencePolicy(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteSilencePolicyWithOptions(request, runtime);
    }
    async deleteSourceMapWithOptions(tmpReq, runtime) {
        tea_util_1.default.validateModel(tmpReq);
        let request = new DeleteSourceMapShrinkRequest({});
        openapi_util_1.default.convert(tmpReq, request);
        if (!tea_util_1.default.isUnset(tmpReq.fidList)) {
            request.fidListShrink = openapi_util_1.default.arrayToStringWithSpecifiedStyle(tmpReq.fidList, "FidList", "json");
        }
        let query = {};
        if (!tea_util_1.default.isUnset(request.fidListShrink)) {
            query["FidList"] = request.fidListShrink;
        }
        if (!tea_util_1.default.isUnset(request.pid)) {
            query["Pid"] = request.pid;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteSourceMap",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeleteSourceMapResponse({}));
    }
    async deleteSourceMap(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteSourceMapWithOptions(request, runtime);
    }
    async deleteSyntheticTaskWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.taskIds)) {
            query["TaskIds"] = request.taskIds;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteSyntheticTask",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeleteSyntheticTaskResponse({}));
    }
    async deleteSyntheticTask(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteSyntheticTaskWithOptions(request, runtime);
    }
    async deleteTraceAppWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.appId)) {
            query["AppId"] = request.appId;
        }
        if (!tea_util_1.default.isUnset(request.pid)) {
            query["Pid"] = request.pid;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            query["Type"] = request.type;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteTraceApp",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeleteTraceAppResponse({}));
    }
    async deleteTraceApp(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteTraceAppWithOptions(request, runtime);
    }
    async deleteWebhookContactWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.webhookId)) {
            query["WebhookId"] = request.webhookId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteWebhookContact",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeleteWebhookContactResponse({}));
    }
    async deleteWebhookContact(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteWebhookContactWithOptions(request, runtime);
    }
    async describeContactGroupsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.contactGroupName)) {
            query["ContactGroupName"] = request.contactGroupName;
        }
        if (!tea_util_1.default.isUnset(request.isDetail)) {
            query["IsDetail"] = request.isDetail;
        }
        if (!tea_util_1.default.isUnset(request.page)) {
            query["Page"] = request.page;
        }
        if (!tea_util_1.default.isUnset(request.size)) {
            query["Size"] = request.size;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DescribeContactGroups",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DescribeContactGroupsResponse({}));
    }
    async describeContactGroups(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeContactGroupsWithOptions(request, runtime);
    }
    async describeContactsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.contactName)) {
            query["ContactName"] = request.contactName;
        }
        if (!tea_util_1.default.isUnset(request.email)) {
            query["Email"] = request.email;
        }
        if (!tea_util_1.default.isUnset(request.page)) {
            query["Page"] = request.page;
        }
        if (!tea_util_1.default.isUnset(request.phone)) {
            query["Phone"] = request.phone;
        }
        if (!tea_util_1.default.isUnset(request.size)) {
            query["Size"] = request.size;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DescribeContacts",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DescribeContactsResponse({}));
    }
    async describeContacts(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeContactsWithOptions(request, runtime);
    }
    async describeDispatchRuleWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.id)) {
            query["Id"] = request.id;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DescribeDispatchRule",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DescribeDispatchRuleResponse({}));
    }
    async describeDispatchRule(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeDispatchRuleWithOptions(request, runtime);
    }
    async describeIMRobotsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.page)) {
            query["Page"] = request.page;
        }
        if (!tea_util_1.default.isUnset(request.robotName)) {
            query["RobotName"] = request.robotName;
        }
        if (!tea_util_1.default.isUnset(request.size)) {
            query["Size"] = request.size;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DescribeIMRobots",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DescribeIMRobotsResponse({}));
    }
    async describeIMRobots(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeIMRobotsWithOptions(request, runtime);
    }
    async describePrometheusAlertRuleWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.alertId)) {
            query["AlertId"] = request.alertId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DescribePrometheusAlertRule",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DescribePrometheusAlertRuleResponse({}));
    }
    async describePrometheusAlertRule(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describePrometheusAlertRuleWithOptions(request, runtime);
    }
    async describeTraceLicenseKeyWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DescribeTraceLicenseKey",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DescribeTraceLicenseKeyResponse({}));
    }
    async describeTraceLicenseKey(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeTraceLicenseKeyWithOptions(request, runtime);
    }
    async describeWebhookContactsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = openapi_util_1.default.query(tea_util_1.default.toMap(request));
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DescribeWebhookContacts",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "GET",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DescribeWebhookContactsResponse({}));
    }
    async describeWebhookContacts(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeWebhookContactsWithOptions(request, runtime);
    }
    async getAgentDownloadUrlWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = openapi_util_1.default.query(tea_util_1.default.toMap(request));
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetAgentDownloadUrl",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "GET",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetAgentDownloadUrlResponse({}));
    }
    async getAgentDownloadUrl(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getAgentDownloadUrlWithOptions(request, runtime);
    }
    async getAlertRulesWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.alertIds)) {
            query["AlertIds"] = request.alertIds;
        }
        if (!tea_util_1.default.isUnset(request.alertNames)) {
            query["AlertNames"] = request.alertNames;
        }
        if (!tea_util_1.default.isUnset(request.alertStatus)) {
            query["AlertStatus"] = request.alertStatus;
        }
        if (!tea_util_1.default.isUnset(request.alertType)) {
            query["AlertType"] = request.alertType;
        }
        if (!tea_util_1.default.isUnset(request.clusterId)) {
            query["ClusterId"] = request.clusterId;
        }
        if (!tea_util_1.default.isUnset(request.page)) {
            query["Page"] = request.page;
        }
        if (!tea_util_1.default.isUnset(request.productCode)) {
            query["ProductCode"] = request.productCode;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.size)) {
            query["Size"] = request.size;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetAlertRules",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetAlertRulesResponse({}));
    }
    async getAlertRules(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getAlertRulesWithOptions(request, runtime);
    }
    async getAppApiByPageWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.currentPage)) {
            query["CurrentPage"] = request.currentPage;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            query["EndTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.intervalMills)) {
            query["IntervalMills"] = request.intervalMills;
        }
        if (!tea_util_1.default.isUnset(request.PId)) {
            query["PId"] = request.PId;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            query["StartTime"] = request.startTime;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetAppApiByPage",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetAppApiByPageResponse({}));
    }
    async getAppApiByPage(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getAppApiByPageWithOptions(request, runtime);
    }
    async getAuthTokenWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.clusterId)) {
            query["ClusterId"] = request.clusterId;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetAuthToken",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetAuthTokenResponse({}));
    }
    async getAuthToken(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getAuthTokenWithOptions(request, runtime);
    }
    async getClusterAllUrlWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.clusterId)) {
            query["ClusterId"] = request.clusterId;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetClusterAllUrl",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetClusterAllUrlResponse({}));
    }
    async getClusterAllUrl(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getClusterAllUrlWithOptions(request, runtime);
    }
    async getExploreUrlWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.clusterId)) {
            query["ClusterId"] = request.clusterId;
        }
        if (!tea_util_1.default.isUnset(request.expression)) {
            query["Expression"] = request.expression;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            query["Type"] = request.type;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetExploreUrl",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetExploreUrlResponse({}));
    }
    async getExploreUrl(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getExploreUrlWithOptions(request, runtime);
    }
    async getIntegrationStateWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.clusterId)) {
            query["ClusterId"] = request.clusterId;
        }
        if (!tea_util_1.default.isUnset(request.integration)) {
            query["Integration"] = request.integration;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetIntegrationState",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetIntegrationStateResponse({}));
    }
    async getIntegrationState(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getIntegrationStateWithOptions(request, runtime);
    }
    async getManagedPrometheusStatusWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.clusterId)) {
            query["ClusterId"] = request.clusterId;
        }
        if (!tea_util_1.default.isUnset(request.clusterType)) {
            query["ClusterType"] = request.clusterType;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetManagedPrometheusStatus",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetManagedPrometheusStatusResponse({}));
    }
    async getManagedPrometheusStatus(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getManagedPrometheusStatusWithOptions(request, runtime);
    }
    async getMultipleTraceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.traceIDs)) {
            query["TraceIDs"] = request.traceIDs;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetMultipleTrace",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetMultipleTraceResponse({}));
    }
    async getMultipleTrace(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getMultipleTraceWithOptions(request, runtime);
    }
    async getOnCallSchedulesDetailWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = openapi_util_1.default.query(tea_util_1.default.toMap(request));
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetOnCallSchedulesDetail",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "GET",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetOnCallSchedulesDetailResponse({}));
    }
    async getOnCallSchedulesDetail(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getOnCallSchedulesDetailWithOptions(request, runtime);
    }
    async getPrometheusApiTokenWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetPrometheusApiToken",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetPrometheusApiTokenResponse({}));
    }
    async getPrometheusApiToken(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getPrometheusApiTokenWithOptions(request, runtime);
    }
    async getPrometheusGlobalViewWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.globalViewClusterId)) {
            query["GlobalViewClusterId"] = request.globalViewClusterId;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetPrometheusGlobalView",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetPrometheusGlobalViewResponse({}));
    }
    async getPrometheusGlobalView(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getPrometheusGlobalViewWithOptions(request, runtime);
    }
    async getRecordingRuleWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.clusterId)) {
            query["ClusterId"] = request.clusterId;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetRecordingRule",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetRecordingRuleResponse({}));
    }
    async getRecordingRule(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getRecordingRuleWithOptions(request, runtime);
    }
    async getRetcodeShareUrlWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pid)) {
            query["Pid"] = request.pid;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetRetcodeShareUrl",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetRetcodeShareUrlResponse({}));
    }
    async getRetcodeShareUrl(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getRetcodeShareUrlWithOptions(request, runtime);
    }
    async getSourceMapInfoWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.ascendingSequence)) {
            query["AscendingSequence"] = request.ascendingSequence;
        }
        if (!tea_util_1.default.isUnset(request.edition)) {
            query["Edition"] = request.edition;
        }
        if (!tea_util_1.default.isUnset(request.ID)) {
            query["ID"] = request.ID;
        }
        if (!tea_util_1.default.isUnset(request.keyword)) {
            query["Keyword"] = request.keyword;
        }
        if (!tea_util_1.default.isUnset(request.orderField)) {
            query["OrderField"] = request.orderField;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetSourceMapInfo",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetSourceMapInfoResponse({}));
    }
    async getSourceMapInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getSourceMapInfoWithOptions(request, runtime);
    }
    async getStackWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.endTime)) {
            query["EndTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.pid)) {
            query["Pid"] = request.pid;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.rpcID)) {
            query["RpcID"] = request.rpcID;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            query["StartTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.traceID)) {
            query["TraceID"] = request.traceID;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetStack",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetStackResponse({}));
    }
    async getStack(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getStackWithOptions(request, runtime);
    }
    async getSyntheticTaskDetailWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.taskId)) {
            query["TaskId"] = request.taskId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetSyntheticTaskDetail",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetSyntheticTaskDetailResponse({}));
    }
    async getSyntheticTaskDetail(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getSyntheticTaskDetailWithOptions(request, runtime);
    }
    async getSyntheticTaskListWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.direction)) {
            query["Direction"] = request.direction;
        }
        if (!tea_util_1.default.isUnset(request.order)) {
            query["Order"] = request.order;
        }
        if (!tea_util_1.default.isUnset(request.pageNum)) {
            query["PageNum"] = request.pageNum;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.taskName)) {
            query["TaskName"] = request.taskName;
        }
        if (!tea_util_1.default.isUnset(request.taskStatus)) {
            query["TaskStatus"] = request.taskStatus;
        }
        if (!tea_util_1.default.isUnset(request.taskType)) {
            query["TaskType"] = request.taskType;
        }
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetSyntheticTaskList",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetSyntheticTaskListResponse({}));
    }
    async getSyntheticTaskList(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getSyntheticTaskListWithOptions(request, runtime);
    }
    async getSyntheticTaskMonitorsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetSyntheticTaskMonitors",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetSyntheticTaskMonitorsResponse({}));
    }
    async getSyntheticTaskMonitors(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getSyntheticTaskMonitorsWithOptions(request, runtime);
    }
    async getTraceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.endTime)) {
            query["EndTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            query["StartTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.traceID)) {
            query["TraceID"] = request.traceID;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetTrace",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetTraceResponse({}));
    }
    async getTrace(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getTraceWithOptions(request, runtime);
    }
    async getTraceAppWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pid)) {
            query["Pid"] = request.pid;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetTraceApp",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetTraceAppResponse({}));
    }
    async getTraceApp(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getTraceAppWithOptions(request, runtime);
    }
    async importAppAlertRulesWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.contactGroupIds)) {
            query["ContactGroupIds"] = request.contactGroupIds;
        }
        if (!tea_util_1.default.isUnset(request.isAutoStart)) {
            query["IsAutoStart"] = request.isAutoStart;
        }
        if (!tea_util_1.default.isUnset(request.pids)) {
            query["Pids"] = request.pids;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.templageAlertConfig)) {
            query["TemplageAlertConfig"] = request.templageAlertConfig;
        }
        if (!tea_util_1.default.isUnset(request.templateAlertId)) {
            query["TemplateAlertId"] = request.templateAlertId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ImportAppAlertRules",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ImportAppAlertRulesResponse({}));
    }
    async importAppAlertRules(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.importAppAlertRulesWithOptions(request, runtime);
    }
    async installCmsExporterWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.clusterId)) {
            query["ClusterId"] = request.clusterId;
        }
        if (!tea_util_1.default.isUnset(request.cmsArgs)) {
            query["CmsArgs"] = request.cmsArgs;
        }
        if (!tea_util_1.default.isUnset(request.directArgs)) {
            query["DirectArgs"] = request.directArgs;
        }
        if (!tea_util_1.default.isUnset(request.enableTag)) {
            query["EnableTag"] = request.enableTag;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "InstallCmsExporter",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new InstallCmsExporterResponse({}));
    }
    async installCmsExporter(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.installCmsExporterWithOptions(request, runtime);
    }
    async installManagedPrometheusWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.clusterId)) {
            query["ClusterId"] = request.clusterId;
        }
        if (!tea_util_1.default.isUnset(request.clusterType)) {
            query["ClusterType"] = request.clusterType;
        }
        if (!tea_util_1.default.isUnset(request.kubeConfig)) {
            query["KubeConfig"] = request.kubeConfig;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.securityGroupId)) {
            query["SecurityGroupId"] = request.securityGroupId;
        }
        if (!tea_util_1.default.isUnset(request.vSwitchId)) {
            query["VSwitchId"] = request.vSwitchId;
        }
        if (!tea_util_1.default.isUnset(request.vpcId)) {
            query["VpcId"] = request.vpcId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "InstallManagedPrometheus",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new InstallManagedPrometheusResponse({}));
    }
    async installManagedPrometheus(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.installManagedPrometheusWithOptions(request, runtime);
    }
    async listActivatedAlertsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.currentPage)) {
            query["CurrentPage"] = request.currentPage;
        }
        if (!tea_util_1.default.isUnset(request.filter)) {
            query["Filter"] = request.filter;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListActivatedAlerts",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ListActivatedAlertsResponse({}));
    }
    async listActivatedAlerts(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listActivatedAlertsWithOptions(request, runtime);
    }
    async listAlertEventsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.alertName)) {
            query["AlertName"] = request.alertName;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            query["EndTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.matchingConditions)) {
            query["MatchingConditions"] = request.matchingConditions;
        }
        if (!tea_util_1.default.isUnset(request.page)) {
            query["Page"] = request.page;
        }
        if (!tea_util_1.default.isUnset(request.size)) {
            query["Size"] = request.size;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            query["StartTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.status)) {
            query["Status"] = request.status;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListAlertEvents",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ListAlertEventsResponse({}));
    }
    async listAlertEvents(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listAlertEventsWithOptions(request, runtime);
    }
    async listAlertsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.alertName)) {
            query["AlertName"] = request.alertName;
        }
        if (!tea_util_1.default.isUnset(request.dispatchRuleId)) {
            query["DispatchRuleId"] = request.dispatchRuleId;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            query["EndTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.integrationType)) {
            query["IntegrationType"] = request.integrationType;
        }
        if (!tea_util_1.default.isUnset(request.page)) {
            query["Page"] = request.page;
        }
        if (!tea_util_1.default.isUnset(request.severity)) {
            query["Severity"] = request.severity;
        }
        if (!tea_util_1.default.isUnset(request.showActivities)) {
            query["ShowActivities"] = request.showActivities;
        }
        if (!tea_util_1.default.isUnset(request.showEvents)) {
            query["ShowEvents"] = request.showEvents;
        }
        if (!tea_util_1.default.isUnset(request.size)) {
            query["Size"] = request.size;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            query["StartTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.state)) {
            query["State"] = request.state;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListAlerts",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ListAlertsResponse({}));
    }
    async listAlerts(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listAlertsWithOptions(request, runtime);
    }
    async listClusterFromGrafanaWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListClusterFromGrafana",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ListClusterFromGrafanaResponse({}));
    }
    async listClusterFromGrafana(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listClusterFromGrafanaWithOptions(request, runtime);
    }
    async listCmsInstancesWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.clusterId)) {
            query["ClusterId"] = request.clusterId;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.typeFilter)) {
            query["TypeFilter"] = request.typeFilter;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListCmsInstances",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ListCmsInstancesResponse({}));
    }
    async listCmsInstances(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listCmsInstancesWithOptions(request, runtime);
    }
    async listDashboardsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.clusterId)) {
            query["ClusterId"] = request.clusterId;
        }
        if (!tea_util_1.default.isUnset(request.clusterType)) {
            query["ClusterType"] = request.clusterType;
        }
        if (!tea_util_1.default.isUnset(request.dashboardName)) {
            query["DashboardName"] = request.dashboardName;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            query["Language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.product)) {
            query["Product"] = request.product;
        }
        if (!tea_util_1.default.isUnset(request.recreateSwitch)) {
            query["RecreateSwitch"] = request.recreateSwitch;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.title)) {
            query["Title"] = request.title;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListDashboards",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ListDashboardsResponse({}));
    }
    async listDashboards(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listDashboardsWithOptions(request, runtime);
    }
    async listDashboardsByNameWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.clusterId)) {
            query["ClusterId"] = request.clusterId;
        }
        if (!tea_util_1.default.isUnset(request.clusterType)) {
            query["ClusterType"] = request.clusterType;
        }
        if (!tea_util_1.default.isUnset(request.dashBoardName)) {
            query["DashBoardName"] = request.dashBoardName;
        }
        if (!tea_util_1.default.isUnset(request.dashBoardVersion)) {
            query["DashBoardVersion"] = request.dashBoardVersion;
        }
        if (!tea_util_1.default.isUnset(request.dataSourceType)) {
            query["DataSourceType"] = request.dataSourceType;
        }
        if (!tea_util_1.default.isUnset(request.groupName)) {
            query["GroupName"] = request.groupName;
        }
        if (!tea_util_1.default.isUnset(request.onlyQuery)) {
            query["OnlyQuery"] = request.onlyQuery;
        }
        if (!tea_util_1.default.isUnset(request.productCode)) {
            query["ProductCode"] = request.productCode;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListDashboardsByName",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ListDashboardsByNameResponse({}));
    }
    async listDashboardsByName(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listDashboardsByNameWithOptions(request, runtime);
    }
    async listDispatchRuleWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.name)) {
            query["Name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.system)) {
            query["System"] = request.system;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListDispatchRule",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ListDispatchRuleResponse({}));
    }
    async listDispatchRule(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listDispatchRuleWithOptions(request, runtime);
    }
    async listEscalationPoliciesWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = openapi_util_1.default.query(tea_util_1.default.toMap(request));
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListEscalationPolicies",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "GET",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ListEscalationPoliciesResponse({}));
    }
    async listEscalationPolicies(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listEscalationPoliciesWithOptions(request, runtime);
    }
    async listEventBridgeIntegrationsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = openapi_util_1.default.query(tea_util_1.default.toMap(request));
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListEventBridgeIntegrations",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "GET",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ListEventBridgeIntegrationsResponse({}));
    }
    async listEventBridgeIntegrations(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listEventBridgeIntegrationsWithOptions(request, runtime);
    }
    async listInsightsEventsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.endTime)) {
            query["EndTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.insightsTypes)) {
            query["InsightsTypes"] = request.insightsTypes;
        }
        if (!tea_util_1.default.isUnset(request.pid)) {
            query["Pid"] = request.pid;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            query["StartTime"] = request.startTime;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListInsightsEvents",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ListInsightsEventsResponse({}));
    }
    async listInsightsEvents(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listInsightsEventsWithOptions(request, runtime);
    }
    async listIntegrationWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = openapi_util_1.default.query(tea_util_1.default.toMap(request));
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListIntegration",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "GET",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ListIntegrationResponse({}));
    }
    async listIntegration(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listIntegrationWithOptions(request, runtime);
    }
    async listNotificationPoliciesWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.isDetail)) {
            query["IsDetail"] = request.isDetail;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            query["Name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.page)) {
            query["Page"] = request.page;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.size)) {
            query["Size"] = request.size;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListNotificationPolicies",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ListNotificationPoliciesResponse({}));
    }
    async listNotificationPolicies(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listNotificationPoliciesWithOptions(request, runtime);
    }
    async listOnCallSchedulesWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = openapi_util_1.default.query(tea_util_1.default.toMap(request));
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListOnCallSchedules",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "GET",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ListOnCallSchedulesResponse({}));
    }
    async listOnCallSchedules(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listOnCallSchedulesWithOptions(request, runtime);
    }
    async listPrometheusAlertRulesWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.clusterId)) {
            query["ClusterId"] = request.clusterId;
        }
        if (!tea_util_1.default.isUnset(request.matchExpressions)) {
            query["MatchExpressions"] = request.matchExpressions;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            query["Name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.status)) {
            query["Status"] = request.status;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            query["Type"] = request.type;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListPrometheusAlertRules",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ListPrometheusAlertRulesResponse({}));
    }
    async listPrometheusAlertRules(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listPrometheusAlertRulesWithOptions(request, runtime);
    }
    async listPrometheusAlertTemplatesWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.clusterId)) {
            query["ClusterId"] = request.clusterId;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListPrometheusAlertTemplates",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ListPrometheusAlertTemplatesResponse({}));
    }
    async listPrometheusAlertTemplates(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listPrometheusAlertTemplatesWithOptions(request, runtime);
    }
    async listPrometheusGlobalViewWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListPrometheusGlobalView",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ListPrometheusGlobalViewResponse({}));
    }
    async listPrometheusGlobalView(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listPrometheusGlobalViewWithOptions(request, runtime);
    }
    async listPrometheusInstancesWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.showGlobalView)) {
            query["ShowGlobalView"] = request.showGlobalView;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListPrometheusInstances",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ListPrometheusInstancesResponse({}));
    }
    async listPrometheusInstances(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listPrometheusInstancesWithOptions(request, runtime);
    }
    async listRetcodeAppsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.securityToken)) {
            query["SecurityToken"] = request.securityToken;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListRetcodeApps",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ListRetcodeAppsResponse({}));
    }
    async listRetcodeApps(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listRetcodeAppsWithOptions(request, runtime);
    }
    async listScenarioWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.appId)) {
            query["AppId"] = request.appId;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            query["Name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.scenario)) {
            query["Scenario"] = request.scenario;
        }
        if (!tea_util_1.default.isUnset(request.sign)) {
            query["Sign"] = request.sign;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListScenario",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ListScenarioResponse({}));
    }
    async listScenario(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listScenarioWithOptions(request, runtime);
    }
    async listSilencePoliciesWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.isDetail)) {
            query["IsDetail"] = request.isDetail;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            query["Name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.page)) {
            query["Page"] = request.page;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.size)) {
            query["Size"] = request.size;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListSilencePolicies",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ListSilencePoliciesResponse({}));
    }
    async listSilencePolicies(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listSilencePoliciesWithOptions(request, runtime);
    }
    async listTraceAppsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListTraceApps",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ListTraceAppsResponse({}));
    }
    async listTraceApps(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listTraceAppsWithOptions(request, runtime);
    }
    async manageGetRecordingRuleWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.clusterId)) {
            query["ClusterId"] = request.clusterId;
        }
        if (!tea_util_1.default.isUnset(request.queryUserId)) {
            query["QueryUserId"] = request.queryUserId;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ManageGetRecordingRule",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ManageGetRecordingRuleResponse({}));
    }
    async manageGetRecordingRule(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.manageGetRecordingRuleWithOptions(request, runtime);
    }
    async manageRecordingRuleWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.clusterId)) {
            query["ClusterId"] = request.clusterId;
        }
        if (!tea_util_1.default.isUnset(request.queryUserId)) {
            query["QueryUserId"] = request.queryUserId;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.ruleYaml)) {
            query["RuleYaml"] = request.ruleYaml;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ManageRecordingRule",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ManageRecordingRuleResponse({}));
    }
    async manageRecordingRule(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.manageRecordingRuleWithOptions(request, runtime);
    }
    async openArmsDefaultSLRWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "OpenArmsDefaultSLR",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new OpenArmsDefaultSLRResponse({}));
    }
    async openArmsDefaultSLR(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.openArmsDefaultSLRWithOptions(request, runtime);
    }
    async openArmsServiceSecondVersionWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            query["Type"] = request.type;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "OpenArmsServiceSecondVersion",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new OpenArmsServiceSecondVersionResponse({}));
    }
    async openArmsServiceSecondVersion(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.openArmsServiceSecondVersionWithOptions(request, runtime);
    }
    async openVClusterWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.clusterType)) {
            query["ClusterType"] = request.clusterType;
        }
        if (!tea_util_1.default.isUnset(request.length)) {
            query["Length"] = request.length;
        }
        if (!tea_util_1.default.isUnset(request.product)) {
            query["Product"] = request.product;
        }
        if (!tea_util_1.default.isUnset(request.recreateSwitch)) {
            query["RecreateSwitch"] = request.recreateSwitch;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "OpenVCluster",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new OpenVClusterResponse({}));
    }
    async openVCluster(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.openVClusterWithOptions(request, runtime);
    }
    async openXtraceDefaultSLRWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "OpenXtraceDefaultSLR",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new OpenXtraceDefaultSLRResponse({}));
    }
    async openXtraceDefaultSLR(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.openXtraceDefaultSLRWithOptions(request, runtime);
    }
    async queryMetricByPageWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.currentPage)) {
            query["CurrentPage"] = request.currentPage;
        }
        if (!tea_util_1.default.isUnset(request.customFilters)) {
            query["CustomFilters"] = request.customFilters;
        }
        if (!tea_util_1.default.isUnset(request.dimensions)) {
            query["Dimensions"] = request.dimensions;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            query["EndTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.filters)) {
            query["Filters"] = request.filters;
        }
        if (!tea_util_1.default.isUnset(request.intervalInSec)) {
            query["IntervalInSec"] = request.intervalInSec;
        }
        if (!tea_util_1.default.isUnset(request.measures)) {
            query["Measures"] = request.measures;
        }
        if (!tea_util_1.default.isUnset(request.metric)) {
            query["Metric"] = request.metric;
        }
        if (!tea_util_1.default.isUnset(request.order)) {
            query["Order"] = request.order;
        }
        if (!tea_util_1.default.isUnset(request.orderBy)) {
            query["OrderBy"] = request.orderBy;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            query["StartTime"] = request.startTime;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryMetricByPage",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryMetricByPageResponse({}));
    }
    async queryMetricByPage(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryMetricByPageWithOptions(request, runtime);
    }
    async queryPromInstallStatusWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.clusterId)) {
            query["ClusterId"] = request.clusterId;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryPromInstallStatus",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryPromInstallStatusResponse({}));
    }
    async queryPromInstallStatus(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryPromInstallStatusWithOptions(request, runtime);
    }
    async queryReleaseMetricWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.changeOrderId)) {
            query["ChangeOrderId"] = request.changeOrderId;
        }
        if (!tea_util_1.default.isUnset(request.createTime)) {
            query["CreateTime"] = request.createTime;
        }
        if (!tea_util_1.default.isUnset(request.metricType)) {
            query["MetricType"] = request.metricType;
        }
        if (!tea_util_1.default.isUnset(request.pid)) {
            query["Pid"] = request.pid;
        }
        if (!tea_util_1.default.isUnset(request.proxyUserId)) {
            query["ProxyUserId"] = request.proxyUserId;
        }
        if (!tea_util_1.default.isUnset(request.releaseEndTime)) {
            query["ReleaseEndTime"] = request.releaseEndTime;
        }
        if (!tea_util_1.default.isUnset(request.releaseStartTime)) {
            query["ReleaseStartTime"] = request.releaseStartTime;
        }
        if (!tea_util_1.default.isUnset(request.service)) {
            query["Service"] = request.service;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryReleaseMetric",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryReleaseMetricResponse({}));
    }
    async queryReleaseMetric(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryReleaseMetricWithOptions(request, runtime);
    }
    async removeAliClusterIdsFromPrometheusGlobalViewWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.clusterIds)) {
            query["ClusterIds"] = request.clusterIds;
        }
        if (!tea_util_1.default.isUnset(request.globalViewClusterId)) {
            query["GlobalViewClusterId"] = request.globalViewClusterId;
        }
        if (!tea_util_1.default.isUnset(request.groupName)) {
            query["GroupName"] = request.groupName;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "RemoveAliClusterIdsFromPrometheusGlobalView",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RemoveAliClusterIdsFromPrometheusGlobalViewResponse({}));
    }
    async removeAliClusterIdsFromPrometheusGlobalView(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.removeAliClusterIdsFromPrometheusGlobalViewWithOptions(request, runtime);
    }
    async removeSourcesFromPrometheusGlobalViewWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.globalViewClusterId)) {
            query["GlobalViewClusterId"] = request.globalViewClusterId;
        }
        if (!tea_util_1.default.isUnset(request.groupName)) {
            query["GroupName"] = request.groupName;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.sourceNames)) {
            query["SourceNames"] = request.sourceNames;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "RemoveSourcesFromPrometheusGlobalView",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RemoveSourcesFromPrometheusGlobalViewResponse({}));
    }
    async removeSourcesFromPrometheusGlobalView(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.removeSourcesFromPrometheusGlobalViewWithOptions(request, runtime);
    }
    async saveTraceAppConfigWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pid)) {
            query["Pid"] = request.pid;
        }
        if (!tea_util_1.default.isUnset(request.settings)) {
            query["Settings"] = request.settings;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SaveTraceAppConfig",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new SaveTraceAppConfigResponse({}));
    }
    async saveTraceAppConfig(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.saveTraceAppConfigWithOptions(request, runtime);
    }
    async searchAlertContactWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.contactIds)) {
            query["ContactIds"] = request.contactIds;
        }
        if (!tea_util_1.default.isUnset(request.contactName)) {
            query["ContactName"] = request.contactName;
        }
        if (!tea_util_1.default.isUnset(request.currentPage)) {
            query["CurrentPage"] = request.currentPage;
        }
        if (!tea_util_1.default.isUnset(request.email)) {
            query["Email"] = request.email;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.phone)) {
            query["Phone"] = request.phone;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SearchAlertContact",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new SearchAlertContactResponse({}));
    }
    async searchAlertContact(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.searchAlertContactWithOptions(request, runtime);
    }
    async searchAlertContactGroupWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.contactGroupIds)) {
            query["ContactGroupIds"] = request.contactGroupIds;
        }
        if (!tea_util_1.default.isUnset(request.contactGroupName)) {
            query["ContactGroupName"] = request.contactGroupName;
        }
        if (!tea_util_1.default.isUnset(request.contactId)) {
            query["ContactId"] = request.contactId;
        }
        if (!tea_util_1.default.isUnset(request.contactName)) {
            query["ContactName"] = request.contactName;
        }
        if (!tea_util_1.default.isUnset(request.isDetail)) {
            query["IsDetail"] = request.isDetail;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SearchAlertContactGroup",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new SearchAlertContactGroupResponse({}));
    }
    async searchAlertContactGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.searchAlertContactGroupWithOptions(request, runtime);
    }
    async searchAlertHistoriesWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.alertId)) {
            query["AlertId"] = request.alertId;
        }
        if (!tea_util_1.default.isUnset(request.alertType)) {
            query["AlertType"] = request.alertType;
        }
        if (!tea_util_1.default.isUnset(request.currentPage)) {
            query["CurrentPage"] = request.currentPage;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            query["EndTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            query["StartTime"] = request.startTime;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SearchAlertHistories",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new SearchAlertHistoriesResponse({}));
    }
    async searchAlertHistories(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.searchAlertHistoriesWithOptions(request, runtime);
    }
    async searchAlertRulesWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            query["AppType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.currentPage)) {
            query["CurrentPage"] = request.currentPage;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.pid)) {
            query["Pid"] = request.pid;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.systemRegionId)) {
            query["SystemRegionId"] = request.systemRegionId;
        }
        if (!tea_util_1.default.isUnset(request.title)) {
            query["Title"] = request.title;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            query["Type"] = request.type;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SearchAlertRules",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new SearchAlertRulesResponse({}));
    }
    async searchAlertRules(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.searchAlertRulesWithOptions(request, runtime);
    }
    async searchEventsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.alertId)) {
            query["AlertId"] = request.alertId;
        }
        if (!tea_util_1.default.isUnset(request.alertType)) {
            query["AlertType"] = request.alertType;
        }
        if (!tea_util_1.default.isUnset(request.appType)) {
            query["AppType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.currentPage)) {
            query["CurrentPage"] = request.currentPage;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            query["EndTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.isTrigger)) {
            query["IsTrigger"] = request.isTrigger;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.pid)) {
            query["Pid"] = request.pid;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            query["StartTime"] = request.startTime;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SearchEvents",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new SearchEventsResponse({}));
    }
    async searchEvents(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.searchEventsWithOptions(request, runtime);
    }
    async searchRetcodeAppByPageWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["PageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.retcodeAppName)) {
            query["RetcodeAppName"] = request.retcodeAppName;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SearchRetcodeAppByPage",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new SearchRetcodeAppByPageResponse({}));
    }
    async searchRetcodeAppByPage(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.searchRetcodeAppByPageWithOptions(request, runtime);
    }
    async searchTraceAppByNameWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.traceAppName)) {
            query["TraceAppName"] = request.traceAppName;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SearchTraceAppByName",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new SearchTraceAppByNameResponse({}));
    }
    async searchTraceAppByName(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.searchTraceAppByNameWithOptions(request, runtime);
    }
    async searchTraceAppByPageWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["PageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.traceAppName)) {
            query["TraceAppName"] = request.traceAppName;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SearchTraceAppByPage",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new SearchTraceAppByPageResponse({}));
    }
    async searchTraceAppByPage(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.searchTraceAppByPageWithOptions(request, runtime);
    }
    async searchTracesWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.endTime)) {
            query["EndTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.exclusionFilters)) {
            query["ExclusionFilters"] = request.exclusionFilters;
        }
        if (!tea_util_1.default.isUnset(request.minDuration)) {
            query["MinDuration"] = request.minDuration;
        }
        if (!tea_util_1.default.isUnset(request.operationName)) {
            query["OperationName"] = request.operationName;
        }
        if (!tea_util_1.default.isUnset(request.pid)) {
            query["Pid"] = request.pid;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.reverse)) {
            query["Reverse"] = request.reverse;
        }
        if (!tea_util_1.default.isUnset(request.serviceIp)) {
            query["ServiceIp"] = request.serviceIp;
        }
        if (!tea_util_1.default.isUnset(request.serviceName)) {
            query["ServiceName"] = request.serviceName;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            query["StartTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.tag)) {
            query["Tag"] = request.tag;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SearchTraces",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new SearchTracesResponse({}));
    }
    async searchTraces(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.searchTracesWithOptions(request, runtime);
    }
    async searchTracesByPageWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.endTime)) {
            query["EndTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.exclusionFilters)) {
            query["ExclusionFilters"] = request.exclusionFilters;
        }
        if (!tea_util_1.default.isUnset(request.minDuration)) {
            query["MinDuration"] = request.minDuration;
        }
        if (!tea_util_1.default.isUnset(request.operationName)) {
            query["OperationName"] = request.operationName;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["PageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.pid)) {
            query["Pid"] = request.pid;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.reverse)) {
            query["Reverse"] = request.reverse;
        }
        if (!tea_util_1.default.isUnset(request.serviceIp)) {
            query["ServiceIp"] = request.serviceIp;
        }
        if (!tea_util_1.default.isUnset(request.serviceName)) {
            query["ServiceName"] = request.serviceName;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            query["StartTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.tags)) {
            query["Tags"] = request.tags;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SearchTracesByPage",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new SearchTracesByPageResponse({}));
    }
    async searchTracesByPage(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.searchTracesByPageWithOptions(request, runtime);
    }
    async sendTTSVerifyLinkWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.contactId)) {
            body["ContactId"] = request.contactId;
        }
        if (!tea_util_1.default.isUnset(request.phone)) {
            body["Phone"] = request.phone;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SendTTSVerifyLink",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new SendTTSVerifyLinkResponse({}));
    }
    async sendTTSVerifyLink(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.sendTTSVerifyLinkWithOptions(request, runtime);
    }
    async setRetcodeShareStatusWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pid)) {
            query["Pid"] = request.pid;
        }
        if (!tea_util_1.default.isUnset(request.status)) {
            query["Status"] = request.status;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SetRetcodeShareStatus",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new SetRetcodeShareStatusResponse({}));
    }
    async setRetcodeShareStatus(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.setRetcodeShareStatusWithOptions(request, runtime);
    }
    async startAlertWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.alertId)) {
            query["AlertId"] = request.alertId;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "StartAlert",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new StartAlertResponse({}));
    }
    async startAlert(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.startAlertWithOptions(request, runtime);
    }
    async stopAlertWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.alertId)) {
            query["AlertId"] = request.alertId;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "StopAlert",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new StopAlertResponse({}));
    }
    async stopAlert(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.stopAlertWithOptions(request, runtime);
    }
    async switchSyntheticTaskStatusWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.switchStatus)) {
            query["SwitchStatus"] = request.switchStatus;
        }
        if (!tea_util_1.default.isUnset(request.taskIds)) {
            query["TaskIds"] = request.taskIds;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SwitchSyntheticTaskStatus",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new SwitchSyntheticTaskStatusResponse({}));
    }
    async switchSyntheticTaskStatus(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.switchSyntheticTaskStatusWithOptions(request, runtime);
    }
    async syncRecordingRulesWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.clusterId)) {
            query["ClusterId"] = request.clusterId;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.targetClusters)) {
            query["TargetClusters"] = request.targetClusters;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SyncRecordingRules",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new SyncRecordingRulesResponse({}));
    }
    async syncRecordingRules(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.syncRecordingRulesWithOptions(request, runtime);
    }
    async turnOnSecondSwitchWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = openapi_util_1.default.query(tea_util_1.default.toMap(request));
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "TurnOnSecondSwitch",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "GET",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new TurnOnSecondSwitchResponse({}));
    }
    async turnOnSecondSwitch(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.turnOnSecondSwitchWithOptions(request, runtime);
    }
    async uninstallManagedPrometheusWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.clusterId)) {
            query["ClusterId"] = request.clusterId;
        }
        if (!tea_util_1.default.isUnset(request.clusterType)) {
            query["ClusterType"] = request.clusterType;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.vpcId)) {
            query["VpcId"] = request.vpcId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "UninstallManagedPrometheus",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new UninstallManagedPrometheusResponse({}));
    }
    async uninstallManagedPrometheus(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.uninstallManagedPrometheusWithOptions(request, runtime);
    }
    async uninstallPromClusterWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.clusterId)) {
            query["ClusterId"] = request.clusterId;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "UninstallPromCluster",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new UninstallPromClusterResponse({}));
    }
    async uninstallPromCluster(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.uninstallPromClusterWithOptions(request, runtime);
    }
    async updateAlertContactWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.contactId)) {
            query["ContactId"] = request.contactId;
        }
        if (!tea_util_1.default.isUnset(request.contactName)) {
            query["ContactName"] = request.contactName;
        }
        if (!tea_util_1.default.isUnset(request.dingRobotWebhookUrl)) {
            query["DingRobotWebhookUrl"] = request.dingRobotWebhookUrl;
        }
        if (!tea_util_1.default.isUnset(request.email)) {
            query["Email"] = request.email;
        }
        if (!tea_util_1.default.isUnset(request.phoneNum)) {
            query["PhoneNum"] = request.phoneNum;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.systemNoc)) {
            query["SystemNoc"] = request.systemNoc;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "UpdateAlertContact",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new UpdateAlertContactResponse({}));
    }
    async updateAlertContact(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.updateAlertContactWithOptions(request, runtime);
    }
    async updateAlertContactGroupWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.contactGroupId)) {
            query["ContactGroupId"] = request.contactGroupId;
        }
        if (!tea_util_1.default.isUnset(request.contactGroupName)) {
            query["ContactGroupName"] = request.contactGroupName;
        }
        if (!tea_util_1.default.isUnset(request.contactIds)) {
            query["ContactIds"] = request.contactIds;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "UpdateAlertContactGroup",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new UpdateAlertContactGroupResponse({}));
    }
    async updateAlertContactGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.updateAlertContactGroupWithOptions(request, runtime);
    }
    async updateAlertRuleWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.alertId)) {
            query["AlertId"] = request.alertId;
        }
        if (!tea_util_1.default.isUnset(request.contactGroupIds)) {
            query["ContactGroupIds"] = request.contactGroupIds;
        }
        if (!tea_util_1.default.isUnset(request.isAutoStart)) {
            query["IsAutoStart"] = request.isAutoStart;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.templageAlertConfig)) {
            query["TemplageAlertConfig"] = request.templageAlertConfig;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "UpdateAlertRule",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new UpdateAlertRuleResponse({}));
    }
    async updateAlertRule(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.updateAlertRuleWithOptions(request, runtime);
    }
    async updateDispatchRuleWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.dispatchRule)) {
            query["DispatchRule"] = request.dispatchRule;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "UpdateDispatchRule",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new UpdateDispatchRuleResponse({}));
    }
    async updateDispatchRule(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.updateDispatchRuleWithOptions(request, runtime);
    }
    async updateIntegrationWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.apiEndpoint)) {
            body["ApiEndpoint"] = request.apiEndpoint;
        }
        if (!tea_util_1.default.isUnset(request.autoRecover)) {
            body["AutoRecover"] = request.autoRecover;
        }
        if (!tea_util_1.default.isUnset(request.description)) {
            body["Description"] = request.description;
        }
        if (!tea_util_1.default.isUnset(request.duplicateKey)) {
            body["DuplicateKey"] = request.duplicateKey;
        }
        if (!tea_util_1.default.isUnset(request.extendedFieldRedefineRules)) {
            body["ExtendedFieldRedefineRules"] = request.extendedFieldRedefineRules;
        }
        if (!tea_util_1.default.isUnset(request.fieldRedefineRules)) {
            body["FieldRedefineRules"] = request.fieldRedefineRules;
        }
        if (!tea_util_1.default.isUnset(request.initiativeRecoverField)) {
            body["InitiativeRecoverField"] = request.initiativeRecoverField;
        }
        if (!tea_util_1.default.isUnset(request.initiativeRecoverValue)) {
            body["InitiativeRecoverValue"] = request.initiativeRecoverValue;
        }
        if (!tea_util_1.default.isUnset(request.integrationId)) {
            body["IntegrationId"] = request.integrationId;
        }
        if (!tea_util_1.default.isUnset(request.integrationName)) {
            body["IntegrationName"] = request.integrationName;
        }
        if (!tea_util_1.default.isUnset(request.integrationProductType)) {
            body["IntegrationProductType"] = request.integrationProductType;
        }
        if (!tea_util_1.default.isUnset(request.liveness)) {
            body["Liveness"] = request.liveness;
        }
        if (!tea_util_1.default.isUnset(request.recoverTime)) {
            body["RecoverTime"] = request.recoverTime;
        }
        if (!tea_util_1.default.isUnset(request.shortToken)) {
            body["ShortToken"] = request.shortToken;
        }
        if (!tea_util_1.default.isUnset(request.stat)) {
            body["Stat"] = request.stat;
        }
        if (!tea_util_1.default.isUnset(request.state)) {
            body["State"] = request.state;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateIntegration",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new UpdateIntegrationResponse({}));
    }
    async updateIntegration(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.updateIntegrationWithOptions(request, runtime);
    }
    async updatePrometheusAlertRuleWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.alertId)) {
            query["AlertId"] = request.alertId;
        }
        if (!tea_util_1.default.isUnset(request.alertName)) {
            query["AlertName"] = request.alertName;
        }
        if (!tea_util_1.default.isUnset(request.annotations)) {
            query["Annotations"] = request.annotations;
        }
        if (!tea_util_1.default.isUnset(request.clusterId)) {
            query["ClusterId"] = request.clusterId;
        }
        if (!tea_util_1.default.isUnset(request.dispatchRuleId)) {
            query["DispatchRuleId"] = request.dispatchRuleId;
        }
        if (!tea_util_1.default.isUnset(request.duration)) {
            query["Duration"] = request.duration;
        }
        if (!tea_util_1.default.isUnset(request.expression)) {
            query["Expression"] = request.expression;
        }
        if (!tea_util_1.default.isUnset(request.labels)) {
            query["Labels"] = request.labels;
        }
        if (!tea_util_1.default.isUnset(request.message)) {
            query["Message"] = request.message;
        }
        if (!tea_util_1.default.isUnset(request.notifyType)) {
            query["NotifyType"] = request.notifyType;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            query["Type"] = request.type;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "UpdatePrometheusAlertRule",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new UpdatePrometheusAlertRuleResponse({}));
    }
    async updatePrometheusAlertRule(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.updatePrometheusAlertRuleWithOptions(request, runtime);
    }
    async updateWebhookWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.body)) {
            query["Body"] = request.body;
        }
        if (!tea_util_1.default.isUnset(request.contactId)) {
            query["ContactId"] = request.contactId;
        }
        if (!tea_util_1.default.isUnset(request.contactName)) {
            query["ContactName"] = request.contactName;
        }
        if (!tea_util_1.default.isUnset(request.httpHeaders)) {
            query["HttpHeaders"] = request.httpHeaders;
        }
        if (!tea_util_1.default.isUnset(request.httpParams)) {
            query["HttpParams"] = request.httpParams;
        }
        if (!tea_util_1.default.isUnset(request.method)) {
            query["Method"] = request.method;
        }
        if (!tea_util_1.default.isUnset(request.recoverBody)) {
            query["RecoverBody"] = request.recoverBody;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "UpdateWebhook",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new UpdateWebhookResponse({}));
    }
    async updateWebhook(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.updateWebhookWithOptions(request, runtime);
    }
    async uploadWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.edition)) {
            query["Edition"] = request.edition;
        }
        if (!tea_util_1.default.isUnset(request.fileName)) {
            query["FileName"] = request.fileName;
        }
        if (!tea_util_1.default.isUnset(request.pid)) {
            query["Pid"] = request.pid;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.version)) {
            query["Version"] = request.version;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.file)) {
            body["File"] = request.file;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "Upload",
            version: "2019-08-08",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new UploadResponse({}));
    }
    async upload(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.uploadWithOptions(request, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map