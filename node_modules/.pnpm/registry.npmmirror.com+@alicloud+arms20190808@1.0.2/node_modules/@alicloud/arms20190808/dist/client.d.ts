/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class CallChainInfo extends $tea.Model {
    additionalInfo?: string;
    appName?: string;
    appType?: string;
    children?: CallChainInfo[];
    haveSpan?: boolean;
    logMap?: {
        [key: string]: {
            [key: string]: any;
        };
    };
    logTime?: number;
    parentSpanId?: string;
    pid?: string;
    regionId?: string;
    resultCode?: string;
    rpc?: string;
    rpcId?: string;
    rpcType?: number;
    serverIp?: string;
    span?: number;
    spanId?: string;
    tagMap?: {
        [key: string]: string;
    };
    traceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddAliClusterIdsToPrometheusGlobalViewRequest extends $tea.Model {
    clusterIds?: string;
    globalViewClusterId?: string;
    groupName?: string;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddAliClusterIdsToPrometheusGlobalViewResponseBody extends $tea.Model {
    data?: AddAliClusterIdsToPrometheusGlobalViewResponseBodyData;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddAliClusterIdsToPrometheusGlobalViewResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: AddAliClusterIdsToPrometheusGlobalViewResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddGrafanaRequest extends $tea.Model {
    clusterId?: string;
    integration?: string;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddGrafanaResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddGrafanaResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: AddGrafanaResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddIntegrationRequest extends $tea.Model {
    clusterId?: string;
    integration?: string;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddIntegrationResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddIntegrationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: AddIntegrationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddPrometheusGlobalViewRequest extends $tea.Model {
    clusters?: string;
    groupName?: string;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddPrometheusGlobalViewResponseBody extends $tea.Model {
    data?: AddPrometheusGlobalViewResponseBodyData;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddPrometheusGlobalViewResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: AddPrometheusGlobalViewResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddPrometheusGlobalViewByAliClusterIdsRequest extends $tea.Model {
    clusterIds?: string;
    groupName?: string;
    productCode?: string;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddPrometheusGlobalViewByAliClusterIdsResponseBody extends $tea.Model {
    data?: AddPrometheusGlobalViewByAliClusterIdsResponseBodyData;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddPrometheusGlobalViewByAliClusterIdsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: AddPrometheusGlobalViewByAliClusterIdsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddPrometheusInstanceRequest extends $tea.Model {
    name?: string;
    regionId?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddPrometheusInstanceResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddPrometheusInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: AddPrometheusInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddRecordingRuleRequest extends $tea.Model {
    clusterId?: string;
    regionId?: string;
    ruleYaml?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddRecordingRuleResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddRecordingRuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: AddRecordingRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppendInstancesToPrometheusGlobalViewRequest extends $tea.Model {
    clusters?: string;
    globalViewClusterId?: string;
    groupName?: string;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppendInstancesToPrometheusGlobalViewResponseBody extends $tea.Model {
    data?: AppendInstancesToPrometheusGlobalViewResponseBodyData;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppendInstancesToPrometheusGlobalViewResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: AppendInstancesToPrometheusGlobalViewResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ApplyScenarioRequest extends $tea.Model {
    appId?: string;
    config?: {
        [key: string]: any;
    };
    name?: string;
    regionId?: string;
    scenario?: string;
    sign?: string;
    snDump?: boolean;
    snForce?: boolean;
    snStat?: boolean;
    snTransfer?: boolean;
    updateOption?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ApplyScenarioShrinkRequest extends $tea.Model {
    appId?: string;
    configShrink?: string;
    name?: string;
    regionId?: string;
    scenario?: string;
    sign?: string;
    snDump?: boolean;
    snForce?: boolean;
    snStat?: boolean;
    snTransfer?: boolean;
    updateOption?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ApplyScenarioResponseBody extends $tea.Model {
    requestId?: string;
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ApplyScenarioResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ApplyScenarioResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckServiceStatusRequest extends $tea.Model {
    regionId?: string;
    svcCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckServiceStatusResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckServiceStatusResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CheckServiceStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConfigAppRequest extends $tea.Model {
    appIds?: string;
    enable?: string;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConfigAppResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConfigAppResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ConfigAppResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAlertContactRequest extends $tea.Model {
    contactName?: string;
    dingRobotWebhookUrl?: string;
    email?: string;
    phoneNum?: string;
    regionId?: string;
    systemNoc?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAlertContactResponseBody extends $tea.Model {
    contactId?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAlertContactResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateAlertContactResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAlertContactGroupRequest extends $tea.Model {
    contactGroupName?: string;
    contactIds?: string;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAlertContactGroupResponseBody extends $tea.Model {
    contactGroupId?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAlertContactGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateAlertContactGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDispatchRuleRequest extends $tea.Model {
    dispatchRule?: string;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDispatchRuleResponseBody extends $tea.Model {
    dispatchRuleId?: number;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDispatchRuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateDispatchRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateIntegrationRequest extends $tea.Model {
    autoRecover?: boolean;
    description?: string;
    integrationName?: string;
    integrationProductType?: string;
    recoverTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateIntegrationResponseBody extends $tea.Model {
    integration?: CreateIntegrationResponseBodyIntegration;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateIntegrationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateIntegrationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateAlertRuleRequest extends $tea.Model {
    alertCheckType?: string;
    alertGroup?: number;
    alertId?: number;
    alertName?: string;
    alertRuleContent?: string;
    alertStatus?: string;
    alertType?: string;
    annotations?: string;
    autoAddNewApplication?: boolean;
    clusterId?: string;
    duration?: number;
    filters?: string;
    labels?: string;
    level?: string;
    message?: string;
    metricsKey?: string;
    metricsType?: string;
    notifyStrategy?: string;
    pids?: string;
    promQL?: string;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateAlertRuleResponseBody extends $tea.Model {
    alertRule?: CreateOrUpdateAlertRuleResponseBodyAlertRule;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateAlertRuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateOrUpdateAlertRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateContactRequest extends $tea.Model {
    contactId?: number;
    contactName?: string;
    email?: string;
    phone?: string;
    reissueSendNotice?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateContactResponseBody extends $tea.Model {
    alertContact?: CreateOrUpdateContactResponseBodyAlertContact;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateContactResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateOrUpdateContactResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateContactGroupRequest extends $tea.Model {
    contactGroupId?: number;
    contactGroupName?: string;
    contactIds?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateContactGroupResponseBody extends $tea.Model {
    alertContactGroup?: CreateOrUpdateContactGroupResponseBodyAlertContactGroup;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateContactGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateOrUpdateContactGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateEventBridgeIntegrationRequest extends $tea.Model {
    accessKey?: string;
    accessSecret?: string;
    description?: string;
    endpoint?: string;
    eventBusName?: string;
    eventBusRegionId?: string;
    id?: number;
    name?: string;
    source?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateEventBridgeIntegrationResponseBody extends $tea.Model {
    eventBridgeIntegration?: CreateOrUpdateEventBridgeIntegrationResponseBodyEventBridgeIntegration;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateEventBridgeIntegrationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateOrUpdateEventBridgeIntegrationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateIMRobotRequest extends $tea.Model {
    cardTemplate?: string;
    dailyNoc?: boolean;
    dailyNocTime?: string;
    dingSignKey?: string;
    enableOutgoing?: boolean;
    robotAddress?: string;
    robotId?: number;
    robotName?: string;
    token?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateIMRobotResponseBody extends $tea.Model {
    alertRobot?: CreateOrUpdateIMRobotResponseBodyAlertRobot;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateIMRobotResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateOrUpdateIMRobotResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateNotificationPolicyRequest extends $tea.Model {
    escalationPolicyId?: number;
    groupRule?: string;
    id?: number;
    integrationId?: number;
    matchingRules?: string;
    name?: string;
    notifyRule?: string;
    notifyTemplate?: string;
    regionId?: string;
    repeat?: boolean;
    repeatInterval?: number;
    sendRecoverMessage?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateNotificationPolicyResponseBody extends $tea.Model {
    notificationPolicy?: CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicy;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateNotificationPolicyResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateOrUpdateNotificationPolicyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateSilencePolicyRequest extends $tea.Model {
    id?: number;
    matchingRules?: string;
    name?: string;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateSilencePolicyResponseBody extends $tea.Model {
    requestId?: string;
    silencePolicy?: CreateOrUpdateSilencePolicyResponseBodySilencePolicy;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateSilencePolicyResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateOrUpdateSilencePolicyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateWebhookContactRequest extends $tea.Model {
    bizHeaders?: string;
    bizParams?: string;
    body?: string;
    method?: string;
    recoverBody?: string;
    url?: string;
    webhookId?: number;
    webhookName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateWebhookContactResponseBody extends $tea.Model {
    requestId?: string;
    webhookContact?: CreateOrUpdateWebhookContactResponseBodyWebhookContact;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateWebhookContactResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateOrUpdateWebhookContactResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreatePrometheusAlertRuleRequest extends $tea.Model {
    alertName?: string;
    annotations?: string;
    clusterId?: string;
    dispatchRuleId?: number;
    duration?: string;
    expression?: string;
    labels?: string;
    message?: string;
    notifyType?: string;
    regionId?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreatePrometheusAlertRuleResponseBody extends $tea.Model {
    prometheusAlertRule?: CreatePrometheusAlertRuleResponseBodyPrometheusAlertRule;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreatePrometheusAlertRuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreatePrometheusAlertRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRetcodeAppRequest extends $tea.Model {
    regionId?: string;
    retcodeAppName?: string;
    retcodeAppType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRetcodeAppResponseBody extends $tea.Model {
    requestId?: string;
    retcodeAppDataBean?: CreateRetcodeAppResponseBodyRetcodeAppDataBean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRetcodeAppResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateRetcodeAppResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSyntheticTaskRequest extends $tea.Model {
    commonParam?: CreateSyntheticTaskRequestCommonParam;
    download?: CreateSyntheticTaskRequestDownload;
    extendInterval?: CreateSyntheticTaskRequestExtendInterval;
    intervalTime?: string;
    intervalType?: string;
    ipType?: number;
    monitorList?: CreateSyntheticTaskRequestMonitorList[];
    navigation?: CreateSyntheticTaskRequestNavigation;
    net?: CreateSyntheticTaskRequestNet;
    protocol?: CreateSyntheticTaskRequestProtocol;
    regionId?: string;
    taskName?: string;
    taskType?: number;
    updateTask?: boolean;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSyntheticTaskShrinkRequest extends $tea.Model {
    commonParamShrink?: string;
    downloadShrink?: string;
    extendIntervalShrink?: string;
    intervalTime?: string;
    intervalType?: string;
    ipType?: number;
    monitorListShrink?: string;
    navigationShrink?: string;
    netShrink?: string;
    protocolShrink?: string;
    regionId?: string;
    taskName?: string;
    taskType?: number;
    updateTask?: boolean;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSyntheticTaskResponseBody extends $tea.Model {
    code?: string;
    data?: CreateSyntheticTaskResponseBodyData;
    msg?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSyntheticTaskResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateSyntheticTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateWebhookRequest extends $tea.Model {
    body?: string;
    contactName?: string;
    httpHeaders?: string;
    httpParams?: string;
    method?: string;
    recoverBody?: string;
    regionId?: string;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateWebhookResponseBody extends $tea.Model {
    contactId?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateWebhookResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateWebhookResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DelAuthTokenRequest extends $tea.Model {
    clusterId?: string;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DelAuthTokenResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DelAuthTokenResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DelAuthTokenResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteAlertContactRequest extends $tea.Model {
    contactId?: number;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteAlertContactResponseBody extends $tea.Model {
    isSuccess?: boolean;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteAlertContactResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteAlertContactResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteAlertContactGroupRequest extends $tea.Model {
    contactGroupId?: number;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteAlertContactGroupResponseBody extends $tea.Model {
    isSuccess?: boolean;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteAlertContactGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteAlertContactGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteAlertRuleRequest extends $tea.Model {
    alertId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteAlertRuleResponseBody extends $tea.Model {
    isSuccess?: boolean;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteAlertRuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteAlertRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteAlertRulesRequest extends $tea.Model {
    alertIds?: string;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteAlertRulesResponseBody extends $tea.Model {
    isSuccess?: boolean;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteAlertRulesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteAlertRulesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteCmsExporterRequest extends $tea.Model {
    clusterId?: string;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteCmsExporterResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteCmsExporterResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteCmsExporterResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteContactRequest extends $tea.Model {
    contactId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteContactResponseBody extends $tea.Model {
    isSuccess?: boolean;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteContactResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteContactResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteContactGroupRequest extends $tea.Model {
    contactGroupId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteContactGroupResponseBody extends $tea.Model {
    isSuccess?: boolean;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteContactGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteContactGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDispatchRuleRequest extends $tea.Model {
    id?: string;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDispatchRuleResponseBody extends $tea.Model {
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDispatchRuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteDispatchRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteEventBridgeIntegrationRequest extends $tea.Model {
    id?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteEventBridgeIntegrationResponseBody extends $tea.Model {
    isSuccess?: boolean;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteEventBridgeIntegrationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteEventBridgeIntegrationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteGrafanaResourceRequest extends $tea.Model {
    clusterId?: string;
    clusterName?: string;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteGrafanaResourceResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteGrafanaResourceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteGrafanaResourceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteIMRobotRequest extends $tea.Model {
    robotId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteIMRobotResponseBody extends $tea.Model {
    isSuccess?: boolean;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteIMRobotResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteIMRobotResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteIntegrationRequest extends $tea.Model {
    clusterId?: string;
    integration?: string;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteIntegrationResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteIntegrationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteIntegrationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteIntegrationsRequest extends $tea.Model {
    integrationId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteIntegrationsResponseBody extends $tea.Model {
    isSuccess?: boolean;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteIntegrationsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteIntegrationsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteNotificationPolicyRequest extends $tea.Model {
    id?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteNotificationPolicyResponseBody extends $tea.Model {
    isSuccess?: boolean;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteNotificationPolicyResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteNotificationPolicyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeletePrometheusAlertRuleRequest extends $tea.Model {
    alertId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeletePrometheusAlertRuleResponseBody extends $tea.Model {
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeletePrometheusAlertRuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeletePrometheusAlertRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeletePrometheusGlobalViewRequest extends $tea.Model {
    globalViewClusterId?: string;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeletePrometheusGlobalViewResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeletePrometheusGlobalViewResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeletePrometheusGlobalViewResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRetcodeAppRequest extends $tea.Model {
    appId?: string;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRetcodeAppResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRetcodeAppResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteRetcodeAppResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteScenarioRequest extends $tea.Model {
    regionId?: string;
    scenarioId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteScenarioResponseBody extends $tea.Model {
    requestId?: string;
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteScenarioResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteScenarioResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSilencePolicyRequest extends $tea.Model {
    id?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSilencePolicyResponseBody extends $tea.Model {
    isSuccess?: boolean;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSilencePolicyResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteSilencePolicyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSourceMapRequest extends $tea.Model {
    fidList?: string[];
    pid?: string;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSourceMapShrinkRequest extends $tea.Model {
    fidListShrink?: string;
    pid?: string;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSourceMapResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSourceMapResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteSourceMapResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSyntheticTaskRequest extends $tea.Model {
    regionId?: string;
    taskIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSyntheticTaskResponseBody extends $tea.Model {
    requestId?: string;
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSyntheticTaskResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteSyntheticTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteTraceAppRequest extends $tea.Model {
    appId?: string;
    pid?: string;
    regionId?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteTraceAppResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteTraceAppResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteTraceAppResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteWebhookContactRequest extends $tea.Model {
    webhookId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteWebhookContactResponseBody extends $tea.Model {
    isSuccess?: boolean;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteWebhookContactResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteWebhookContactResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeContactGroupsRequest extends $tea.Model {
    contactGroupName?: string;
    isDetail?: boolean;
    page?: number;
    size?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeContactGroupsResponseBody extends $tea.Model {
    pageBean?: DescribeContactGroupsResponseBodyPageBean;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeContactGroupsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeContactGroupsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeContactsRequest extends $tea.Model {
    contactName?: string;
    email?: string;
    page?: number;
    phone?: string;
    size?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeContactsResponseBody extends $tea.Model {
    pageBean?: DescribeContactsResponseBodyPageBean;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeContactsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeContactsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDispatchRuleRequest extends $tea.Model {
    id?: string;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDispatchRuleResponseBody extends $tea.Model {
    dispatchRule?: DescribeDispatchRuleResponseBodyDispatchRule;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDispatchRuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeDispatchRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeIMRobotsRequest extends $tea.Model {
    page?: number;
    robotName?: string;
    size?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeIMRobotsResponseBody extends $tea.Model {
    pageBean?: DescribeIMRobotsResponseBodyPageBean;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeIMRobotsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeIMRobotsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePrometheusAlertRuleRequest extends $tea.Model {
    alertId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePrometheusAlertRuleResponseBody extends $tea.Model {
    prometheusAlertRule?: DescribePrometheusAlertRuleResponseBodyPrometheusAlertRule;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePrometheusAlertRuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribePrometheusAlertRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeTraceLicenseKeyRequest extends $tea.Model {
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeTraceLicenseKeyResponseBody extends $tea.Model {
    licenseKey?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeTraceLicenseKeyResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeTraceLicenseKeyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeWebhookContactsRequest extends $tea.Model {
    page?: number;
    size?: number;
    webhookName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeWebhookContactsResponseBody extends $tea.Model {
    pageBean?: DescribeWebhookContactsResponseBodyPageBean;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeWebhookContactsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeWebhookContactsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAgentDownloadUrlRequest extends $tea.Model {
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAgentDownloadUrlResponseBody extends $tea.Model {
    armsAgentDownloadUrl?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAgentDownloadUrlResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetAgentDownloadUrlResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAlertRulesRequest extends $tea.Model {
    alertIds?: string;
    alertNames?: string;
    alertStatus?: string;
    alertType?: string;
    clusterId?: string;
    page?: number;
    productCode?: string;
    regionId?: string;
    size?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAlertRulesResponseBody extends $tea.Model {
    pageBean?: GetAlertRulesResponseBodyPageBean;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAlertRulesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetAlertRulesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAppApiByPageRequest extends $tea.Model {
    currentPage?: number;
    endTime?: number;
    intervalMills?: number;
    PId?: string;
    pageSize?: number;
    regionId?: string;
    startTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAppApiByPageResponseBody extends $tea.Model {
    code?: number;
    data?: GetAppApiByPageResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAppApiByPageResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetAppApiByPageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAuthTokenRequest extends $tea.Model {
    clusterId?: string;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAuthTokenResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAuthTokenResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetAuthTokenResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetClusterAllUrlRequest extends $tea.Model {
    clusterId?: string;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetClusterAllUrlResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetClusterAllUrlResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetClusterAllUrlResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetExploreUrlRequest extends $tea.Model {
    clusterId?: string;
    expression?: string;
    regionId?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetExploreUrlResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetExploreUrlResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetExploreUrlResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetIntegrationStateRequest extends $tea.Model {
    clusterId?: string;
    integration?: string;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetIntegrationStateResponseBody extends $tea.Model {
    requestId?: string;
    state?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetIntegrationStateResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetIntegrationStateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetManagedPrometheusStatusRequest extends $tea.Model {
    clusterId?: string;
    clusterType?: string;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetManagedPrometheusStatusResponseBody extends $tea.Model {
    code?: number;
    data?: string;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetManagedPrometheusStatusResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetManagedPrometheusStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMultipleTraceRequest extends $tea.Model {
    regionId?: string;
    traceIDs?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMultipleTraceResponseBody extends $tea.Model {
    multiCallChainInfos?: GetMultipleTraceResponseBodyMultiCallChainInfos[];
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMultipleTraceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetMultipleTraceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOnCallSchedulesDetailRequest extends $tea.Model {
    endTime?: string;
    id?: number;
    startTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOnCallSchedulesDetailResponseBody extends $tea.Model {
    data?: GetOnCallSchedulesDetailResponseBodyData;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOnCallSchedulesDetailResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetOnCallSchedulesDetailResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPrometheusApiTokenRequest extends $tea.Model {
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPrometheusApiTokenResponseBody extends $tea.Model {
    requestId?: string;
    token?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPrometheusApiTokenResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetPrometheusApiTokenResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPrometheusGlobalViewRequest extends $tea.Model {
    globalViewClusterId?: string;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPrometheusGlobalViewResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPrometheusGlobalViewResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetPrometheusGlobalViewResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecordingRuleRequest extends $tea.Model {
    clusterId?: string;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecordingRuleResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecordingRuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetRecordingRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRetcodeShareUrlRequest extends $tea.Model {
    pid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRetcodeShareUrlResponseBody extends $tea.Model {
    requestId?: string;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRetcodeShareUrlResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetRetcodeShareUrlResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSourceMapInfoRequest extends $tea.Model {
    ascendingSequence?: boolean;
    edition?: string;
    ID?: string;
    keyword?: string;
    orderField?: string;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSourceMapInfoResponseBody extends $tea.Model {
    requestId?: string;
    sourceMapList?: GetSourceMapInfoResponseBodySourceMapList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSourceMapInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetSourceMapInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetStackRequest extends $tea.Model {
    endTime?: number;
    pid?: string;
    regionId?: string;
    rpcID?: string;
    startTime?: number;
    traceID?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetStackResponseBody extends $tea.Model {
    requestId?: string;
    stackInfo?: GetStackResponseBodyStackInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetStackResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetStackResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSyntheticTaskDetailRequest extends $tea.Model {
    regionId?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSyntheticTaskDetailResponseBody extends $tea.Model {
    requestId?: string;
    taskDetail?: GetSyntheticTaskDetailResponseBodyTaskDetail;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSyntheticTaskDetailResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetSyntheticTaskDetailResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSyntheticTaskListRequest extends $tea.Model {
    direction?: string;
    order?: string;
    pageNum?: number;
    pageSize?: number;
    regionId?: string;
    taskName?: string;
    taskStatus?: string;
    taskType?: string;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSyntheticTaskListResponseBody extends $tea.Model {
    pageInfo?: GetSyntheticTaskListResponseBodyPageInfo;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSyntheticTaskListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetSyntheticTaskListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSyntheticTaskMonitorsRequest extends $tea.Model {
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSyntheticTaskMonitorsResponseBody extends $tea.Model {
    code?: string;
    data?: GetSyntheticTaskMonitorsResponseBodyData[];
    msg?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSyntheticTaskMonitorsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetSyntheticTaskMonitorsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTraceRequest extends $tea.Model {
    endTime?: number;
    regionId?: string;
    startTime?: number;
    traceID?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTraceResponseBody extends $tea.Model {
    requestId?: string;
    spans?: GetTraceResponseBodySpans[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTraceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetTraceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTraceAppRequest extends $tea.Model {
    pid?: string;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTraceAppResponseBody extends $tea.Model {
    requestId?: string;
    traceApp?: GetTraceAppResponseBodyTraceApp;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTraceAppResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetTraceAppResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ImportAppAlertRulesRequest extends $tea.Model {
    contactGroupIds?: string;
    isAutoStart?: boolean;
    pids?: string;
    regionId?: string;
    templageAlertConfig?: string;
    templateAlertId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ImportAppAlertRulesResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ImportAppAlertRulesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ImportAppAlertRulesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InstallCmsExporterRequest extends $tea.Model {
    clusterId?: string;
    cmsArgs?: string;
    directArgs?: string;
    enableTag?: boolean;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InstallCmsExporterResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InstallCmsExporterResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: InstallCmsExporterResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InstallManagedPrometheusRequest extends $tea.Model {
    clusterId?: string;
    clusterType?: string;
    kubeConfig?: string;
    regionId?: string;
    securityGroupId?: string;
    vSwitchId?: string;
    vpcId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InstallManagedPrometheusResponseBody extends $tea.Model {
    code?: number;
    data?: string;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InstallManagedPrometheusResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: InstallManagedPrometheusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListActivatedAlertsRequest extends $tea.Model {
    currentPage?: number;
    filter?: string;
    pageSize?: number;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListActivatedAlertsResponseBody extends $tea.Model {
    page?: ListActivatedAlertsResponseBodyPage;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListActivatedAlertsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListActivatedAlertsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAlertEventsRequest extends $tea.Model {
    alertName?: string;
    endTime?: string;
    matchingConditions?: string;
    page?: number;
    size?: number;
    startTime?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAlertEventsResponseBody extends $tea.Model {
    pageBean?: ListAlertEventsResponseBodyPageBean;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAlertEventsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListAlertEventsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAlertsRequest extends $tea.Model {
    alertName?: string;
    dispatchRuleId?: number;
    endTime?: string;
    integrationType?: string;
    page?: number;
    severity?: string;
    showActivities?: boolean;
    showEvents?: boolean;
    size?: number;
    startTime?: string;
    state?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAlertsResponseBody extends $tea.Model {
    pageBean?: ListAlertsResponseBodyPageBean;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAlertsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListAlertsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListClusterFromGrafanaRequest extends $tea.Model {
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListClusterFromGrafanaResponseBody extends $tea.Model {
    promClusterList?: ListClusterFromGrafanaResponseBodyPromClusterList[];
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListClusterFromGrafanaResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListClusterFromGrafanaResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListCmsInstancesRequest extends $tea.Model {
    clusterId?: string;
    regionId?: string;
    typeFilter?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListCmsInstancesResponseBody extends $tea.Model {
    data?: ListCmsInstancesResponseBodyData;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListCmsInstancesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListCmsInstancesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDashboardsRequest extends $tea.Model {
    clusterId?: string;
    clusterType?: string;
    dashboardName?: string;
    language?: string;
    product?: string;
    recreateSwitch?: boolean;
    regionId?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDashboardsResponseBody extends $tea.Model {
    dashboardVos?: ListDashboardsResponseBodyDashboardVos[];
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDashboardsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListDashboardsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDashboardsByNameRequest extends $tea.Model {
    clusterId?: string;
    clusterType?: string;
    dashBoardName?: string;
    dashBoardVersion?: string;
    dataSourceType?: string;
    groupName?: string;
    onlyQuery?: boolean;
    productCode?: string;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDashboardsByNameResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDashboardsByNameResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListDashboardsByNameResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDispatchRuleRequest extends $tea.Model {
    name?: string;
    regionId?: string;
    system?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDispatchRuleResponseBody extends $tea.Model {
    dispatchRules?: ListDispatchRuleResponseBodyDispatchRules[];
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDispatchRuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListDispatchRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEscalationPoliciesRequest extends $tea.Model {
    name?: string;
    page?: number;
    size?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEscalationPoliciesResponseBody extends $tea.Model {
    pageBean?: ListEscalationPoliciesResponseBodyPageBean;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEscalationPoliciesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListEscalationPoliciesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEventBridgeIntegrationsRequest extends $tea.Model {
    name?: string;
    page?: number;
    size?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEventBridgeIntegrationsResponseBody extends $tea.Model {
    pageBean?: ListEventBridgeIntegrationsResponseBodyPageBean;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEventBridgeIntegrationsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListEventBridgeIntegrationsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListInsightsEventsRequest extends $tea.Model {
    endTime?: string;
    insightsTypes?: string;
    pid?: string;
    regionId?: string;
    startTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListInsightsEventsResponseBody extends $tea.Model {
    insightsEvents?: ListInsightsEventsResponseBodyInsightsEvents[];
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListInsightsEventsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListInsightsEventsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListIntegrationRequest extends $tea.Model {
    integrationName?: string;
    integrationProductType?: string;
    isDetail?: boolean;
    page?: number;
    size?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListIntegrationResponseBody extends $tea.Model {
    pageInfo?: ListIntegrationResponseBodyPageInfo;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListIntegrationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListIntegrationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListNotificationPoliciesRequest extends $tea.Model {
    isDetail?: boolean;
    name?: string;
    page?: number;
    regionId?: string;
    size?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListNotificationPoliciesResponseBody extends $tea.Model {
    pageBean?: ListNotificationPoliciesResponseBodyPageBean;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListNotificationPoliciesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListNotificationPoliciesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOnCallSchedulesRequest extends $tea.Model {
    name?: string;
    page?: number;
    size?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOnCallSchedulesResponseBody extends $tea.Model {
    pageBean?: ListOnCallSchedulesResponseBodyPageBean;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOnCallSchedulesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListOnCallSchedulesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPrometheusAlertRulesRequest extends $tea.Model {
    clusterId?: string;
    matchExpressions?: string;
    name?: string;
    regionId?: string;
    status?: number;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPrometheusAlertRulesResponseBody extends $tea.Model {
    prometheusAlertRules?: ListPrometheusAlertRulesResponseBodyPrometheusAlertRules[];
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPrometheusAlertRulesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListPrometheusAlertRulesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPrometheusAlertTemplatesRequest extends $tea.Model {
    clusterId?: string;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPrometheusAlertTemplatesResponseBody extends $tea.Model {
    prometheusAlertTemplates?: ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplates[];
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPrometheusAlertTemplatesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListPrometheusAlertTemplatesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPrometheusGlobalViewRequest extends $tea.Model {
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPrometheusGlobalViewResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPrometheusGlobalViewResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListPrometheusGlobalViewResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPrometheusInstancesRequest extends $tea.Model {
    regionId?: string;
    showGlobalView?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPrometheusInstancesResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPrometheusInstancesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListPrometheusInstancesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRetcodeAppsRequest extends $tea.Model {
    regionId?: string;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRetcodeAppsResponseBody extends $tea.Model {
    requestId?: string;
    retcodeApps?: ListRetcodeAppsResponseBodyRetcodeApps[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRetcodeAppsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListRetcodeAppsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListScenarioRequest extends $tea.Model {
    appId?: string;
    name?: string;
    regionId?: string;
    scenario?: string;
    sign?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListScenarioResponseBody extends $tea.Model {
    armsScenarios?: ListScenarioResponseBodyArmsScenarios[];
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListScenarioResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListScenarioResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListSilencePoliciesRequest extends $tea.Model {
    isDetail?: boolean;
    name?: string;
    page?: number;
    regionId?: string;
    size?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListSilencePoliciesResponseBody extends $tea.Model {
    pageBean?: ListSilencePoliciesResponseBodyPageBean;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListSilencePoliciesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListSilencePoliciesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTraceAppsRequest extends $tea.Model {
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTraceAppsResponseBody extends $tea.Model {
    code?: number;
    message?: string;
    requestId?: string;
    success?: boolean;
    traceApps?: ListTraceAppsResponseBodyTraceApps[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTraceAppsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListTraceAppsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ManageGetRecordingRuleRequest extends $tea.Model {
    clusterId?: string;
    queryUserId?: string;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ManageGetRecordingRuleResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ManageGetRecordingRuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ManageGetRecordingRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ManageRecordingRuleRequest extends $tea.Model {
    clusterId?: string;
    queryUserId?: string;
    regionId?: string;
    ruleYaml?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ManageRecordingRuleResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ManageRecordingRuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ManageRecordingRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenArmsDefaultSLRRequest extends $tea.Model {
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenArmsDefaultSLRResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenArmsDefaultSLRResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: OpenArmsDefaultSLRResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenArmsServiceSecondVersionRequest extends $tea.Model {
    regionId?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenArmsServiceSecondVersionResponseBody extends $tea.Model {
    orderId?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenArmsServiceSecondVersionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: OpenArmsServiceSecondVersionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenVClusterRequest extends $tea.Model {
    clusterType?: string;
    length?: number;
    product?: string;
    recreateSwitch?: boolean;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenVClusterResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenVClusterResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: OpenVClusterResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenXtraceDefaultSLRRequest extends $tea.Model {
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenXtraceDefaultSLRResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenXtraceDefaultSLRResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: OpenXtraceDefaultSLRResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMetricByPageRequest extends $tea.Model {
    currentPage?: number;
    customFilters?: string[];
    dimensions?: string[];
    endTime?: number;
    filters?: QueryMetricByPageRequestFilters[];
    intervalInSec?: number;
    measures?: string[];
    metric?: string;
    order?: string;
    orderBy?: string;
    pageSize?: number;
    startTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMetricByPageResponseBody extends $tea.Model {
    code?: string;
    data?: QueryMetricByPageResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMetricByPageResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryMetricByPageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPromInstallStatusRequest extends $tea.Model {
    clusterId?: string;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPromInstallStatusResponseBody extends $tea.Model {
    data?: QueryPromInstallStatusResponseBodyData;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPromInstallStatusResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryPromInstallStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryReleaseMetricRequest extends $tea.Model {
    changeOrderId?: string;
    createTime?: number;
    metricType?: string;
    pid?: string;
    proxyUserId?: string;
    releaseEndTime?: number;
    releaseStartTime?: number;
    service?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryReleaseMetricResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryReleaseMetricResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryReleaseMetricResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveAliClusterIdsFromPrometheusGlobalViewRequest extends $tea.Model {
    clusterIds?: string;
    globalViewClusterId?: string;
    groupName?: string;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveAliClusterIdsFromPrometheusGlobalViewResponseBody extends $tea.Model {
    data?: RemoveAliClusterIdsFromPrometheusGlobalViewResponseBodyData;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveAliClusterIdsFromPrometheusGlobalViewResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: RemoveAliClusterIdsFromPrometheusGlobalViewResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveSourcesFromPrometheusGlobalViewRequest extends $tea.Model {
    globalViewClusterId?: string;
    groupName?: string;
    regionId?: string;
    sourceNames?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveSourcesFromPrometheusGlobalViewResponseBody extends $tea.Model {
    data?: RemoveSourcesFromPrometheusGlobalViewResponseBodyData;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveSourcesFromPrometheusGlobalViewResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: RemoveSourcesFromPrometheusGlobalViewResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveTraceAppConfigRequest extends $tea.Model {
    pid?: string;
    settings?: SaveTraceAppConfigRequestSettings[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveTraceAppConfigResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveTraceAppConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SaveTraceAppConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchAlertContactRequest extends $tea.Model {
    contactIds?: string;
    contactName?: string;
    currentPage?: string;
    email?: string;
    pageSize?: string;
    phone?: string;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchAlertContactResponseBody extends $tea.Model {
    pageBean?: SearchAlertContactResponseBodyPageBean;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchAlertContactResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SearchAlertContactResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchAlertContactGroupRequest extends $tea.Model {
    contactGroupIds?: string;
    contactGroupName?: string;
    contactId?: number;
    contactName?: string;
    isDetail?: boolean;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchAlertContactGroupResponseBody extends $tea.Model {
    contactGroups?: SearchAlertContactGroupResponseBodyContactGroups[];
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchAlertContactGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SearchAlertContactGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchAlertHistoriesRequest extends $tea.Model {
    alertId?: number;
    alertType?: number;
    currentPage?: number;
    endTime?: number;
    pageSize?: number;
    regionId?: string;
    startTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchAlertHistoriesResponseBody extends $tea.Model {
    pageBean?: SearchAlertHistoriesResponseBodyPageBean;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchAlertHistoriesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SearchAlertHistoriesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchAlertRulesRequest extends $tea.Model {
    appType?: string;
    currentPage?: number;
    pageSize?: number;
    pid?: string;
    regionId?: string;
    systemRegionId?: string;
    title?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchAlertRulesResponseBody extends $tea.Model {
    pageBean?: SearchAlertRulesResponseBodyPageBean;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchAlertRulesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SearchAlertRulesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchEventsRequest extends $tea.Model {
    alertId?: number;
    alertType?: number;
    appType?: string;
    currentPage?: number;
    endTime?: number;
    isTrigger?: number;
    pageSize?: number;
    pid?: string;
    regionId?: string;
    startTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchEventsResponseBody extends $tea.Model {
    isTrigger?: number;
    pageBean?: SearchEventsResponseBodyPageBean;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchEventsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SearchEventsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchRetcodeAppByPageRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    regionId?: string;
    retcodeAppName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchRetcodeAppByPageResponseBody extends $tea.Model {
    pageBean?: SearchRetcodeAppByPageResponseBodyPageBean;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchRetcodeAppByPageResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SearchRetcodeAppByPageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchTraceAppByNameRequest extends $tea.Model {
    regionId?: string;
    traceAppName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchTraceAppByNameResponseBody extends $tea.Model {
    requestId?: string;
    traceApps?: SearchTraceAppByNameResponseBodyTraceApps[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchTraceAppByNameResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SearchTraceAppByNameResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchTraceAppByPageRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    regionId?: string;
    traceAppName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchTraceAppByPageResponseBody extends $tea.Model {
    pageBean?: SearchTraceAppByPageResponseBodyPageBean;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchTraceAppByPageResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SearchTraceAppByPageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchTracesRequest extends $tea.Model {
    endTime?: number;
    exclusionFilters?: SearchTracesRequestExclusionFilters[];
    minDuration?: number;
    operationName?: string;
    pid?: string;
    regionId?: string;
    reverse?: boolean;
    serviceIp?: string;
    serviceName?: string;
    startTime?: number;
    tag?: SearchTracesRequestTag[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchTracesResponseBody extends $tea.Model {
    requestId?: string;
    traceInfos?: SearchTracesResponseBodyTraceInfos[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchTracesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SearchTracesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchTracesByPageRequest extends $tea.Model {
    endTime?: number;
    exclusionFilters?: SearchTracesByPageRequestExclusionFilters[];
    minDuration?: number;
    operationName?: string;
    pageNumber?: number;
    pageSize?: number;
    pid?: string;
    regionId?: string;
    reverse?: boolean;
    serviceIp?: string;
    serviceName?: string;
    startTime?: number;
    tags?: SearchTracesByPageRequestTags[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchTracesByPageResponseBody extends $tea.Model {
    pageBean?: SearchTracesByPageResponseBodyPageBean;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchTracesByPageResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SearchTracesByPageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendTTSVerifyLinkRequest extends $tea.Model {
    contactId?: number;
    phone?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendTTSVerifyLinkResponseBody extends $tea.Model {
    isSuccess?: boolean;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendTTSVerifyLinkResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SendTTSVerifyLinkResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetRetcodeShareStatusRequest extends $tea.Model {
    pid?: string;
    status?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetRetcodeShareStatusResponseBody extends $tea.Model {
    isSuccess?: boolean;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetRetcodeShareStatusResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SetRetcodeShareStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartAlertRequest extends $tea.Model {
    alertId?: string;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartAlertResponseBody extends $tea.Model {
    isSuccess?: boolean;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartAlertResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: StartAlertResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StopAlertRequest extends $tea.Model {
    alertId?: string;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StopAlertResponseBody extends $tea.Model {
    isSuccess?: boolean;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StopAlertResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: StopAlertResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SwitchSyntheticTaskStatusRequest extends $tea.Model {
    switchStatus?: number;
    taskIds?: number[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SwitchSyntheticTaskStatusResponseBody extends $tea.Model {
    requestId?: string;
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SwitchSyntheticTaskStatusResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SwitchSyntheticTaskStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncRecordingRulesRequest extends $tea.Model {
    clusterId?: string;
    regionId?: string;
    targetClusters?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncRecordingRulesResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncRecordingRulesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SyncRecordingRulesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TurnOnSecondSwitchRequest extends $tea.Model {
    pid?: string;
    proxyUserId?: string;
    releaseStartTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TurnOnSecondSwitchResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TurnOnSecondSwitchResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: TurnOnSecondSwitchResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UninstallManagedPrometheusRequest extends $tea.Model {
    clusterId?: string;
    clusterType?: string;
    regionId?: string;
    vpcId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UninstallManagedPrometheusResponseBody extends $tea.Model {
    code?: number;
    data?: string;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UninstallManagedPrometheusResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UninstallManagedPrometheusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UninstallPromClusterRequest extends $tea.Model {
    clusterId?: string;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UninstallPromClusterResponseBody extends $tea.Model {
    data?: boolean;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UninstallPromClusterResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UninstallPromClusterResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateAlertContactRequest extends $tea.Model {
    contactId?: number;
    contactName?: string;
    dingRobotWebhookUrl?: string;
    email?: string;
    phoneNum?: string;
    regionId?: string;
    systemNoc?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateAlertContactResponseBody extends $tea.Model {
    isSuccess?: boolean;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateAlertContactResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpdateAlertContactResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateAlertContactGroupRequest extends $tea.Model {
    contactGroupId?: number;
    contactGroupName?: string;
    contactIds?: string;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateAlertContactGroupResponseBody extends $tea.Model {
    isSuccess?: boolean;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateAlertContactGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpdateAlertContactGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateAlertRuleRequest extends $tea.Model {
    alertId?: number;
    contactGroupIds?: string;
    isAutoStart?: boolean;
    regionId?: string;
    templageAlertConfig?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateAlertRuleResponseBody extends $tea.Model {
    alertId?: number;
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateAlertRuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpdateAlertRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDispatchRuleRequest extends $tea.Model {
    dispatchRule?: string;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDispatchRuleResponseBody extends $tea.Model {
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDispatchRuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpdateDispatchRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateIntegrationRequest extends $tea.Model {
    apiEndpoint?: string;
    autoRecover?: boolean;
    description?: string;
    duplicateKey?: string;
    extendedFieldRedefineRules?: string;
    fieldRedefineRules?: string;
    initiativeRecoverField?: string;
    initiativeRecoverValue?: string;
    integrationId?: number;
    integrationName?: string;
    integrationProductType?: string;
    liveness?: string;
    recoverTime?: number;
    shortToken?: string;
    stat?: string;
    state?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateIntegrationResponseBody extends $tea.Model {
    integration?: UpdateIntegrationResponseBodyIntegration;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateIntegrationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpdateIntegrationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdatePrometheusAlertRuleRequest extends $tea.Model {
    alertId?: number;
    alertName?: string;
    annotations?: string;
    clusterId?: string;
    dispatchRuleId?: number;
    duration?: string;
    expression?: string;
    labels?: string;
    message?: string;
    notifyType?: string;
    regionId?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdatePrometheusAlertRuleResponseBody extends $tea.Model {
    prometheusAlertRule?: UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRule;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdatePrometheusAlertRuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpdatePrometheusAlertRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateWebhookRequest extends $tea.Model {
    body?: string;
    contactId?: number;
    contactName?: string;
    httpHeaders?: string;
    httpParams?: string;
    method?: string;
    recoverBody?: string;
    regionId?: string;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateWebhookResponseBody extends $tea.Model {
    isSuccess?: boolean;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateWebhookResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpdateWebhookResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadRequest extends $tea.Model {
    edition?: string;
    file?: string;
    fileName?: string;
    pid?: string;
    regionId?: string;
    version?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadResponseBody extends $tea.Model {
    requestId?: string;
    uploadResult?: UploadResponseBodyUploadResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UploadResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddAliClusterIdsToPrometheusGlobalViewResponseBodyData extends $tea.Model {
    info?: string;
    msg?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddPrometheusGlobalViewResponseBodyData extends $tea.Model {
    info?: string;
    msg?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddPrometheusGlobalViewByAliClusterIdsResponseBodyData extends $tea.Model {
    info?: string;
    msg?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppendInstancesToPrometheusGlobalViewResponseBodyData extends $tea.Model {
    info?: string;
    msg?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateIntegrationResponseBodyIntegration extends $tea.Model {
    autoRecover?: boolean;
    description?: string;
    integrationId?: number;
    integrationName?: string;
    integrationProductType?: string;
    recoverTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateAlertRuleResponseBodyAlertRuleAlertRuleContentAlertRuleItems extends $tea.Model {
    aggregate?: string;
    metricKey?: string;
    n?: number;
    operator?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateAlertRuleResponseBodyAlertRuleAlertRuleContent extends $tea.Model {
    alertRuleItems?: CreateOrUpdateAlertRuleResponseBodyAlertRuleAlertRuleContentAlertRuleItems[];
    condition?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateAlertRuleResponseBodyAlertRuleAnnotations extends $tea.Model {
    name?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateAlertRuleResponseBodyAlertRuleFiltersCustomSLSFilters extends $tea.Model {
    key?: string;
    opt?: string;
    show?: boolean;
    t?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateAlertRuleResponseBodyAlertRuleFiltersDimFilters extends $tea.Model {
    filterKey?: string;
    filterOpt?: string;
    filterValues?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateAlertRuleResponseBodyAlertRuleFilters extends $tea.Model {
    customSLSFilters?: CreateOrUpdateAlertRuleResponseBodyAlertRuleFiltersCustomSLSFilters[];
    customSLSGroupByDimensions?: string[];
    customSLSWheres?: string[];
    dimFilters?: CreateOrUpdateAlertRuleResponseBodyAlertRuleFiltersDimFilters[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateAlertRuleResponseBodyAlertRuleLabels extends $tea.Model {
    name?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateAlertRuleResponseBodyAlertRule extends $tea.Model {
    alertCheckType?: string;
    alertGroup?: number;
    alertId?: number;
    alertName?: string;
    alertRuleContent?: CreateOrUpdateAlertRuleResponseBodyAlertRuleAlertRuleContent;
    alertStatus?: string;
    alertType?: string;
    annotations?: CreateOrUpdateAlertRuleResponseBodyAlertRuleAnnotations[];
    autoAddNewApplication?: boolean;
    clusterId?: string;
    createdTime?: number;
    duration?: string;
    extend?: string;
    filters?: CreateOrUpdateAlertRuleResponseBodyAlertRuleFilters;
    labels?: CreateOrUpdateAlertRuleResponseBodyAlertRuleLabels[];
    level?: string;
    message?: string;
    metricsType?: string;
    notifyStrategy?: string;
    pids?: string[];
    promQL?: string;
    regionId?: string;
    updatedTime?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateContactResponseBodyAlertContact extends $tea.Model {
    contactId?: number;
    contactName?: string;
    email?: string;
    isVerify?: boolean;
    phone?: string;
    reissueSendNotice?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateContactGroupResponseBodyAlertContactGroup extends $tea.Model {
    contactGroupId?: number;
    contactGroupName?: string;
    contactIds?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateEventBridgeIntegrationResponseBodyEventBridgeIntegration extends $tea.Model {
    accessKey?: string;
    accessSecret?: string;
    description?: string;
    endpoint?: string;
    eventBusName?: string;
    eventBusRegionId?: string;
    id?: number;
    name?: string;
    source?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateIMRobotResponseBodyAlertRobot extends $tea.Model {
    cardTemplate?: string;
    dailyNoc?: boolean;
    dailyNocTime?: string;
    enableOutgoing?: boolean;
    robotAddress?: string;
    robotId?: number;
    robotName?: string;
    token?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyGroupRule extends $tea.Model {
    groupInterval?: number;
    groupWait?: number;
    groupingFields?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyMatchingRulesMatchingConditions extends $tea.Model {
    key?: string;
    operator?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyMatchingRules extends $tea.Model {
    matchingConditions?: CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyMatchingRulesMatchingConditions[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyRuleNotifyObjects extends $tea.Model {
    notifyObjectId?: number;
    notifyObjectName?: string;
    notifyObjectType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyRule extends $tea.Model {
    notifyChannels?: string[];
    notifyEndTime?: string;
    notifyObjects?: CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyRuleNotifyObjects[];
    notifyStartTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyTemplate extends $tea.Model {
    emailContent?: string;
    emailRecoverContent?: string;
    emailRecoverTitle?: string;
    emailTitle?: string;
    robotContent?: string;
    smsContent?: string;
    smsRecoverContent?: string;
    ttsContent?: string;
    ttsRecoverContent?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicy extends $tea.Model {
    escalationPolicyId?: number;
    groupRule?: CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyGroupRule;
    id?: number;
    integrationId?: number;
    matchingRules?: CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyMatchingRules[];
    name?: string;
    notifyRule?: CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyRule;
    notifyTemplate?: CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyTemplate;
    repeat?: boolean;
    repeatInterval?: number;
    sendRecoverMessage?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateSilencePolicyResponseBodySilencePolicyMatchingRulesMatchingConditions extends $tea.Model {
    key?: string;
    operator?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateSilencePolicyResponseBodySilencePolicyMatchingRules extends $tea.Model {
    matchingConditions?: CreateOrUpdateSilencePolicyResponseBodySilencePolicyMatchingRulesMatchingConditions[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateSilencePolicyResponseBodySilencePolicy extends $tea.Model {
    id?: number;
    matchingRules?: CreateOrUpdateSilencePolicyResponseBodySilencePolicyMatchingRules[];
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateWebhookContactResponseBodyWebhookContactWebhook extends $tea.Model {
    bizHeaders?: string;
    bizParams?: string;
    body?: string;
    method?: string;
    recoverBody?: string;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateWebhookContactResponseBodyWebhookContact extends $tea.Model {
    webhook?: CreateOrUpdateWebhookContactResponseBodyWebhookContactWebhook;
    webhookId?: number;
    webhookName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreatePrometheusAlertRuleResponseBodyPrometheusAlertRuleAnnotations extends $tea.Model {
    name?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreatePrometheusAlertRuleResponseBodyPrometheusAlertRuleLabels extends $tea.Model {
    name?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreatePrometheusAlertRuleResponseBodyPrometheusAlertRule extends $tea.Model {
    alertId?: number;
    alertName?: string;
    annotations?: CreatePrometheusAlertRuleResponseBodyPrometheusAlertRuleAnnotations[];
    clusterId?: string;
    dispatchRuleId?: number;
    duration?: string;
    expression?: string;
    labels?: CreatePrometheusAlertRuleResponseBodyPrometheusAlertRuleLabels[];
    message?: string;
    notifyType?: string;
    status?: number;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRetcodeAppResponseBodyRetcodeAppDataBean extends $tea.Model {
    appId?: number;
    pid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSyntheticTaskRequestCommonParamAlertList extends $tea.Model {
    isCritical?: number;
    name?: string;
    symbols?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSyntheticTaskRequestCommonParam extends $tea.Model {
    alarmFlag?: string;
    alertList?: CreateSyntheticTaskRequestCommonParamAlertList[];
    alertNotifierId?: string;
    alertPolicyId?: string;
    monitorSamples?: number;
    startExecutionTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSyntheticTaskRequestDownload extends $tea.Model {
    connectionTimeout?: number;
    downloadCustomHeaderContent?: string;
    downloadCustomHost?: number;
    downloadCustomHostIp?: string;
    downloadIgnoreCertificateError?: string;
    downloadKernel?: number;
    downloadRedirection?: number;
    downloadTransmissionSize?: number;
    monitorTimeout?: number;
    quickProtocol?: string;
    validateKeywords?: string;
    verifyWay?: number;
    whiteList?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSyntheticTaskRequestExtendInterval extends $tea.Model {
    days?: number[];
    endHour?: number;
    endMinute?: number;
    endTime?: string;
    startHour?: number;
    startMinute?: number;
    startTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSyntheticTaskRequestMonitorList extends $tea.Model {
    cityCode?: number;
    monitorType?: number;
    netServiceId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSyntheticTaskRequestNavigation extends $tea.Model {
    DNSHijackWhiteList?: string;
    elementBlacklist?: string;
    executeActiveX?: number;
    executeApplication?: number;
    executeScript?: number;
    filterInvalidIP?: number;
    flowHijackJumpTimes?: number;
    flowHijackLogo?: string;
    monitorTimeout?: string;
    navAutomaticScrolling?: string;
    navCustomHeader?: string;
    navCustomHeaderContent?: string;
    navCustomHost?: number;
    navCustomHostIp?: string;
    navDisableCache?: number;
    navDisableCompression?: string;
    navIgnoreCertificateError?: number;
    navRedirection?: number;
    navReturnElement?: number;
    pageTamper?: string;
    processName?: string;
    QUICDomain?: string;
    QUICVersion?: number;
    requestHeader?: number;
    responseHeader?: number;
    slowElementThreshold?: number;
    verifyStringBlacklist?: string;
    verifyStringWhiteList?: string;
    waitCompletionTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSyntheticTaskRequestNet extends $tea.Model {
    netDNSNs?: string;
    netDNSQueryMethod?: number;
    netDNSServer?: number;
    netDNSSwitch?: number;
    netDNSTimeout?: number;
    netDigSwitch?: number;
    netICMPActive?: number;
    netICMPDataCut?: number;
    netICMPInterval?: number;
    netICMPNum?: number;
    netICMPSize?: number;
    netICMPSwitch?: number;
    netICMPTimeout?: number;
    netTraceRouteNum?: number;
    netTraceRouteSwitch?: number;
    netTraceRouteTimeout?: number;
    whiteList?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSyntheticTaskRequestProtocolRequestContentBodyFormData extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSyntheticTaskRequestProtocolRequestContentBodyUrlEncoding extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSyntheticTaskRequestProtocolRequestContentBody extends $tea.Model {
    formData?: CreateSyntheticTaskRequestProtocolRequestContentBodyFormData[];
    language?: string;
    mode?: string;
    raw?: string;
    urlEncoding?: CreateSyntheticTaskRequestProtocolRequestContentBodyUrlEncoding[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSyntheticTaskRequestProtocolRequestContentHeader extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSyntheticTaskRequestProtocolRequestContent extends $tea.Model {
    body?: CreateSyntheticTaskRequestProtocolRequestContentBody;
    header?: CreateSyntheticTaskRequestProtocolRequestContentHeader[];
    method?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSyntheticTaskRequestProtocol extends $tea.Model {
    characterEncoding?: number;
    customHost?: number;
    customHostIp?: string;
    protocolConnectionTime?: number;
    protocolMonitorTimeout?: string;
    receivedDataSize?: number;
    requestContent?: CreateSyntheticTaskRequestProtocolRequestContent;
    verifyContent?: string;
    verifyWay?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSyntheticTaskResponseBodyData extends $tea.Model {
    taskId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeContactGroupsResponseBodyPageBeanAlertContactGroupsContacts extends $tea.Model {
    contactId?: number;
    contactName?: string;
    email?: string;
    phone?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeContactGroupsResponseBodyPageBeanAlertContactGroups extends $tea.Model {
    contactGroupId?: number;
    contactGroupName?: string;
    contacts?: DescribeContactGroupsResponseBodyPageBeanAlertContactGroupsContacts[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeContactGroupsResponseBodyPageBean extends $tea.Model {
    alertContactGroups?: DescribeContactGroupsResponseBodyPageBeanAlertContactGroups[];
    page?: number;
    size?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeContactsResponseBodyPageBeanAlertContacts extends $tea.Model {
    contactId?: number;
    contactName?: string;
    email?: string;
    isVerify?: boolean;
    phone?: string;
    reissueSendNotice?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeContactsResponseBodyPageBean extends $tea.Model {
    alertContacts?: DescribeContactsResponseBodyPageBeanAlertContacts[];
    page?: number;
    size?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDispatchRuleResponseBodyDispatchRuleGroupRules extends $tea.Model {
    groupId?: number;
    groupInterval?: number;
    groupWaitTime?: number;
    groupingFields?: string[];
    repeatInterval?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDispatchRuleResponseBodyDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupsLabelMatchExpressions extends $tea.Model {
    key?: string;
    operator?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDispatchRuleResponseBodyDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroups extends $tea.Model {
    labelMatchExpressions?: DescribeDispatchRuleResponseBodyDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupsLabelMatchExpressions[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDispatchRuleResponseBodyDispatchRuleLabelMatchExpressionGrid extends $tea.Model {
    labelMatchExpressionGroups?: DescribeDispatchRuleResponseBodyDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroups[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDispatchRuleResponseBodyDispatchRuleNotifyRulesNotifyObjects extends $tea.Model {
    name?: string;
    notifyObjectId?: string;
    notifyType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDispatchRuleResponseBodyDispatchRuleNotifyRules extends $tea.Model {
    notifyChannels?: string[];
    notifyObjects?: DescribeDispatchRuleResponseBodyDispatchRuleNotifyRulesNotifyObjects[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDispatchRuleResponseBodyDispatchRule extends $tea.Model {
    dispatchType?: string;
    groupRules?: DescribeDispatchRuleResponseBodyDispatchRuleGroupRules[];
    isRecover?: boolean;
    labelMatchExpressionGrid?: DescribeDispatchRuleResponseBodyDispatchRuleLabelMatchExpressionGrid;
    name?: string;
    notifyRules?: DescribeDispatchRuleResponseBodyDispatchRuleNotifyRules[];
    ruleId?: number;
    state?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeIMRobotsResponseBodyPageBeanAlertIMRobots extends $tea.Model {
    dailyNoc?: boolean;
    dailyNocTime?: string;
    dingSignKey?: string;
    robotAddr?: string;
    robotId?: number;
    robotName?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeIMRobotsResponseBodyPageBean extends $tea.Model {
    alertIMRobots?: DescribeIMRobotsResponseBodyPageBeanAlertIMRobots[];
    page?: number;
    size?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePrometheusAlertRuleResponseBodyPrometheusAlertRuleAnnotations extends $tea.Model {
    name?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePrometheusAlertRuleResponseBodyPrometheusAlertRuleLabels extends $tea.Model {
    name?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePrometheusAlertRuleResponseBodyPrometheusAlertRule extends $tea.Model {
    alertId?: number;
    alertName?: string;
    annotations?: DescribePrometheusAlertRuleResponseBodyPrometheusAlertRuleAnnotations[];
    clusterId?: string;
    dispatchRuleId?: number;
    duration?: string;
    expression?: string;
    labels?: DescribePrometheusAlertRuleResponseBodyPrometheusAlertRuleLabels[];
    message?: string;
    notifyType?: string;
    status?: number;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeWebhookContactsResponseBodyPageBeanWebhookContactsWebhook extends $tea.Model {
    bizHeaders?: {
        [key: string]: any;
    };
    bizParams?: {
        [key: string]: any;
    };
    body?: string;
    method?: string;
    recoverBody?: string;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeWebhookContactsResponseBodyPageBeanWebhookContacts extends $tea.Model {
    webhook?: DescribeWebhookContactsResponseBodyPageBeanWebhookContactsWebhook;
    webhookId?: number;
    webhookName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeWebhookContactsResponseBodyPageBean extends $tea.Model {
    page?: number;
    size?: number;
    total?: number;
    webhookContacts?: DescribeWebhookContactsResponseBodyPageBeanWebhookContacts[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAlertRulesResponseBodyPageBeanAlertRulesAlertRuleContentAlertRuleItems extends $tea.Model {
    aggregate?: string;
    metricKey?: string;
    n?: number;
    operator?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAlertRulesResponseBodyPageBeanAlertRulesAlertRuleContent extends $tea.Model {
    alertRuleItems?: GetAlertRulesResponseBodyPageBeanAlertRulesAlertRuleContentAlertRuleItems[];
    condition?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAlertRulesResponseBodyPageBeanAlertRulesAnnotations extends $tea.Model {
    name?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAlertRulesResponseBodyPageBeanAlertRulesFiltersCustomSLSFilters extends $tea.Model {
    key?: string;
    opt?: string;
    show?: boolean;
    t?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAlertRulesResponseBodyPageBeanAlertRulesFiltersDimFilters extends $tea.Model {
    filterKey?: string;
    filterOpt?: string;
    filterValues?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAlertRulesResponseBodyPageBeanAlertRulesFilters extends $tea.Model {
    customSLSFilters?: GetAlertRulesResponseBodyPageBeanAlertRulesFiltersCustomSLSFilters[];
    customSLSGroupByDimensions?: string[];
    customSLSWheres?: string[];
    dimFilters?: GetAlertRulesResponseBodyPageBeanAlertRulesFiltersDimFilters[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAlertRulesResponseBodyPageBeanAlertRulesLabels extends $tea.Model {
    name?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAlertRulesResponseBodyPageBeanAlertRules extends $tea.Model {
    alertCheckType?: string;
    alertGroup?: number;
    alertId?: number;
    alertName?: string;
    alertRuleContent?: GetAlertRulesResponseBodyPageBeanAlertRulesAlertRuleContent;
    alertStatus?: string;
    alertType?: string;
    annotations?: GetAlertRulesResponseBodyPageBeanAlertRulesAnnotations[];
    autoAddNewApplication?: boolean;
    clusterId?: string;
    createdTime?: number;
    duration?: string;
    extend?: string;
    filters?: GetAlertRulesResponseBodyPageBeanAlertRulesFilters;
    labels?: GetAlertRulesResponseBodyPageBeanAlertRulesLabels[];
    level?: string;
    message?: string;
    metricsType?: string;
    notifyStrategy?: string;
    pids?: string[];
    promQL?: string;
    regionId?: string;
    updatedTime?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAlertRulesResponseBodyPageBean extends $tea.Model {
    alertRules?: GetAlertRulesResponseBodyPageBeanAlertRules[];
    page?: number;
    size?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAppApiByPageResponseBodyData extends $tea.Model {
    items?: {
        [key: string]: any;
    }[];
    page?: number;
    pageSize?: number;
    total?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMultipleTraceResponseBodyMultiCallChainInfosSpansLogEventListTagEntryList extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMultipleTraceResponseBodyMultiCallChainInfosSpansLogEventList extends $tea.Model {
    tagEntryList?: GetMultipleTraceResponseBodyMultiCallChainInfosSpansLogEventListTagEntryList[];
    timestamp?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMultipleTraceResponseBodyMultiCallChainInfosSpansTagEntryList extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMultipleTraceResponseBodyMultiCallChainInfosSpans extends $tea.Model {
    duration?: number;
    haveStack?: boolean;
    logEventList?: GetMultipleTraceResponseBodyMultiCallChainInfosSpansLogEventList[];
    operationName?: string;
    parentSpanId?: string;
    resultCode?: string;
    rpcId?: string;
    rpcType?: number;
    serviceIp?: string;
    serviceName?: string;
    spanId?: string;
    tagEntryList?: GetMultipleTraceResponseBodyMultiCallChainInfosSpansTagEntryList[];
    timestamp?: number;
    traceID?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMultipleTraceResponseBodyMultiCallChainInfos extends $tea.Model {
    spans?: GetMultipleTraceResponseBodyMultiCallChainInfosSpans[];
    traceID?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOnCallSchedulesDetailResponseBodyDataRenderedFinnalEntriesSimpleContact extends $tea.Model {
    id?: number;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOnCallSchedulesDetailResponseBodyDataRenderedFinnalEntries extends $tea.Model {
    end?: string;
    simpleContact?: GetOnCallSchedulesDetailResponseBodyDataRenderedFinnalEntriesSimpleContact;
    start?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOnCallSchedulesDetailResponseBodyDataRenderedLayerEntriesSimpleContact extends $tea.Model {
    id?: number;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOnCallSchedulesDetailResponseBodyDataRenderedLayerEntries extends $tea.Model {
    start?: string;
    end?: string;
    simpleContact?: GetOnCallSchedulesDetailResponseBodyDataRenderedLayerEntriesSimpleContact;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOnCallSchedulesDetailResponseBodyDataRenderedSubstitudeEntriesSimpleContact extends $tea.Model {
    id?: number;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOnCallSchedulesDetailResponseBodyDataRenderedSubstitudeEntries extends $tea.Model {
    end?: string;
    simpleContact?: GetOnCallSchedulesDetailResponseBodyDataRenderedSubstitudeEntriesSimpleContact;
    start?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOnCallSchedulesDetailResponseBodyDataScheduleLayersRestrictions extends $tea.Model {
    endTimeOfDay?: string;
    restrictionType?: string;
    startTimeOfDay?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOnCallSchedulesDetailResponseBodyDataScheduleLayers extends $tea.Model {
    contactIds?: number[];
    restrictions?: GetOnCallSchedulesDetailResponseBodyDataScheduleLayersRestrictions[];
    rotationType?: string;
    shiftLength?: number;
    startTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOnCallSchedulesDetailResponseBodyData extends $tea.Model {
    alertRobotId?: number;
    description?: string;
    id?: number;
    name?: string;
    renderedFinnalEntries?: GetOnCallSchedulesDetailResponseBodyDataRenderedFinnalEntries[];
    renderedLayerEntries?: GetOnCallSchedulesDetailResponseBodyDataRenderedLayerEntries[][];
    renderedSubstitudeEntries?: GetOnCallSchedulesDetailResponseBodyDataRenderedSubstitudeEntries[];
    scheduleLayers?: GetOnCallSchedulesDetailResponseBodyDataScheduleLayers[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSourceMapInfoResponseBodySourceMapList extends $tea.Model {
    fid?: string;
    fileName?: string;
    size?: string;
    uploadTime?: string;
    version?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetStackResponseBodyStackInfoExtInfo extends $tea.Model {
    info?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetStackResponseBodyStackInfo extends $tea.Model {
    api?: string;
    duration?: number;
    exception?: string;
    extInfo?: GetStackResponseBodyStackInfoExtInfo;
    line?: string;
    rpcId?: string;
    serviceName?: string;
    startTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSyntheticTaskDetailResponseBodyTaskDetailCommonParamAlertList extends $tea.Model {
    generalAlert?: string;
    isCritical?: string;
    name?: string;
    seriousAlert?: string;
    symbols?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSyntheticTaskDetailResponseBodyTaskDetailCommonParam extends $tea.Model {
    alarmFlag?: number;
    alertList?: GetSyntheticTaskDetailResponseBodyTaskDetailCommonParamAlertList[];
    alertNotifierId?: string;
    alertPolicyId?: string;
    monitorSamples?: string;
    startExecutionTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSyntheticTaskDetailResponseBodyTaskDetailDownload extends $tea.Model {
    connectionTimeout?: number;
    downloadCustomHeaderContent?: string;
    downloadCustomHost?: number;
    downloadCustomHostIp?: string;
    downloadKernel?: number;
    downloadRedirect?: number;
    downloadTransmissionSize?: number;
    monitorTimeout?: number;
    quickProtocol?: string;
    validateKeywords?: string;
    verifyWay?: number;
    whiteList?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSyntheticTaskDetailResponseBodyTaskDetailExtendInterval extends $tea.Model {
    days?: number[];
    endMinute?: number;
    endTime?: string;
    endhour?: number;
    startHour?: number;
    startMinute?: number;
    startTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSyntheticTaskDetailResponseBodyTaskDetailMonitorList extends $tea.Model {
    cityCode?: number;
    monitorType?: number;
    netServiceId?: number;
    sendCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSyntheticTaskDetailResponseBodyTaskDetailNav extends $tea.Model {
    dnsHijackWhitelist?: string;
    elementBlacklist?: string;
    executeActiveX?: number;
    executeApplet?: number;
    executeScript?: number;
    filterInvalidIP?: number;
    flowHijackJumpTimes?: number;
    flowHijackLogo?: string;
    monitorTimeout?: number;
    navAutomaticScrolling?: number;
    navCustomHeader?: string;
    navCustomHeaderContent?: string;
    navCustomHost?: number;
    navCustomHostIp?: string;
    navDisableCache?: number;
    navDisableCompression?: number;
    navIgnoreCertificateError?: number;
    navRedirect?: number;
    navReturnElement?: number;
    pageTampering?: string;
    processName?: string;
    quicDomain?: string;
    quicVersion?: number;
    requestHeader?: number;
    slowElementThreshold?: number;
    verifyStringBlacklist?: string;
    verifyStringWhitelist?: string;
    waitCompletionTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSyntheticTaskDetailResponseBodyTaskDetailNet extends $tea.Model {
    netDigSwitch?: number;
    netDnsNs?: string;
    netDnsQueryMethod?: string;
    netDnsServer?: number;
    netDnsSwitch?: number;
    netDnsTimeout?: string;
    netIcmpActive?: number;
    netIcmpDataCut?: number;
    netIcmpInterval?: number;
    netIcmpNum?: number;
    netIcmpSize?: number;
    netIcmpSwitch?: number;
    netIcmpTimeout?: number;
    netTraceRouteNum?: number;
    netTraceRouteSwitch?: number;
    netTraceRouteTimeout?: number;
    whiteList?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentBodyFormdata extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentBodyUrlencoded extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentBody extends $tea.Model {
    formdata?: GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentBodyFormdata;
    language?: string;
    mode?: string;
    raw?: string;
    urlencoded?: GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentBodyUrlencoded;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentHeader extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContent extends $tea.Model {
    body?: GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentBody;
    header?: GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentHeader[];
    method?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSyntheticTaskDetailResponseBodyTaskDetailProtocol extends $tea.Model {
    characterEncoding?: number;
    customHost?: number;
    customHostIp?: string;
    protocolConnectionTimeout?: number;
    protocolMonitorTimeout?: number;
    receivedDataSize?: number;
    requestContent?: GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContent;
    verifyContent?: string;
    verifyWay?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSyntheticTaskDetailResponseBodyTaskDetail extends $tea.Model {
    commonParam?: GetSyntheticTaskDetailResponseBodyTaskDetailCommonParam;
    download?: GetSyntheticTaskDetailResponseBodyTaskDetailDownload;
    extendInterval?: GetSyntheticTaskDetailResponseBodyTaskDetailExtendInterval;
    intervalTime?: number;
    intervalType?: number;
    ipType?: number;
    monitorList?: GetSyntheticTaskDetailResponseBodyTaskDetailMonitorList[];
    monitorListString?: string;
    nav?: GetSyntheticTaskDetailResponseBodyTaskDetailNav;
    net?: GetSyntheticTaskDetailResponseBodyTaskDetailNet;
    protocol?: GetSyntheticTaskDetailResponseBodyTaskDetailProtocol;
    taskId?: number;
    taskName?: string;
    taskType?: number;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSyntheticTaskListResponseBodyPageInfoList extends $tea.Model {
    createTime?: string;
    monitorNumber?: number;
    taskId?: string;
    taskName?: string;
    taskStatus?: string;
    taskType?: number;
    taskTypeName?: string;
    url?: string;
    usable?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSyntheticTaskListResponseBodyPageInfo extends $tea.Model {
    hasNextPage?: string;
    hasPreviousPage?: boolean;
    isFirstPage?: boolean;
    isLastPage?: boolean;
    list?: GetSyntheticTaskListResponseBodyPageInfoList[];
    navigateFirstPage?: string;
    navigateLastPage?: string;
    navigatePageNums?: string;
    nextPage?: string;
    pages?: string;
    prepage?: string;
    size?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSyntheticTaskMonitorsResponseBodyData extends $tea.Model {
    busy?: number;
    city?: string;
    cityCode?: number;
    clientType?: number;
    district?: string;
    netServiceId?: number;
    netServiceName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTraceResponseBodySpansLogEventListTagEntryList extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTraceResponseBodySpansLogEventList extends $tea.Model {
    tagEntryList?: GetTraceResponseBodySpansLogEventListTagEntryList[];
    timestamp?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTraceResponseBodySpansTagEntryList extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTraceResponseBodySpans extends $tea.Model {
    children?: {
        [key: string]: any;
    }[];
    duration?: number;
    haveStack?: boolean;
    logEventList?: GetTraceResponseBodySpansLogEventList[];
    operationName?: string;
    parentSpanId?: string;
    resultCode?: string;
    rpcId?: string;
    rpcType?: number;
    serviceIp?: string;
    serviceName?: string;
    spanId?: string;
    tagEntryList?: GetTraceResponseBodySpansTagEntryList[];
    timestamp?: number;
    traceID?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTraceAppResponseBodyTraceApp extends $tea.Model {
    appId?: number;
    appName?: string;
    createTime?: number;
    labels?: string[];
    pid?: string;
    regionId?: string;
    show?: boolean;
    type?: string;
    updateTime?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListActivatedAlertsResponseBodyPageAlertsDispatchRules extends $tea.Model {
    ruleId?: number;
    ruleName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListActivatedAlertsResponseBodyPageAlerts extends $tea.Model {
    alertId?: string;
    alertName?: string;
    alertType?: string;
    count?: number;
    createTime?: number;
    dispatchRules?: ListActivatedAlertsResponseBodyPageAlertsDispatchRules[];
    endsAt?: number;
    expandFields?: {
        [key: string]: any;
    };
    integrationName?: string;
    integrationType?: string;
    involvedObjectKind?: string;
    involvedObjectName?: string;
    message?: string;
    severity?: string;
    startsAt?: number;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListActivatedAlertsResponseBodyPage extends $tea.Model {
    alerts?: ListActivatedAlertsResponseBodyPageAlerts[];
    page?: number;
    pageSize?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAlertEventsResponseBodyPageBeanEventsAlarms extends $tea.Model {
    alarmId?: number;
    alarmName?: string;
    createTime?: string;
    state?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAlertEventsResponseBodyPageBeanEvents extends $tea.Model {
    alarms?: ListAlertEventsResponseBodyPageBeanEventsAlarms[];
    alertName?: string;
    annotations?: string;
    description?: string;
    endTime?: string;
    generatorURL?: string;
    handlerName?: string;
    integrationName?: string;
    integrationType?: string;
    labels?: string;
    receiveTime?: string;
    severity?: string;
    startTime?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAlertEventsResponseBodyPageBean extends $tea.Model {
    events?: ListAlertEventsResponseBodyPageBeanEvents[];
    page?: number;
    size?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAlertsResponseBodyPageBeanListAlertsActivities extends $tea.Model {
    content?: string;
    description?: string;
    handlerName?: string;
    time?: string;
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAlertsResponseBodyPageBeanListAlertsAlertEvents extends $tea.Model {
    alertName?: string;
    annotations?: string;
    description?: string;
    endTime?: string;
    generatorURL?: string;
    integrationName?: string;
    integrationType?: string;
    labels?: string;
    receiveTime?: string;
    severity?: string;
    startTime?: string;
    state?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAlertsResponseBodyPageBeanListAlerts extends $tea.Model {
    activities?: ListAlertsResponseBodyPageBeanListAlertsActivities[];
    alertEvents?: ListAlertsResponseBodyPageBeanListAlertsAlertEvents[];
    alertId?: number;
    alertName?: string;
    createTime?: string;
    dispatchRuleId?: number;
    dispatchRuleName?: string;
    severity?: string;
    state?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAlertsResponseBodyPageBean extends $tea.Model {
    listAlerts?: ListAlertsResponseBodyPageBeanListAlerts[];
    page?: number;
    size?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListClusterFromGrafanaResponseBodyPromClusterList extends $tea.Model {
    agentStatus?: string;
    clusterId?: string;
    clusterName?: string;
    clusterType?: string;
    controllerId?: string;
    createTime?: number;
    extra?: string;
    id?: number;
    installTime?: number;
    isControllerInstalled?: boolean;
    lastHeartBeatTime?: number;
    nodeNum?: number;
    options?: string;
    pluginsJsonArray?: string;
    regionId?: string;
    stateJson?: string;
    updateTime?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListCmsInstancesResponseBodyDataProducts extends $tea.Model {
    descr?: string;
    id?: string;
    instance?: string;
    name?: string;
    prod?: string;
    source?: string;
    state?: string;
    time?: string;
    type?: string;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListCmsInstancesResponseBodyData extends $tea.Model {
    enableTag?: boolean;
    products?: ListCmsInstancesResponseBodyDataProducts[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDashboardsResponseBodyDashboardVosI18nChild extends $tea.Model {
    dashboardType?: string;
    exporter?: string;
    httpUrl?: string;
    httpsUrl?: string;
    id?: string;
    isArmsExporter?: boolean;
    kind?: string;
    language?: string;
    name?: string;
    needUpdate?: boolean;
    tags?: string[];
    time?: string;
    title?: string;
    type?: string;
    uid?: string;
    url?: string;
    version?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDashboardsResponseBodyDashboardVos extends $tea.Model {
    dashboardType?: string;
    exporter?: string;
    httpUrl?: string;
    httpsUrl?: string;
    i18nChild?: ListDashboardsResponseBodyDashboardVosI18nChild;
    id?: string;
    isArmsExporter?: boolean;
    kind?: string;
    language?: string;
    name?: string;
    needUpdate?: boolean;
    tags?: string[];
    time?: string;
    title?: string;
    type?: string;
    uid?: string;
    url?: string;
    version?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDispatchRuleResponseBodyDispatchRules extends $tea.Model {
    name?: string;
    ruleId?: number;
    state?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEscalationPoliciesResponseBodyPageBeanEscalationPolicies extends $tea.Model {
    id?: number;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEscalationPoliciesResponseBodyPageBean extends $tea.Model {
    escalationPolicies?: ListEscalationPoliciesResponseBodyPageBeanEscalationPolicies[];
    page?: number;
    size?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEventBridgeIntegrationsResponseBodyPageBeanEventBridgeIntegrations extends $tea.Model {
    description?: string;
    id?: number;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEventBridgeIntegrationsResponseBodyPageBean extends $tea.Model {
    eventBridgeIntegrations?: ListEventBridgeIntegrationsResponseBodyPageBeanEventBridgeIntegrations[];
    page?: number;
    size?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListInsightsEventsResponseBodyInsightsEvents extends $tea.Model {
    date?: number;
    desc?: string;
    level?: string;
    pid?: string;
    title?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListIntegrationResponseBodyPageInfoIntegrationsIntegrationDetail extends $tea.Model {
    autoRecover?: boolean;
    description?: string;
    duplicateKey?: string;
    extendedFieldRedefineRules?: {
        [key: string]: any;
    }[];
    fieldRedefineRules?: {
        [key: string]: any;
    }[];
    initiativeRecoverField?: string;
    initiativeRecoverValue?: string;
    recoverTime?: number;
    stat?: number[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListIntegrationResponseBodyPageInfoIntegrations extends $tea.Model {
    apiEndpoint?: string;
    createTime?: string;
    integrationDetail?: ListIntegrationResponseBodyPageInfoIntegrationsIntegrationDetail;
    integrationId?: number;
    integrationName?: string;
    integrationProductType?: string;
    liveness?: string;
    shortToken?: string;
    state?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListIntegrationResponseBodyPageInfo extends $tea.Model {
    integrations?: ListIntegrationResponseBodyPageInfoIntegrations[];
    page?: number;
    size?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesGroupRule extends $tea.Model {
    groupInterval?: number;
    groupWait?: number;
    groupingFields?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesMatchingRulesMatchingConditions extends $tea.Model {
    key?: string;
    operator?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesMatchingRules extends $tea.Model {
    matchingConditions?: ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesMatchingRulesMatchingConditions[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyRuleNotifyObjects extends $tea.Model {
    notifyObjectId?: number;
    notifyObjectName?: string;
    notifyObjectType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyRule extends $tea.Model {
    notifyChannels?: string[];
    notifyEndTime?: string;
    notifyObjects?: ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyRuleNotifyObjects[];
    notifyStartTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyTemplate extends $tea.Model {
    emailContent?: string;
    emailRecoverContent?: string;
    emailRecoverTitle?: string;
    emailTitle?: string;
    robotContent?: string;
    smsContent?: string;
    smsRecoverContent?: string;
    ttsContent?: string;
    ttsRecoverContent?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListNotificationPoliciesResponseBodyPageBeanNotificationPolicies extends $tea.Model {
    escalationPolicyId?: number;
    groupRule?: ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesGroupRule;
    id?: number;
    integrationId?: number;
    matchingRules?: ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesMatchingRules[];
    name?: string;
    notifyRule?: ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyRule;
    notifyTemplate?: ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyTemplate;
    repeat?: boolean;
    repeatInterval?: number;
    sendRecoverMessage?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListNotificationPoliciesResponseBodyPageBean extends $tea.Model {
    notificationPolicies?: ListNotificationPoliciesResponseBodyPageBeanNotificationPolicies[];
    page?: number;
    size?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOnCallSchedulesResponseBodyPageBeanOnCallSchedules extends $tea.Model {
    description?: string;
    id?: number;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOnCallSchedulesResponseBodyPageBean extends $tea.Model {
    onCallSchedules?: ListOnCallSchedulesResponseBodyPageBeanOnCallSchedules[];
    page?: number;
    size?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPrometheusAlertRulesResponseBodyPrometheusAlertRulesAnnotations extends $tea.Model {
    name?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPrometheusAlertRulesResponseBodyPrometheusAlertRulesLabels extends $tea.Model {
    name?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPrometheusAlertRulesResponseBodyPrometheusAlertRules extends $tea.Model {
    alertId?: number;
    alertName?: string;
    annotations?: ListPrometheusAlertRulesResponseBodyPrometheusAlertRulesAnnotations[];
    clusterId?: string;
    dispatchRuleId?: number;
    duration?: string;
    expression?: string;
    labels?: ListPrometheusAlertRulesResponseBodyPrometheusAlertRulesLabels[];
    message?: string;
    notifyType?: string;
    status?: number;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplatesAnnotations extends $tea.Model {
    name?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplatesLabels extends $tea.Model {
    name?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplates extends $tea.Model {
    alertName?: string;
    annotations?: ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplatesAnnotations[];
    description?: string;
    duration?: string;
    expression?: string;
    labels?: ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplatesLabels[];
    type?: string;
    version?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRetcodeAppsResponseBodyRetcodeApps extends $tea.Model {
    appId?: number;
    appName?: string;
    nickName?: string;
    pid?: string;
    retcodeAppType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListScenarioResponseBodyArmsScenarios extends $tea.Model {
    appId?: string;
    createTime?: string;
    extensions?: string;
    id?: number;
    name?: string;
    regionId?: string;
    sign?: string;
    updateTime?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListSilencePoliciesResponseBodyPageBeanSilencePoliciesMatchingRulesMatchingConditions extends $tea.Model {
    key?: string;
    operator?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListSilencePoliciesResponseBodyPageBeanSilencePoliciesMatchingRules extends $tea.Model {
    matchingConditions?: ListSilencePoliciesResponseBodyPageBeanSilencePoliciesMatchingRulesMatchingConditions[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListSilencePoliciesResponseBodyPageBeanSilencePolicies extends $tea.Model {
    id?: number;
    matchingRules?: ListSilencePoliciesResponseBodyPageBeanSilencePoliciesMatchingRules[];
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListSilencePoliciesResponseBodyPageBean extends $tea.Model {
    page?: number;
    silencePolicies?: ListSilencePoliciesResponseBodyPageBeanSilencePolicies[];
    size?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTraceAppsResponseBodyTraceApps extends $tea.Model {
    appId?: number;
    appName?: string;
    createTime?: number;
    labels?: string[];
    pid?: string;
    regionId?: string;
    show?: boolean;
    type?: string;
    updateTime?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMetricByPageRequestFilters extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMetricByPageResponseBodyData extends $tea.Model {
    items?: {
        [key: string]: any;
    }[];
    page?: number;
    pageSize?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPromInstallStatusResponseBodyData extends $tea.Model {
    isControllerInstalled?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveAliClusterIdsFromPrometheusGlobalViewResponseBodyData extends $tea.Model {
    info?: string;
    msg?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveSourcesFromPrometheusGlobalViewResponseBodyData extends $tea.Model {
    info?: string;
    msg?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveTraceAppConfigRequestSettings extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchAlertContactResponseBodyPageBeanContacts extends $tea.Model {
    contactId?: number;
    contactName?: string;
    content?: string;
    createTime?: number;
    dingRobot?: string;
    email?: string;
    phone?: string;
    systemNoc?: boolean;
    updateTime?: number;
    userId?: string;
    webhook?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchAlertContactResponseBodyPageBean extends $tea.Model {
    contacts?: SearchAlertContactResponseBodyPageBeanContacts[];
    pageNumber?: number;
    pageSize?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchAlertContactGroupResponseBodyContactGroupsContacts extends $tea.Model {
    contactId?: number;
    contactName?: string;
    createTime?: number;
    dingRobot?: string;
    email?: string;
    phone?: string;
    systemNoc?: boolean;
    updateTime?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchAlertContactGroupResponseBodyContactGroups extends $tea.Model {
    contactGroupId?: number;
    contactGroupName?: string;
    contacts?: SearchAlertContactGroupResponseBodyContactGroupsContacts[];
    createTime?: number;
    updateTime?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchAlertHistoriesResponseBodyPageBeanAlarmHistories extends $tea.Model {
    alarmContent?: string;
    alarmResponseCode?: number;
    alarmSources?: string;
    alarmTime?: number;
    alarmType?: number;
    emails?: string;
    id?: number;
    phones?: string;
    strategyId?: string;
    target?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchAlertHistoriesResponseBodyPageBean extends $tea.Model {
    alarmHistories?: SearchAlertHistoriesResponseBodyPageBeanAlarmHistories[];
    pageNumber?: number;
    pageSize?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchAlertRulesResponseBodyPageBeanAlertRulesAlarmContext extends $tea.Model {
    alarmContentSubTitle?: string;
    alarmContentTemplate?: string;
    content?: string;
    subTitle?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchAlertRulesResponseBodyPageBeanAlertRulesAlertRuleRules extends $tea.Model {
    aggregates?: string;
    alias?: string;
    measure?: string;
    NValue?: number;
    operator?: string;
    value?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchAlertRulesResponseBodyPageBeanAlertRulesAlertRule extends $tea.Model {
    operator?: string;
    rules?: SearchAlertRulesResponseBodyPageBeanAlertRulesAlertRuleRules[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchAlertRulesResponseBodyPageBeanAlertRulesMetricParamDimensions extends $tea.Model {
    key?: string;
    type?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchAlertRulesResponseBodyPageBeanAlertRulesMetricParam extends $tea.Model {
    appGroupId?: string;
    appId?: string;
    dimensions?: SearchAlertRulesResponseBodyPageBeanAlertRulesMetricParamDimensions[];
    pid?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchAlertRulesResponseBodyPageBeanAlertRulesNotice extends $tea.Model {
    endTime?: number;
    noticeEndTime?: number;
    noticeStartTime?: number;
    startTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchAlertRulesResponseBodyPageBeanAlertRules extends $tea.Model {
    alarmContext?: SearchAlertRulesResponseBodyPageBeanAlertRulesAlarmContext;
    alertLevel?: string;
    alertRule?: SearchAlertRulesResponseBodyPageBeanAlertRulesAlertRule;
    alertTitle?: string;
    alertType?: number;
    alertVersion?: number;
    alertWays?: string[];
    config?: string;
    contactGroupIdList?: string;
    contactGroupIds?: string;
    createTime?: number;
    hostByAlertManager?: boolean;
    id?: number;
    metricParam?: SearchAlertRulesResponseBodyPageBeanAlertRulesMetricParam;
    notice?: SearchAlertRulesResponseBodyPageBeanAlertRulesNotice;
    regionId?: string;
    status?: string;
    taskId?: number;
    taskStatus?: string;
    title?: string;
    updateTime?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchAlertRulesResponseBodyPageBean extends $tea.Model {
    alertRules?: SearchAlertRulesResponseBodyPageBeanAlertRules[];
    pageNumber?: number;
    pageSize?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchEventsResponseBodyPageBeanEvent extends $tea.Model {
    alertId?: number;
    alertName?: string;
    alertRule?: string;
    alertType?: number;
    eventLevel?: string;
    eventTime?: number;
    id?: number;
    links?: string[];
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchEventsResponseBodyPageBean extends $tea.Model {
    event?: SearchEventsResponseBodyPageBeanEvent[];
    pageNumber?: number;
    pageSize?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchRetcodeAppByPageResponseBodyPageBeanRetcodeApps extends $tea.Model {
    appId?: number;
    appName?: string;
    createTime?: number;
    nickName?: string;
    pid?: string;
    regionId?: string;
    retcodeAppType?: string;
    type?: string;
    updateTime?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchRetcodeAppByPageResponseBodyPageBean extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    retcodeApps?: SearchRetcodeAppByPageResponseBodyPageBeanRetcodeApps[];
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchTraceAppByNameResponseBodyTraceApps extends $tea.Model {
    appId?: number;
    appName?: string;
    createTime?: number;
    labels?: string[];
    pid?: string;
    regionId?: string;
    show?: boolean;
    type?: string;
    updateTime?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchTraceAppByPageResponseBodyPageBeanTraceApps extends $tea.Model {
    appId?: number;
    appName?: string;
    createTime?: number;
    labels?: string[];
    pid?: string;
    regionId?: string;
    show?: boolean;
    type?: string;
    updateTime?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchTraceAppByPageResponseBodyPageBean extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    totalCount?: number;
    traceApps?: SearchTraceAppByPageResponseBodyPageBeanTraceApps[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchTracesRequestExclusionFilters extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchTracesRequestTag extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchTracesResponseBodyTraceInfos extends $tea.Model {
    duration?: number;
    operationName?: string;
    serviceIp?: string;
    serviceName?: string;
    timestamp?: number;
    traceID?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchTracesByPageRequestExclusionFilters extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchTracesByPageRequestTags extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchTracesByPageResponseBodyPageBeanTraceInfos extends $tea.Model {
    duration?: number;
    operationName?: string;
    serviceIp?: string;
    serviceName?: string;
    timestamp?: number;
    traceID?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchTracesByPageResponseBodyPageBean extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    total?: number;
    traceInfos?: SearchTracesByPageResponseBodyPageBeanTraceInfos[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateIntegrationResponseBodyIntegration extends $tea.Model {
    apiEndpoint?: string;
    autoRecover?: boolean;
    description?: string;
    duplicateKey?: string;
    extendedFieldRedefineRules?: {
        [key: string]: any;
    }[];
    fieldRedefineRules?: {
        [key: string]: any;
    }[];
    initiativeRecoverField?: string;
    initiativeRecoverValue?: string;
    integrationId?: number;
    integrationName?: string;
    integrationProductType?: string;
    liveness?: string;
    recoverTime?: number;
    shortToken?: string;
    stat?: number[];
    state?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRuleAnnotations extends $tea.Model {
    name?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRuleLabels extends $tea.Model {
    name?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRule extends $tea.Model {
    alertId?: number;
    alertName?: string;
    annotations?: UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRuleAnnotations[];
    clusterId?: string;
    dispatchRuleId?: number;
    duration?: string;
    expression?: string;
    labels?: UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRuleLabels[];
    message?: string;
    notifyType?: string;
    status?: number;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadResponseBodyUploadResult extends $tea.Model {
    fid?: string;
    fileName?: string;
    uploadTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: {
        [key: string]: string;
    }, endpoint: string): string;
    addAliClusterIdsToPrometheusGlobalViewWithOptions(request: AddAliClusterIdsToPrometheusGlobalViewRequest, runtime: $Util.RuntimeOptions): Promise<AddAliClusterIdsToPrometheusGlobalViewResponse>;
    addAliClusterIdsToPrometheusGlobalView(request: AddAliClusterIdsToPrometheusGlobalViewRequest): Promise<AddAliClusterIdsToPrometheusGlobalViewResponse>;
    addGrafanaWithOptions(request: AddGrafanaRequest, runtime: $Util.RuntimeOptions): Promise<AddGrafanaResponse>;
    addGrafana(request: AddGrafanaRequest): Promise<AddGrafanaResponse>;
    addIntegrationWithOptions(request: AddIntegrationRequest, runtime: $Util.RuntimeOptions): Promise<AddIntegrationResponse>;
    addIntegration(request: AddIntegrationRequest): Promise<AddIntegrationResponse>;
    addPrometheusGlobalViewWithOptions(request: AddPrometheusGlobalViewRequest, runtime: $Util.RuntimeOptions): Promise<AddPrometheusGlobalViewResponse>;
    addPrometheusGlobalView(request: AddPrometheusGlobalViewRequest): Promise<AddPrometheusGlobalViewResponse>;
    addPrometheusGlobalViewByAliClusterIdsWithOptions(request: AddPrometheusGlobalViewByAliClusterIdsRequest, runtime: $Util.RuntimeOptions): Promise<AddPrometheusGlobalViewByAliClusterIdsResponse>;
    addPrometheusGlobalViewByAliClusterIds(request: AddPrometheusGlobalViewByAliClusterIdsRequest): Promise<AddPrometheusGlobalViewByAliClusterIdsResponse>;
    addPrometheusInstanceWithOptions(request: AddPrometheusInstanceRequest, runtime: $Util.RuntimeOptions): Promise<AddPrometheusInstanceResponse>;
    addPrometheusInstance(request: AddPrometheusInstanceRequest): Promise<AddPrometheusInstanceResponse>;
    addRecordingRuleWithOptions(request: AddRecordingRuleRequest, runtime: $Util.RuntimeOptions): Promise<AddRecordingRuleResponse>;
    addRecordingRule(request: AddRecordingRuleRequest): Promise<AddRecordingRuleResponse>;
    appendInstancesToPrometheusGlobalViewWithOptions(request: AppendInstancesToPrometheusGlobalViewRequest, runtime: $Util.RuntimeOptions): Promise<AppendInstancesToPrometheusGlobalViewResponse>;
    appendInstancesToPrometheusGlobalView(request: AppendInstancesToPrometheusGlobalViewRequest): Promise<AppendInstancesToPrometheusGlobalViewResponse>;
    applyScenarioWithOptions(tmpReq: ApplyScenarioRequest, runtime: $Util.RuntimeOptions): Promise<ApplyScenarioResponse>;
    applyScenario(request: ApplyScenarioRequest): Promise<ApplyScenarioResponse>;
    checkServiceStatusWithOptions(request: CheckServiceStatusRequest, runtime: $Util.RuntimeOptions): Promise<CheckServiceStatusResponse>;
    checkServiceStatus(request: CheckServiceStatusRequest): Promise<CheckServiceStatusResponse>;
    configAppWithOptions(request: ConfigAppRequest, runtime: $Util.RuntimeOptions): Promise<ConfigAppResponse>;
    configApp(request: ConfigAppRequest): Promise<ConfigAppResponse>;
    createAlertContactWithOptions(request: CreateAlertContactRequest, runtime: $Util.RuntimeOptions): Promise<CreateAlertContactResponse>;
    createAlertContact(request: CreateAlertContactRequest): Promise<CreateAlertContactResponse>;
    createAlertContactGroupWithOptions(request: CreateAlertContactGroupRequest, runtime: $Util.RuntimeOptions): Promise<CreateAlertContactGroupResponse>;
    createAlertContactGroup(request: CreateAlertContactGroupRequest): Promise<CreateAlertContactGroupResponse>;
    createDispatchRuleWithOptions(request: CreateDispatchRuleRequest, runtime: $Util.RuntimeOptions): Promise<CreateDispatchRuleResponse>;
    createDispatchRule(request: CreateDispatchRuleRequest): Promise<CreateDispatchRuleResponse>;
    createIntegrationWithOptions(request: CreateIntegrationRequest, runtime: $Util.RuntimeOptions): Promise<CreateIntegrationResponse>;
    createIntegration(request: CreateIntegrationRequest): Promise<CreateIntegrationResponse>;
    createOrUpdateAlertRuleWithOptions(request: CreateOrUpdateAlertRuleRequest, runtime: $Util.RuntimeOptions): Promise<CreateOrUpdateAlertRuleResponse>;
    createOrUpdateAlertRule(request: CreateOrUpdateAlertRuleRequest): Promise<CreateOrUpdateAlertRuleResponse>;
    createOrUpdateContactWithOptions(request: CreateOrUpdateContactRequest, runtime: $Util.RuntimeOptions): Promise<CreateOrUpdateContactResponse>;
    createOrUpdateContact(request: CreateOrUpdateContactRequest): Promise<CreateOrUpdateContactResponse>;
    createOrUpdateContactGroupWithOptions(request: CreateOrUpdateContactGroupRequest, runtime: $Util.RuntimeOptions): Promise<CreateOrUpdateContactGroupResponse>;
    createOrUpdateContactGroup(request: CreateOrUpdateContactGroupRequest): Promise<CreateOrUpdateContactGroupResponse>;
    createOrUpdateEventBridgeIntegrationWithOptions(request: CreateOrUpdateEventBridgeIntegrationRequest, runtime: $Util.RuntimeOptions): Promise<CreateOrUpdateEventBridgeIntegrationResponse>;
    createOrUpdateEventBridgeIntegration(request: CreateOrUpdateEventBridgeIntegrationRequest): Promise<CreateOrUpdateEventBridgeIntegrationResponse>;
    createOrUpdateIMRobotWithOptions(request: CreateOrUpdateIMRobotRequest, runtime: $Util.RuntimeOptions): Promise<CreateOrUpdateIMRobotResponse>;
    createOrUpdateIMRobot(request: CreateOrUpdateIMRobotRequest): Promise<CreateOrUpdateIMRobotResponse>;
    createOrUpdateNotificationPolicyWithOptions(request: CreateOrUpdateNotificationPolicyRequest, runtime: $Util.RuntimeOptions): Promise<CreateOrUpdateNotificationPolicyResponse>;
    createOrUpdateNotificationPolicy(request: CreateOrUpdateNotificationPolicyRequest): Promise<CreateOrUpdateNotificationPolicyResponse>;
    createOrUpdateSilencePolicyWithOptions(request: CreateOrUpdateSilencePolicyRequest, runtime: $Util.RuntimeOptions): Promise<CreateOrUpdateSilencePolicyResponse>;
    createOrUpdateSilencePolicy(request: CreateOrUpdateSilencePolicyRequest): Promise<CreateOrUpdateSilencePolicyResponse>;
    createOrUpdateWebhookContactWithOptions(request: CreateOrUpdateWebhookContactRequest, runtime: $Util.RuntimeOptions): Promise<CreateOrUpdateWebhookContactResponse>;
    createOrUpdateWebhookContact(request: CreateOrUpdateWebhookContactRequest): Promise<CreateOrUpdateWebhookContactResponse>;
    createPrometheusAlertRuleWithOptions(request: CreatePrometheusAlertRuleRequest, runtime: $Util.RuntimeOptions): Promise<CreatePrometheusAlertRuleResponse>;
    createPrometheusAlertRule(request: CreatePrometheusAlertRuleRequest): Promise<CreatePrometheusAlertRuleResponse>;
    createRetcodeAppWithOptions(request: CreateRetcodeAppRequest, runtime: $Util.RuntimeOptions): Promise<CreateRetcodeAppResponse>;
    createRetcodeApp(request: CreateRetcodeAppRequest): Promise<CreateRetcodeAppResponse>;
    createSyntheticTaskWithOptions(tmpReq: CreateSyntheticTaskRequest, runtime: $Util.RuntimeOptions): Promise<CreateSyntheticTaskResponse>;
    createSyntheticTask(request: CreateSyntheticTaskRequest): Promise<CreateSyntheticTaskResponse>;
    createWebhookWithOptions(request: CreateWebhookRequest, runtime: $Util.RuntimeOptions): Promise<CreateWebhookResponse>;
    createWebhook(request: CreateWebhookRequest): Promise<CreateWebhookResponse>;
    delAuthTokenWithOptions(request: DelAuthTokenRequest, runtime: $Util.RuntimeOptions): Promise<DelAuthTokenResponse>;
    delAuthToken(request: DelAuthTokenRequest): Promise<DelAuthTokenResponse>;
    deleteAlertContactWithOptions(request: DeleteAlertContactRequest, runtime: $Util.RuntimeOptions): Promise<DeleteAlertContactResponse>;
    deleteAlertContact(request: DeleteAlertContactRequest): Promise<DeleteAlertContactResponse>;
    deleteAlertContactGroupWithOptions(request: DeleteAlertContactGroupRequest, runtime: $Util.RuntimeOptions): Promise<DeleteAlertContactGroupResponse>;
    deleteAlertContactGroup(request: DeleteAlertContactGroupRequest): Promise<DeleteAlertContactGroupResponse>;
    deleteAlertRuleWithOptions(request: DeleteAlertRuleRequest, runtime: $Util.RuntimeOptions): Promise<DeleteAlertRuleResponse>;
    deleteAlertRule(request: DeleteAlertRuleRequest): Promise<DeleteAlertRuleResponse>;
    deleteAlertRulesWithOptions(request: DeleteAlertRulesRequest, runtime: $Util.RuntimeOptions): Promise<DeleteAlertRulesResponse>;
    deleteAlertRules(request: DeleteAlertRulesRequest): Promise<DeleteAlertRulesResponse>;
    deleteCmsExporterWithOptions(request: DeleteCmsExporterRequest, runtime: $Util.RuntimeOptions): Promise<DeleteCmsExporterResponse>;
    deleteCmsExporter(request: DeleteCmsExporterRequest): Promise<DeleteCmsExporterResponse>;
    deleteContactWithOptions(request: DeleteContactRequest, runtime: $Util.RuntimeOptions): Promise<DeleteContactResponse>;
    deleteContact(request: DeleteContactRequest): Promise<DeleteContactResponse>;
    deleteContactGroupWithOptions(request: DeleteContactGroupRequest, runtime: $Util.RuntimeOptions): Promise<DeleteContactGroupResponse>;
    deleteContactGroup(request: DeleteContactGroupRequest): Promise<DeleteContactGroupResponse>;
    deleteDispatchRuleWithOptions(request: DeleteDispatchRuleRequest, runtime: $Util.RuntimeOptions): Promise<DeleteDispatchRuleResponse>;
    deleteDispatchRule(request: DeleteDispatchRuleRequest): Promise<DeleteDispatchRuleResponse>;
    deleteEventBridgeIntegrationWithOptions(request: DeleteEventBridgeIntegrationRequest, runtime: $Util.RuntimeOptions): Promise<DeleteEventBridgeIntegrationResponse>;
    deleteEventBridgeIntegration(request: DeleteEventBridgeIntegrationRequest): Promise<DeleteEventBridgeIntegrationResponse>;
    deleteGrafanaResourceWithOptions(request: DeleteGrafanaResourceRequest, runtime: $Util.RuntimeOptions): Promise<DeleteGrafanaResourceResponse>;
    deleteGrafanaResource(request: DeleteGrafanaResourceRequest): Promise<DeleteGrafanaResourceResponse>;
    deleteIMRobotWithOptions(request: DeleteIMRobotRequest, runtime: $Util.RuntimeOptions): Promise<DeleteIMRobotResponse>;
    deleteIMRobot(request: DeleteIMRobotRequest): Promise<DeleteIMRobotResponse>;
    deleteIntegrationWithOptions(request: DeleteIntegrationRequest, runtime: $Util.RuntimeOptions): Promise<DeleteIntegrationResponse>;
    deleteIntegration(request: DeleteIntegrationRequest): Promise<DeleteIntegrationResponse>;
    deleteIntegrationsWithOptions(request: DeleteIntegrationsRequest, runtime: $Util.RuntimeOptions): Promise<DeleteIntegrationsResponse>;
    deleteIntegrations(request: DeleteIntegrationsRequest): Promise<DeleteIntegrationsResponse>;
    deleteNotificationPolicyWithOptions(request: DeleteNotificationPolicyRequest, runtime: $Util.RuntimeOptions): Promise<DeleteNotificationPolicyResponse>;
    deleteNotificationPolicy(request: DeleteNotificationPolicyRequest): Promise<DeleteNotificationPolicyResponse>;
    deletePrometheusAlertRuleWithOptions(request: DeletePrometheusAlertRuleRequest, runtime: $Util.RuntimeOptions): Promise<DeletePrometheusAlertRuleResponse>;
    deletePrometheusAlertRule(request: DeletePrometheusAlertRuleRequest): Promise<DeletePrometheusAlertRuleResponse>;
    deletePrometheusGlobalViewWithOptions(request: DeletePrometheusGlobalViewRequest, runtime: $Util.RuntimeOptions): Promise<DeletePrometheusGlobalViewResponse>;
    deletePrometheusGlobalView(request: DeletePrometheusGlobalViewRequest): Promise<DeletePrometheusGlobalViewResponse>;
    deleteRetcodeAppWithOptions(request: DeleteRetcodeAppRequest, runtime: $Util.RuntimeOptions): Promise<DeleteRetcodeAppResponse>;
    deleteRetcodeApp(request: DeleteRetcodeAppRequest): Promise<DeleteRetcodeAppResponse>;
    deleteScenarioWithOptions(request: DeleteScenarioRequest, runtime: $Util.RuntimeOptions): Promise<DeleteScenarioResponse>;
    deleteScenario(request: DeleteScenarioRequest): Promise<DeleteScenarioResponse>;
    deleteSilencePolicyWithOptions(request: DeleteSilencePolicyRequest, runtime: $Util.RuntimeOptions): Promise<DeleteSilencePolicyResponse>;
    deleteSilencePolicy(request: DeleteSilencePolicyRequest): Promise<DeleteSilencePolicyResponse>;
    deleteSourceMapWithOptions(tmpReq: DeleteSourceMapRequest, runtime: $Util.RuntimeOptions): Promise<DeleteSourceMapResponse>;
    deleteSourceMap(request: DeleteSourceMapRequest): Promise<DeleteSourceMapResponse>;
    deleteSyntheticTaskWithOptions(request: DeleteSyntheticTaskRequest, runtime: $Util.RuntimeOptions): Promise<DeleteSyntheticTaskResponse>;
    deleteSyntheticTask(request: DeleteSyntheticTaskRequest): Promise<DeleteSyntheticTaskResponse>;
    deleteTraceAppWithOptions(request: DeleteTraceAppRequest, runtime: $Util.RuntimeOptions): Promise<DeleteTraceAppResponse>;
    deleteTraceApp(request: DeleteTraceAppRequest): Promise<DeleteTraceAppResponse>;
    deleteWebhookContactWithOptions(request: DeleteWebhookContactRequest, runtime: $Util.RuntimeOptions): Promise<DeleteWebhookContactResponse>;
    deleteWebhookContact(request: DeleteWebhookContactRequest): Promise<DeleteWebhookContactResponse>;
    describeContactGroupsWithOptions(request: DescribeContactGroupsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeContactGroupsResponse>;
    describeContactGroups(request: DescribeContactGroupsRequest): Promise<DescribeContactGroupsResponse>;
    describeContactsWithOptions(request: DescribeContactsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeContactsResponse>;
    describeContacts(request: DescribeContactsRequest): Promise<DescribeContactsResponse>;
    describeDispatchRuleWithOptions(request: DescribeDispatchRuleRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDispatchRuleResponse>;
    describeDispatchRule(request: DescribeDispatchRuleRequest): Promise<DescribeDispatchRuleResponse>;
    describeIMRobotsWithOptions(request: DescribeIMRobotsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeIMRobotsResponse>;
    describeIMRobots(request: DescribeIMRobotsRequest): Promise<DescribeIMRobotsResponse>;
    describePrometheusAlertRuleWithOptions(request: DescribePrometheusAlertRuleRequest, runtime: $Util.RuntimeOptions): Promise<DescribePrometheusAlertRuleResponse>;
    describePrometheusAlertRule(request: DescribePrometheusAlertRuleRequest): Promise<DescribePrometheusAlertRuleResponse>;
    describeTraceLicenseKeyWithOptions(request: DescribeTraceLicenseKeyRequest, runtime: $Util.RuntimeOptions): Promise<DescribeTraceLicenseKeyResponse>;
    describeTraceLicenseKey(request: DescribeTraceLicenseKeyRequest): Promise<DescribeTraceLicenseKeyResponse>;
    describeWebhookContactsWithOptions(request: DescribeWebhookContactsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeWebhookContactsResponse>;
    describeWebhookContacts(request: DescribeWebhookContactsRequest): Promise<DescribeWebhookContactsResponse>;
    getAgentDownloadUrlWithOptions(request: GetAgentDownloadUrlRequest, runtime: $Util.RuntimeOptions): Promise<GetAgentDownloadUrlResponse>;
    getAgentDownloadUrl(request: GetAgentDownloadUrlRequest): Promise<GetAgentDownloadUrlResponse>;
    getAlertRulesWithOptions(request: GetAlertRulesRequest, runtime: $Util.RuntimeOptions): Promise<GetAlertRulesResponse>;
    getAlertRules(request: GetAlertRulesRequest): Promise<GetAlertRulesResponse>;
    getAppApiByPageWithOptions(request: GetAppApiByPageRequest, runtime: $Util.RuntimeOptions): Promise<GetAppApiByPageResponse>;
    getAppApiByPage(request: GetAppApiByPageRequest): Promise<GetAppApiByPageResponse>;
    getAuthTokenWithOptions(request: GetAuthTokenRequest, runtime: $Util.RuntimeOptions): Promise<GetAuthTokenResponse>;
    getAuthToken(request: GetAuthTokenRequest): Promise<GetAuthTokenResponse>;
    getClusterAllUrlWithOptions(request: GetClusterAllUrlRequest, runtime: $Util.RuntimeOptions): Promise<GetClusterAllUrlResponse>;
    getClusterAllUrl(request: GetClusterAllUrlRequest): Promise<GetClusterAllUrlResponse>;
    getExploreUrlWithOptions(request: GetExploreUrlRequest, runtime: $Util.RuntimeOptions): Promise<GetExploreUrlResponse>;
    getExploreUrl(request: GetExploreUrlRequest): Promise<GetExploreUrlResponse>;
    getIntegrationStateWithOptions(request: GetIntegrationStateRequest, runtime: $Util.RuntimeOptions): Promise<GetIntegrationStateResponse>;
    getIntegrationState(request: GetIntegrationStateRequest): Promise<GetIntegrationStateResponse>;
    getManagedPrometheusStatusWithOptions(request: GetManagedPrometheusStatusRequest, runtime: $Util.RuntimeOptions): Promise<GetManagedPrometheusStatusResponse>;
    getManagedPrometheusStatus(request: GetManagedPrometheusStatusRequest): Promise<GetManagedPrometheusStatusResponse>;
    getMultipleTraceWithOptions(request: GetMultipleTraceRequest, runtime: $Util.RuntimeOptions): Promise<GetMultipleTraceResponse>;
    getMultipleTrace(request: GetMultipleTraceRequest): Promise<GetMultipleTraceResponse>;
    getOnCallSchedulesDetailWithOptions(request: GetOnCallSchedulesDetailRequest, runtime: $Util.RuntimeOptions): Promise<GetOnCallSchedulesDetailResponse>;
    getOnCallSchedulesDetail(request: GetOnCallSchedulesDetailRequest): Promise<GetOnCallSchedulesDetailResponse>;
    getPrometheusApiTokenWithOptions(request: GetPrometheusApiTokenRequest, runtime: $Util.RuntimeOptions): Promise<GetPrometheusApiTokenResponse>;
    getPrometheusApiToken(request: GetPrometheusApiTokenRequest): Promise<GetPrometheusApiTokenResponse>;
    getPrometheusGlobalViewWithOptions(request: GetPrometheusGlobalViewRequest, runtime: $Util.RuntimeOptions): Promise<GetPrometheusGlobalViewResponse>;
    getPrometheusGlobalView(request: GetPrometheusGlobalViewRequest): Promise<GetPrometheusGlobalViewResponse>;
    getRecordingRuleWithOptions(request: GetRecordingRuleRequest, runtime: $Util.RuntimeOptions): Promise<GetRecordingRuleResponse>;
    getRecordingRule(request: GetRecordingRuleRequest): Promise<GetRecordingRuleResponse>;
    getRetcodeShareUrlWithOptions(request: GetRetcodeShareUrlRequest, runtime: $Util.RuntimeOptions): Promise<GetRetcodeShareUrlResponse>;
    getRetcodeShareUrl(request: GetRetcodeShareUrlRequest): Promise<GetRetcodeShareUrlResponse>;
    getSourceMapInfoWithOptions(request: GetSourceMapInfoRequest, runtime: $Util.RuntimeOptions): Promise<GetSourceMapInfoResponse>;
    getSourceMapInfo(request: GetSourceMapInfoRequest): Promise<GetSourceMapInfoResponse>;
    getStackWithOptions(request: GetStackRequest, runtime: $Util.RuntimeOptions): Promise<GetStackResponse>;
    getStack(request: GetStackRequest): Promise<GetStackResponse>;
    getSyntheticTaskDetailWithOptions(request: GetSyntheticTaskDetailRequest, runtime: $Util.RuntimeOptions): Promise<GetSyntheticTaskDetailResponse>;
    getSyntheticTaskDetail(request: GetSyntheticTaskDetailRequest): Promise<GetSyntheticTaskDetailResponse>;
    getSyntheticTaskListWithOptions(request: GetSyntheticTaskListRequest, runtime: $Util.RuntimeOptions): Promise<GetSyntheticTaskListResponse>;
    getSyntheticTaskList(request: GetSyntheticTaskListRequest): Promise<GetSyntheticTaskListResponse>;
    getSyntheticTaskMonitorsWithOptions(request: GetSyntheticTaskMonitorsRequest, runtime: $Util.RuntimeOptions): Promise<GetSyntheticTaskMonitorsResponse>;
    getSyntheticTaskMonitors(request: GetSyntheticTaskMonitorsRequest): Promise<GetSyntheticTaskMonitorsResponse>;
    getTraceWithOptions(request: GetTraceRequest, runtime: $Util.RuntimeOptions): Promise<GetTraceResponse>;
    getTrace(request: GetTraceRequest): Promise<GetTraceResponse>;
    getTraceAppWithOptions(request: GetTraceAppRequest, runtime: $Util.RuntimeOptions): Promise<GetTraceAppResponse>;
    getTraceApp(request: GetTraceAppRequest): Promise<GetTraceAppResponse>;
    importAppAlertRulesWithOptions(request: ImportAppAlertRulesRequest, runtime: $Util.RuntimeOptions): Promise<ImportAppAlertRulesResponse>;
    importAppAlertRules(request: ImportAppAlertRulesRequest): Promise<ImportAppAlertRulesResponse>;
    installCmsExporterWithOptions(request: InstallCmsExporterRequest, runtime: $Util.RuntimeOptions): Promise<InstallCmsExporterResponse>;
    installCmsExporter(request: InstallCmsExporterRequest): Promise<InstallCmsExporterResponse>;
    installManagedPrometheusWithOptions(request: InstallManagedPrometheusRequest, runtime: $Util.RuntimeOptions): Promise<InstallManagedPrometheusResponse>;
    installManagedPrometheus(request: InstallManagedPrometheusRequest): Promise<InstallManagedPrometheusResponse>;
    listActivatedAlertsWithOptions(request: ListActivatedAlertsRequest, runtime: $Util.RuntimeOptions): Promise<ListActivatedAlertsResponse>;
    listActivatedAlerts(request: ListActivatedAlertsRequest): Promise<ListActivatedAlertsResponse>;
    listAlertEventsWithOptions(request: ListAlertEventsRequest, runtime: $Util.RuntimeOptions): Promise<ListAlertEventsResponse>;
    listAlertEvents(request: ListAlertEventsRequest): Promise<ListAlertEventsResponse>;
    listAlertsWithOptions(request: ListAlertsRequest, runtime: $Util.RuntimeOptions): Promise<ListAlertsResponse>;
    listAlerts(request: ListAlertsRequest): Promise<ListAlertsResponse>;
    listClusterFromGrafanaWithOptions(request: ListClusterFromGrafanaRequest, runtime: $Util.RuntimeOptions): Promise<ListClusterFromGrafanaResponse>;
    listClusterFromGrafana(request: ListClusterFromGrafanaRequest): Promise<ListClusterFromGrafanaResponse>;
    listCmsInstancesWithOptions(request: ListCmsInstancesRequest, runtime: $Util.RuntimeOptions): Promise<ListCmsInstancesResponse>;
    listCmsInstances(request: ListCmsInstancesRequest): Promise<ListCmsInstancesResponse>;
    listDashboardsWithOptions(request: ListDashboardsRequest, runtime: $Util.RuntimeOptions): Promise<ListDashboardsResponse>;
    listDashboards(request: ListDashboardsRequest): Promise<ListDashboardsResponse>;
    listDashboardsByNameWithOptions(request: ListDashboardsByNameRequest, runtime: $Util.RuntimeOptions): Promise<ListDashboardsByNameResponse>;
    listDashboardsByName(request: ListDashboardsByNameRequest): Promise<ListDashboardsByNameResponse>;
    listDispatchRuleWithOptions(request: ListDispatchRuleRequest, runtime: $Util.RuntimeOptions): Promise<ListDispatchRuleResponse>;
    listDispatchRule(request: ListDispatchRuleRequest): Promise<ListDispatchRuleResponse>;
    listEscalationPoliciesWithOptions(request: ListEscalationPoliciesRequest, runtime: $Util.RuntimeOptions): Promise<ListEscalationPoliciesResponse>;
    listEscalationPolicies(request: ListEscalationPoliciesRequest): Promise<ListEscalationPoliciesResponse>;
    listEventBridgeIntegrationsWithOptions(request: ListEventBridgeIntegrationsRequest, runtime: $Util.RuntimeOptions): Promise<ListEventBridgeIntegrationsResponse>;
    listEventBridgeIntegrations(request: ListEventBridgeIntegrationsRequest): Promise<ListEventBridgeIntegrationsResponse>;
    listInsightsEventsWithOptions(request: ListInsightsEventsRequest, runtime: $Util.RuntimeOptions): Promise<ListInsightsEventsResponse>;
    listInsightsEvents(request: ListInsightsEventsRequest): Promise<ListInsightsEventsResponse>;
    listIntegrationWithOptions(request: ListIntegrationRequest, runtime: $Util.RuntimeOptions): Promise<ListIntegrationResponse>;
    listIntegration(request: ListIntegrationRequest): Promise<ListIntegrationResponse>;
    listNotificationPoliciesWithOptions(request: ListNotificationPoliciesRequest, runtime: $Util.RuntimeOptions): Promise<ListNotificationPoliciesResponse>;
    listNotificationPolicies(request: ListNotificationPoliciesRequest): Promise<ListNotificationPoliciesResponse>;
    listOnCallSchedulesWithOptions(request: ListOnCallSchedulesRequest, runtime: $Util.RuntimeOptions): Promise<ListOnCallSchedulesResponse>;
    listOnCallSchedules(request: ListOnCallSchedulesRequest): Promise<ListOnCallSchedulesResponse>;
    listPrometheusAlertRulesWithOptions(request: ListPrometheusAlertRulesRequest, runtime: $Util.RuntimeOptions): Promise<ListPrometheusAlertRulesResponse>;
    listPrometheusAlertRules(request: ListPrometheusAlertRulesRequest): Promise<ListPrometheusAlertRulesResponse>;
    listPrometheusAlertTemplatesWithOptions(request: ListPrometheusAlertTemplatesRequest, runtime: $Util.RuntimeOptions): Promise<ListPrometheusAlertTemplatesResponse>;
    listPrometheusAlertTemplates(request: ListPrometheusAlertTemplatesRequest): Promise<ListPrometheusAlertTemplatesResponse>;
    listPrometheusGlobalViewWithOptions(request: ListPrometheusGlobalViewRequest, runtime: $Util.RuntimeOptions): Promise<ListPrometheusGlobalViewResponse>;
    listPrometheusGlobalView(request: ListPrometheusGlobalViewRequest): Promise<ListPrometheusGlobalViewResponse>;
    listPrometheusInstancesWithOptions(request: ListPrometheusInstancesRequest, runtime: $Util.RuntimeOptions): Promise<ListPrometheusInstancesResponse>;
    listPrometheusInstances(request: ListPrometheusInstancesRequest): Promise<ListPrometheusInstancesResponse>;
    listRetcodeAppsWithOptions(request: ListRetcodeAppsRequest, runtime: $Util.RuntimeOptions): Promise<ListRetcodeAppsResponse>;
    listRetcodeApps(request: ListRetcodeAppsRequest): Promise<ListRetcodeAppsResponse>;
    listScenarioWithOptions(request: ListScenarioRequest, runtime: $Util.RuntimeOptions): Promise<ListScenarioResponse>;
    listScenario(request: ListScenarioRequest): Promise<ListScenarioResponse>;
    listSilencePoliciesWithOptions(request: ListSilencePoliciesRequest, runtime: $Util.RuntimeOptions): Promise<ListSilencePoliciesResponse>;
    listSilencePolicies(request: ListSilencePoliciesRequest): Promise<ListSilencePoliciesResponse>;
    listTraceAppsWithOptions(request: ListTraceAppsRequest, runtime: $Util.RuntimeOptions): Promise<ListTraceAppsResponse>;
    listTraceApps(request: ListTraceAppsRequest): Promise<ListTraceAppsResponse>;
    manageGetRecordingRuleWithOptions(request: ManageGetRecordingRuleRequest, runtime: $Util.RuntimeOptions): Promise<ManageGetRecordingRuleResponse>;
    manageGetRecordingRule(request: ManageGetRecordingRuleRequest): Promise<ManageGetRecordingRuleResponse>;
    manageRecordingRuleWithOptions(request: ManageRecordingRuleRequest, runtime: $Util.RuntimeOptions): Promise<ManageRecordingRuleResponse>;
    manageRecordingRule(request: ManageRecordingRuleRequest): Promise<ManageRecordingRuleResponse>;
    openArmsDefaultSLRWithOptions(request: OpenArmsDefaultSLRRequest, runtime: $Util.RuntimeOptions): Promise<OpenArmsDefaultSLRResponse>;
    openArmsDefaultSLR(request: OpenArmsDefaultSLRRequest): Promise<OpenArmsDefaultSLRResponse>;
    openArmsServiceSecondVersionWithOptions(request: OpenArmsServiceSecondVersionRequest, runtime: $Util.RuntimeOptions): Promise<OpenArmsServiceSecondVersionResponse>;
    openArmsServiceSecondVersion(request: OpenArmsServiceSecondVersionRequest): Promise<OpenArmsServiceSecondVersionResponse>;
    openVClusterWithOptions(request: OpenVClusterRequest, runtime: $Util.RuntimeOptions): Promise<OpenVClusterResponse>;
    openVCluster(request: OpenVClusterRequest): Promise<OpenVClusterResponse>;
    openXtraceDefaultSLRWithOptions(request: OpenXtraceDefaultSLRRequest, runtime: $Util.RuntimeOptions): Promise<OpenXtraceDefaultSLRResponse>;
    openXtraceDefaultSLR(request: OpenXtraceDefaultSLRRequest): Promise<OpenXtraceDefaultSLRResponse>;
    queryMetricByPageWithOptions(request: QueryMetricByPageRequest, runtime: $Util.RuntimeOptions): Promise<QueryMetricByPageResponse>;
    queryMetricByPage(request: QueryMetricByPageRequest): Promise<QueryMetricByPageResponse>;
    queryPromInstallStatusWithOptions(request: QueryPromInstallStatusRequest, runtime: $Util.RuntimeOptions): Promise<QueryPromInstallStatusResponse>;
    queryPromInstallStatus(request: QueryPromInstallStatusRequest): Promise<QueryPromInstallStatusResponse>;
    queryReleaseMetricWithOptions(request: QueryReleaseMetricRequest, runtime: $Util.RuntimeOptions): Promise<QueryReleaseMetricResponse>;
    queryReleaseMetric(request: QueryReleaseMetricRequest): Promise<QueryReleaseMetricResponse>;
    removeAliClusterIdsFromPrometheusGlobalViewWithOptions(request: RemoveAliClusterIdsFromPrometheusGlobalViewRequest, runtime: $Util.RuntimeOptions): Promise<RemoveAliClusterIdsFromPrometheusGlobalViewResponse>;
    removeAliClusterIdsFromPrometheusGlobalView(request: RemoveAliClusterIdsFromPrometheusGlobalViewRequest): Promise<RemoveAliClusterIdsFromPrometheusGlobalViewResponse>;
    removeSourcesFromPrometheusGlobalViewWithOptions(request: RemoveSourcesFromPrometheusGlobalViewRequest, runtime: $Util.RuntimeOptions): Promise<RemoveSourcesFromPrometheusGlobalViewResponse>;
    removeSourcesFromPrometheusGlobalView(request: RemoveSourcesFromPrometheusGlobalViewRequest): Promise<RemoveSourcesFromPrometheusGlobalViewResponse>;
    saveTraceAppConfigWithOptions(request: SaveTraceAppConfigRequest, runtime: $Util.RuntimeOptions): Promise<SaveTraceAppConfigResponse>;
    saveTraceAppConfig(request: SaveTraceAppConfigRequest): Promise<SaveTraceAppConfigResponse>;
    searchAlertContactWithOptions(request: SearchAlertContactRequest, runtime: $Util.RuntimeOptions): Promise<SearchAlertContactResponse>;
    searchAlertContact(request: SearchAlertContactRequest): Promise<SearchAlertContactResponse>;
    searchAlertContactGroupWithOptions(request: SearchAlertContactGroupRequest, runtime: $Util.RuntimeOptions): Promise<SearchAlertContactGroupResponse>;
    searchAlertContactGroup(request: SearchAlertContactGroupRequest): Promise<SearchAlertContactGroupResponse>;
    searchAlertHistoriesWithOptions(request: SearchAlertHistoriesRequest, runtime: $Util.RuntimeOptions): Promise<SearchAlertHistoriesResponse>;
    searchAlertHistories(request: SearchAlertHistoriesRequest): Promise<SearchAlertHistoriesResponse>;
    searchAlertRulesWithOptions(request: SearchAlertRulesRequest, runtime: $Util.RuntimeOptions): Promise<SearchAlertRulesResponse>;
    searchAlertRules(request: SearchAlertRulesRequest): Promise<SearchAlertRulesResponse>;
    searchEventsWithOptions(request: SearchEventsRequest, runtime: $Util.RuntimeOptions): Promise<SearchEventsResponse>;
    searchEvents(request: SearchEventsRequest): Promise<SearchEventsResponse>;
    searchRetcodeAppByPageWithOptions(request: SearchRetcodeAppByPageRequest, runtime: $Util.RuntimeOptions): Promise<SearchRetcodeAppByPageResponse>;
    searchRetcodeAppByPage(request: SearchRetcodeAppByPageRequest): Promise<SearchRetcodeAppByPageResponse>;
    searchTraceAppByNameWithOptions(request: SearchTraceAppByNameRequest, runtime: $Util.RuntimeOptions): Promise<SearchTraceAppByNameResponse>;
    searchTraceAppByName(request: SearchTraceAppByNameRequest): Promise<SearchTraceAppByNameResponse>;
    searchTraceAppByPageWithOptions(request: SearchTraceAppByPageRequest, runtime: $Util.RuntimeOptions): Promise<SearchTraceAppByPageResponse>;
    searchTraceAppByPage(request: SearchTraceAppByPageRequest): Promise<SearchTraceAppByPageResponse>;
    searchTracesWithOptions(request: SearchTracesRequest, runtime: $Util.RuntimeOptions): Promise<SearchTracesResponse>;
    searchTraces(request: SearchTracesRequest): Promise<SearchTracesResponse>;
    searchTracesByPageWithOptions(request: SearchTracesByPageRequest, runtime: $Util.RuntimeOptions): Promise<SearchTracesByPageResponse>;
    searchTracesByPage(request: SearchTracesByPageRequest): Promise<SearchTracesByPageResponse>;
    sendTTSVerifyLinkWithOptions(request: SendTTSVerifyLinkRequest, runtime: $Util.RuntimeOptions): Promise<SendTTSVerifyLinkResponse>;
    sendTTSVerifyLink(request: SendTTSVerifyLinkRequest): Promise<SendTTSVerifyLinkResponse>;
    setRetcodeShareStatusWithOptions(request: SetRetcodeShareStatusRequest, runtime: $Util.RuntimeOptions): Promise<SetRetcodeShareStatusResponse>;
    setRetcodeShareStatus(request: SetRetcodeShareStatusRequest): Promise<SetRetcodeShareStatusResponse>;
    startAlertWithOptions(request: StartAlertRequest, runtime: $Util.RuntimeOptions): Promise<StartAlertResponse>;
    startAlert(request: StartAlertRequest): Promise<StartAlertResponse>;
    stopAlertWithOptions(request: StopAlertRequest, runtime: $Util.RuntimeOptions): Promise<StopAlertResponse>;
    stopAlert(request: StopAlertRequest): Promise<StopAlertResponse>;
    switchSyntheticTaskStatusWithOptions(request: SwitchSyntheticTaskStatusRequest, runtime: $Util.RuntimeOptions): Promise<SwitchSyntheticTaskStatusResponse>;
    switchSyntheticTaskStatus(request: SwitchSyntheticTaskStatusRequest): Promise<SwitchSyntheticTaskStatusResponse>;
    syncRecordingRulesWithOptions(request: SyncRecordingRulesRequest, runtime: $Util.RuntimeOptions): Promise<SyncRecordingRulesResponse>;
    syncRecordingRules(request: SyncRecordingRulesRequest): Promise<SyncRecordingRulesResponse>;
    turnOnSecondSwitchWithOptions(request: TurnOnSecondSwitchRequest, runtime: $Util.RuntimeOptions): Promise<TurnOnSecondSwitchResponse>;
    turnOnSecondSwitch(request: TurnOnSecondSwitchRequest): Promise<TurnOnSecondSwitchResponse>;
    uninstallManagedPrometheusWithOptions(request: UninstallManagedPrometheusRequest, runtime: $Util.RuntimeOptions): Promise<UninstallManagedPrometheusResponse>;
    uninstallManagedPrometheus(request: UninstallManagedPrometheusRequest): Promise<UninstallManagedPrometheusResponse>;
    uninstallPromClusterWithOptions(request: UninstallPromClusterRequest, runtime: $Util.RuntimeOptions): Promise<UninstallPromClusterResponse>;
    uninstallPromCluster(request: UninstallPromClusterRequest): Promise<UninstallPromClusterResponse>;
    updateAlertContactWithOptions(request: UpdateAlertContactRequest, runtime: $Util.RuntimeOptions): Promise<UpdateAlertContactResponse>;
    updateAlertContact(request: UpdateAlertContactRequest): Promise<UpdateAlertContactResponse>;
    updateAlertContactGroupWithOptions(request: UpdateAlertContactGroupRequest, runtime: $Util.RuntimeOptions): Promise<UpdateAlertContactGroupResponse>;
    updateAlertContactGroup(request: UpdateAlertContactGroupRequest): Promise<UpdateAlertContactGroupResponse>;
    updateAlertRuleWithOptions(request: UpdateAlertRuleRequest, runtime: $Util.RuntimeOptions): Promise<UpdateAlertRuleResponse>;
    updateAlertRule(request: UpdateAlertRuleRequest): Promise<UpdateAlertRuleResponse>;
    updateDispatchRuleWithOptions(request: UpdateDispatchRuleRequest, runtime: $Util.RuntimeOptions): Promise<UpdateDispatchRuleResponse>;
    updateDispatchRule(request: UpdateDispatchRuleRequest): Promise<UpdateDispatchRuleResponse>;
    updateIntegrationWithOptions(request: UpdateIntegrationRequest, runtime: $Util.RuntimeOptions): Promise<UpdateIntegrationResponse>;
    updateIntegration(request: UpdateIntegrationRequest): Promise<UpdateIntegrationResponse>;
    updatePrometheusAlertRuleWithOptions(request: UpdatePrometheusAlertRuleRequest, runtime: $Util.RuntimeOptions): Promise<UpdatePrometheusAlertRuleResponse>;
    updatePrometheusAlertRule(request: UpdatePrometheusAlertRuleRequest): Promise<UpdatePrometheusAlertRuleResponse>;
    updateWebhookWithOptions(request: UpdateWebhookRequest, runtime: $Util.RuntimeOptions): Promise<UpdateWebhookResponse>;
    updateWebhook(request: UpdateWebhookRequest): Promise<UpdateWebhookResponse>;
    uploadWithOptions(request: UploadRequest, runtime: $Util.RuntimeOptions): Promise<UploadResponse>;
    upload(request: UploadRequest): Promise<UploadResponse>;
}
